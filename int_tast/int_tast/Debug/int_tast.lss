
int_tast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b1  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052d  00000000  00000000  0000072d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025c  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	2d c0       	rjmp	.+90     	; 0x90 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <util/delay.h>

int main(void)
{
	//Pins als Ausgange konfigurieren
	DDRD |= (1<<PD5);
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	80 62       	ori	r24, 0x20	; 32
  3c:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<PD6);
  3e:	81 b3       	in	r24, 0x11	; 17
  40:	80 64       	ori	r24, 0x40	; 64
  42:	81 bb       	out	0x11, r24	; 17

    // externen Interrupt INTO auf steigende flanke konfigurieren
    MCUCR |= (1<<ISC00) | (1<<ISC01);
  44:	85 b7       	in	r24, 0x35	; 53
  46:	83 60       	ori	r24, 0x03	; 3
  48:	85 bf       	out	0x35, r24	; 53
	
    // externen Interrupt lokal aktivieren
    GICR |= (1<<INT0);
  4a:	8b b7       	in	r24, 0x3b	; 59
  4c:	80 64       	ori	r24, 0x40	; 64
  4e:	8b bf       	out	0x3b, r24	; 59

    // globale Interrupts aktivieren
    sei();
  50:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
        //gelbe LED an Ampel A anschalten
        PORTD |= (1<<PD6);
  52:	82 b3       	in	r24, 0x12	; 18
  54:	80 64       	ori	r24, 0x40	; 64
  56:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	2f ef       	ldi	r18, 0xFF	; 255
  5a:	83 ed       	ldi	r24, 0xD3	; 211
  5c:	90 e3       	ldi	r25, 0x30	; 48
  5e:	21 50       	subi	r18, 0x01	; 1
  60:	80 40       	sbci	r24, 0x00	; 0
  62:	90 40       	sbci	r25, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <__SREG__+0x1f>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__SREG__+0x29>
  68:	00 00       	nop
  6a:	f3 cf       	rjmp	.-26     	; 0x52 <__SREG__+0x13>

0000006c <__vector_1>:
        _delay_ms(1000);
		
    }
}

ISR(INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
    // togglen der roten LED an Ampel A
    PORTD ^= (1<<PD5);
  7a:	92 b3       	in	r25, 0x12	; 18
  7c:	80 e2       	ldi	r24, 0x20	; 32
  7e:	89 27       	eor	r24, r25
  80:	82 bb       	out	0x12, r24	; 18
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
