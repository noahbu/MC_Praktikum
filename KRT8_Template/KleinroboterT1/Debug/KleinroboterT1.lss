
KleinroboterT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002076  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00002076  0000210a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000022c  008000e4  008000e4  0000218e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000218e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000286f  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001069  00000000  00000000  00004cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000154a  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  000072b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a97  00000000  00000000  000079ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a7e  00000000  00000000  00008483  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00009f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_13>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__vector_15>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e6 e7       	ldi	r30, 0x76	; 118
     16a:	f0 e2       	ldi	r31, 0x20	; 32
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a4 3e       	cpi	r26, 0xE4	; 228
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	23 e0       	ldi	r18, 0x03	; 3
     17a:	a4 ee       	ldi	r26, 0xE4	; 228
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a0 31       	cpi	r26, 0x10	; 16
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 cc 00 	call	0x198	; 0x198 <main>
     18c:	0c 94 39 10 	jmp	0x2072	; 0x2072 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <reglerBalancieren_init>:
	}
}

/* Initialiserung des Reglers und der verwendet Filter */
void reglerBalancieren_init(void) 
{	
     194:	08 95       	ret

00000196 <reglerBalancieren_regelung>:
/* Ausführung des Reglers zum Balancieren 
	- Sensordaten lesen 
	- Komplementärfilter ausführen
	- Regler ausführen */
void reglerBalancieren_regelung(void) 
{
     196:	08 95       	ret

00000198 <main>:
						- TESTING */
uint8_t activeController = TESTING;

/* Hauptfunktion */
int main(void)
{	
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	67 97       	sbiw	r28, 0x17	; 23
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	cd bf       	out	0x3d, r28	; 61
	/* LEDs als Ausgï¿½nge setzen */
	DDRA |= (1<<LED_GRUEN);
     1ac:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA |= (1<<LED_GELB);
     1ae:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA |= (1<<LED_ROT);
     1b0:	d0 9a       	sbi	0x1a, 0	; 26
	DDRB |= (1<<LED_GRUENB);
     1b2:	b9 9a       	sbi	0x17, 1	; 23
	
	/* Initialisierung starten */
	// LED auf rot --> Kleinroboter nicht anfassen wï¿½hren Initialisierung
	PORTA |= (1<<LED_ROT);
     1b4:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b6:	2f ef       	ldi	r18, 0xFF	; 255
     1b8:	89 e6       	ldi	r24, 0x69	; 105
     1ba:	98 e1       	ldi	r25, 0x18	; 24
     1bc:	21 50       	subi	r18, 0x01	; 1
     1be:	80 40       	sbci	r24, 0x00	; 0
     1c0:	90 40       	sbci	r25, 0x00	; 0
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x24>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x2e>
     1c6:	00 00       	nop
	_delay_ms(1000);
	
	/*	Initialisiere Timer 0 zur Erzeugung der Samplezeit
		Samplezeit wird in als T_SAMPLE gesetzt */
	TIMSK |= (1<<OCIE0);									//enable output compare interrupt
     1c8:	89 b7       	in	r24, 0x39	; 57
     1ca:	82 60       	ori	r24, 0x02	; 2
     1cc:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS00);					// non PWM, normal operation OC0 disconnected, Clk = clk-IO / 1024
     1ce:	8d e0       	ldi	r24, 0x0D	; 13
     1d0:	83 bf       	out	0x33, r24	; 51
	OCR0 = (uint8_t)((float)F_CPU/1024 * T_SAMPLE);			// setze output compare register entsprechend
     1d2:	8e e4       	ldi	r24, 0x4E	; 78
     1d4:	8c bf       	out	0x3c, r24	; 60
	
	/* Alle Module initialisieren */
	// UART/Bluetooth aktivieren und initialisieren
	uart_init();	
     1d6:	0e 94 b3 06 	call	0xd66	; 0xd66 <uart_init>
	// Akkuspanungsmessung initialisieren
	akku_init();	
     1da:	0e 94 c9 04 	call	0x992	; 0x992 <akku_init>
	// Motoransteurung initialisieren
	motor_init();
     1de:	0e 94 82 01 	call	0x304	; 0x304 <motor_init>
	// SPI und die Sensoren am SPI Bus (Decoder und Accelerometer) initialisieren
	spi_init();
     1e2:	0e 94 97 07 	call	0xf2e	; 0xf2e <spi_init>
	qdec_init();
     1e6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <qdec_init>
	acc_init();
     1ea:	0e 94 56 08 	call	0x10ac	; 0x10ac <acc_init>
	// I2C und die Sensoren am I2C Bus (Gyro) initialisieren
	gyro_init();
     1ee:	0e 94 95 06 	call	0xd2a	; 0xd2a <gyro_init>
	// Regler initialisieren
	reglerTrajektorienfolge_init();
     1f2:	0e 94 be 04 	call	0x97c	; 0x97c <reglerTrajektorienfolge_init>
	reglerBalancieren_init();			
     1f6:	0e 94 ca 00 	call	0x194	; 0x194 <reglerBalancieren_init>
	
	/* Initialisierung abschlieï¿½en */
	// Akku Notabschaltung
	akku_check();
     1fa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <akku_check>
	// Interrupts einschalten
	sei();
     1fe:	78 94       	sei
	// ï¿½ber UART mitteilen, dass die Initialisierung abgeschlossen ist
	uart_puts((uint8_t*)"FINISHED INITIALIZATION\r\n");
     200:	88 e6       	ldi	r24, 0x68	; 104
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 12 07 	call	0xe24	; 0xe24 <uart_puts>
	// Rote LED aus --> Kleinroboter darf wieder bewegt werden
	PORTA &= ~(1<<LED_ROT);
     208:	d8 98       	cbi	0x1b, 0	; 27
	
	/* Programstart */
	PORTA |= (1<<LED_GELB);
     20a:	d9 9a       	sbi	0x1b, 1	; 27
	// Warten bis der Taster gedrï¿½ckt wird
	while((PINB & (1<<PB2)));
     20c:	b2 99       	sbic	0x16, 2	; 22
     20e:	fe cf       	rjmp	.-4      	; 0x20c <main+0x74>
     210:	2f ef       	ldi	r18, 0xFF	; 255
     212:	89 e6       	ldi	r24, 0x69	; 105
     214:	98 e1       	ldi	r25, 0x18	; 24
     216:	21 50       	subi	r18, 0x01	; 1
     218:	80 40       	sbci	r24, 0x00	; 0
     21a:	90 40       	sbci	r25, 0x00	; 0
     21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x7e>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x88>
     220:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~(1<<LED_GELB);
     222:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |= (1<<LED_GRUEN);
     224:	da 9a       	sbi	0x1b, 2	; 27
		
	/* Hauptprogramm */
	while(1)
    {		
		/* Regler ausfï¿½hren wenn das Sampleflag gesetzt wurde */
		if(sampleFlag)
     226:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__data_end>
     22a:	88 23       	and	r24, r24
     22c:	e1 f3       	breq	.-8      	; 0x226 <main+0x8e>
		{					
			// Sampleflag zurï¿½cksetzen
			sampleFlag = 0;
     22e:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <__data_end>
				
			if(activeController == MANUELLE_STEUERUNG) {
     232:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     236:	81 11       	cpse	r24, r1
     238:	03 c0       	rjmp	.+6      	; 0x240 <main+0xa8>
				/* Manual Control Mode */
				motor_manualCtrl();
     23a:	0e 94 80 03 	call	0x700	; 0x700 <motor_manualCtrl>
     23e:	3a c0       	rjmp	.+116    	; 0x2b4 <main+0x11c>
			} else if(activeController == BALANCIERREGLER) {
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	19 f4       	brne	.+6      	; 0x24a <main+0xb2>
				/* Balancierregler */
				reglerBalancieren_regelung();
     244:	0e 94 cb 00 	call	0x196	; 0x196 <reglerBalancieren_regelung>
     248:	35 c0       	rjmp	.+106    	; 0x2b4 <main+0x11c>
			} else if(activeController == TRAJEKTORIENREGLER) {
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	79 f5       	brne	.+94     	; 0x2ac <main+0x114>
				/* Vorsteuerung und Regelung
					Bitte die zum jeweils benï¿½tigten Funktionen einkommentieren */
				float u1_B, u2_B, x1_B, x2_B, x3_B;
				reglerTrajektorienfolge_beobachter(&u1_B, &u2_B, &x1_B, &x2_B, &x3_B);
     24e:	8e 01       	movw	r16, r28
     250:	0f 5f       	subi	r16, 0xFF	; 255
     252:	1f 4f       	sbci	r17, 0xFF	; 255
     254:	9e 01       	movw	r18, r28
     256:	28 5f       	subi	r18, 0xF8	; 248
     258:	3f 4f       	sbci	r19, 0xFF	; 255
     25a:	ae 01       	movw	r20, r28
     25c:	44 5f       	subi	r20, 0xF4	; 244
     25e:	5f 4f       	sbci	r21, 0xFF	; 255
     260:	be 01       	movw	r22, r28
     262:	60 5f       	subi	r22, 0xF0	; 240
     264:	7f 4f       	sbci	r23, 0xFF	; 255
     266:	ce 01       	movw	r24, r28
     268:	44 96       	adiw	r24, 0x14	; 20
     26a:	0e 94 c1 04 	call	0x982	; 0x982 <reglerTrajektorienfolge_beobachter>
				// reglerTrajektorienfolge_steuerung();
				reglerTrajektorienfolge_regelung(u1_B, u2_B, x1_B, x2_B, x3_B);
     26e:	a8 84       	ldd	r10, Y+8	; 0x08
     270:	b9 84       	ldd	r11, Y+9	; 0x09
     272:	ca 84       	ldd	r12, Y+10	; 0x0a
     274:	db 84       	ldd	r13, Y+11	; 0x0b
     276:	ec 84       	ldd	r14, Y+12	; 0x0c
     278:	fd 84       	ldd	r15, Y+13	; 0x0d
     27a:	0e 85       	ldd	r16, Y+14	; 0x0e
     27c:	1f 85       	ldd	r17, Y+15	; 0x0f
     27e:	28 89       	ldd	r18, Y+16	; 0x10
     280:	39 89       	ldd	r19, Y+17	; 0x11
     282:	4a 89       	ldd	r20, Y+18	; 0x12
     284:	5b 89       	ldd	r21, Y+19	; 0x13
     286:	6c 89       	ldd	r22, Y+20	; 0x14
     288:	7d 89       	ldd	r23, Y+21	; 0x15
     28a:	8e 89       	ldd	r24, Y+22	; 0x16
     28c:	9f 89       	ldd	r25, Y+23	; 0x17
     28e:	ec 81       	ldd	r30, Y+4	; 0x04
     290:	ef 93       	push	r30
     292:	eb 81       	ldd	r30, Y+3	; 0x03
     294:	ef 93       	push	r30
     296:	ea 81       	ldd	r30, Y+2	; 0x02
     298:	ef 93       	push	r30
     29a:	e9 81       	ldd	r30, Y+1	; 0x01
     29c:	ef 93       	push	r30
     29e:	0e 94 c2 04 	call	0x984	; 0x984 <reglerTrajektorienfolge_regelung>
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <main+0x11c>
			} else if(activeController == TESTING) {
     2ac:	83 30       	cpi	r24, 0x03	; 3
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <main+0x11c>
				/* CODE START */
				
				motor_manualCtrl();
     2b0:	0e 94 80 03 	call	0x700	; 0x700 <motor_manualCtrl>

				/* CODE END */
			}
			
			/* Warnung bei Nichteinhalten der Samplezeit */
			if(sampleFlag) {
     2b4:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__data_end>
     2b8:	88 23       	and	r24, r24
     2ba:	09 f4       	brne	.+2      	; 0x2be <main+0x126>
     2bc:	b4 cf       	rjmp	.-152    	; 0x226 <main+0x8e>
				char buff[7] = { 'm', 'i', 's', 's', '\r', '\n', '\0' };
     2be:	87 e0       	ldi	r24, 0x07	; 7
     2c0:	e1 e6       	ldi	r30, 0x61	; 97
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	de 01       	movw	r26, r28
     2c6:	11 96       	adiw	r26, 0x01	; 1
     2c8:	01 90       	ld	r0, Z+
     2ca:	0d 92       	st	X+, r0
     2cc:	8a 95       	dec	r24
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x130>
				uart_puts((uint8_t*)buff);				
     2d0:	ce 01       	movw	r24, r28
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	0e 94 12 07 	call	0xe24	; 0xe24 <uart_puts>
     2d8:	a6 cf       	rjmp	.-180    	; 0x226 <main+0x8e>

000002da <__vector_10>:
		}
	}
}

/* Timer-Interrupt */
ISR(TIMER0_COMP_vect) {
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	8f 93       	push	r24
     2e6:	9f 93       	push	r25
	// Setzen der Sample-Flag
	sampleFlag = 1;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__data_end>
	// Toggle der roten LED um sehen zu kï¿½nnen ob der Interrupt ausgefï¿½hrt wird
	PORTB ^= (1<<LED_GRUENB);
     2ee:	98 b3       	in	r25, 0x18	; 24
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	89 27       	eor	r24, r25
     2f4:	88 bb       	out	0x18, r24	; 24
}
     2f6:	9f 91       	pop	r25
     2f8:	8f 91       	pop	r24
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <motor_init>:
{
	/* CODE START */
	
    /* Motoransteuerung */

    DDRC |= (1<<PC7);	// Motor Links L_phase
     304:	a7 9a       	sbi	0x14, 7	; 20
    DDRC |= (1<<PC6);	// Motor rechts R_phase
     306:	a6 9a       	sbi	0x14, 6	; 20
    DDRD |= (1<<PD5);	// Motor links L_enbl
     308:	8d 9a       	sbi	0x11, 5	; 17
    DDRD |= (1<<PD4);	// Motor rechts R_enbl
     30a:	8c 9a       	sbi	0x11, 4	; 17

    //Set Timer1 for Fast PWM mode with ICR1 as TOP
    TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1<<COM1B1); // WGM11:0 = 10 for Fast PWM, COM1A1:0 = 10 for non-inverting mode
     30c:	82 ea       	ldi	r24, 0xA2	; 162
     30e:	8f bd       	out	0x2f, r24	; 47
    TCCR1B = (1 << WGM12) | (1 << WGM13); // WGM13:2 = 111 for Fast PWM with ICR1 as TOP
     310:	88 e1       	ldi	r24, 0x18	; 24
     312:	8e bd       	out	0x2e, r24	; 46
    
    //Set the prescaler and start the timer

    TCCR1B |= (1 << CS10); // CS12:0 = 010 for prescaler 8
     314:	8e b5       	in	r24, 0x2e	; 46
     316:	81 60       	ori	r24, 0x01	; 1
     318:	8e bd       	out	0x2e, r24	; 46

    //Set ICR1 to define the PWM period to achieve a ~10 kHz frequency
    ICR1 = MAX_PWM;
     31a:	8f e1       	ldi	r24, 0x1F	; 31
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	97 bd       	out	0x27, r25	; 39
     320:	86 bd       	out	0x26, r24	; 38
     322:	08 95       	ret

00000324 <motor_pwm>:

/* Routine zur Ansteuerung der Motoren per %DutyCycle 
	INPUT:  motorId -	Flag, welche das anzusteuerende Rad angibt
			pwm_duty -	Vorzeichenbehafteter Dutycycle (-1 voll zurï¿½ck, +1 voll vorwï¿½rts) */
void motor_pwm(uint8_t motorId, float pwm_duty)
{
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	cf 93       	push	r28
     32e:	c8 2f       	mov	r28, r24
     330:	6a 01       	movw	r12, r20
     332:	7b 01       	movw	r14, r22
	/* CODE START */

	if(pwm_duty > 1) pwm_duty = 1;
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	40 e8       	ldi	r20, 0x80	; 128
     33a:	5f e3       	ldi	r21, 0x3F	; 63
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 39 0a 	call	0x1472	; 0x1472 <__gesf2>
     344:	18 16       	cp	r1, r24
     346:	0c f4       	brge	.+2      	; 0x34a <motor_pwm+0x26>
     348:	60 c0       	rjmp	.+192    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	if(pwm_duty < -1) pwm_duty = -1;
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e8       	ldi	r20, 0x80	; 128
     350:	5f eb       	ldi	r21, 0xBF	; 191
     352:	c7 01       	movw	r24, r14
     354:	b6 01       	movw	r22, r12
     356:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__cmpsf2>
     35a:	88 23       	and	r24, r24
     35c:	0c f4       	brge	.+2      	; 0x360 <motor_pwm+0x3c>
     35e:	52 c0       	rjmp	.+164    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>

	if(motorId == FLAG_L)
     360:	c1 11       	cpse	r28, r1
     362:	2b c0       	rjmp	.+86     	; 0x3ba <motor_pwm+0x96>
	{
		if(pwm_duty > 0)
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	a9 01       	movw	r20, r18
     36a:	c7 01       	movw	r24, r14
     36c:	b6 01       	movw	r22, r12
     36e:	0e 94 39 0a 	call	0x1472	; 0x1472 <__gesf2>
     372:	18 16       	cp	r1, r24
     374:	4c f0       	brlt	.+18     	; 0x388 <motor_pwm+0x64>
     376:	12 c0       	rjmp	.+36     	; 0x39c <motor_pwm+0x78>
			pwm_duty -	Vorzeichenbehafteter Dutycycle (-1 voll zurï¿½ck, +1 voll vorwï¿½rts) */
void motor_pwm(uint8_t motorId, float pwm_duty)
{
	/* CODE START */

	if(pwm_duty > 1) pwm_duty = 1;
     378:	0f 2e       	mov	r0, r31
     37a:	c1 2c       	mov	r12, r1
     37c:	d1 2c       	mov	r13, r1
     37e:	f0 e8       	ldi	r31, 0x80	; 128
     380:	ef 2e       	mov	r14, r31
     382:	ff e3       	ldi	r31, 0x3F	; 63
     384:	ff 2e       	mov	r15, r31
     386:	f0 2d       	mov	r31, r0

	if(motorId == FLAG_L)
	{
		if(pwm_duty > 0)
		{
			PORTC |= (1<<PC7); // Set the direction to backward
     388:	af 9a       	sbi	0x15, 7	; 21
     38a:	09 c0       	rjmp	.+18     	; 0x39e <motor_pwm+0x7a>
void motor_pwm(uint8_t motorId, float pwm_duty)
{
	/* CODE START */

	if(pwm_duty > 1) pwm_duty = 1;
	if(pwm_duty < -1) pwm_duty = -1;
     38c:	0f 2e       	mov	r0, r31
     38e:	c1 2c       	mov	r12, r1
     390:	d1 2c       	mov	r13, r1
     392:	f0 e8       	ldi	r31, 0x80	; 128
     394:	ef 2e       	mov	r14, r31
     396:	ff eb       	ldi	r31, 0xBF	; 191
     398:	ff 2e       	mov	r15, r31
     39a:	f0 2d       	mov	r31, r0
		{
			PORTC |= (1<<PC7); // Set the direction to backward
		}
		else
		{
			PORTC &= ~(1<<PC7); // Set the direction to forward
     39c:	af 98       	cbi	0x15, 7	; 21
		}
		OCR1A = fabs(pwm_duty)*MAX_PWM; // Set the duty cycle
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	9f 77       	andi	r25, 0x7F	; 127
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 ec       	ldi	r19, 0xC0	; 192
     3a8:	47 e4       	ldi	r20, 0x47	; 71
     3aa:	54 e4       	ldi	r21, 0x44	; 68
     3ac:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     3b0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__fixunssfsi>
     3b4:	7b bd       	out	0x2b, r23	; 43
     3b6:	6a bd       	out	0x2a, r22	; 42
     3b8:	36 c0       	rjmp	.+108    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	}
	else if(motorId == FLAG_R)
     3ba:	c1 30       	cpi	r28, 0x01	; 1
     3bc:	a1 f5       	brne	.+104    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		if(pwm_duty < 0)
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	c7 01       	movw	r24, r14
     3c6:	b6 01       	movw	r22, r12
     3c8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__cmpsf2>
     3cc:	88 23       	and	r24, r24
     3ce:	5c f4       	brge	.+22     	; 0x3e6 <motor_pwm+0xc2>
     3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <motor_pwm+0xbe>
void motor_pwm(uint8_t motorId, float pwm_duty)
{
	/* CODE START */

	if(pwm_duty > 1) pwm_duty = 1;
	if(pwm_duty < -1) pwm_duty = -1;
     3d2:	0f 2e       	mov	r0, r31
     3d4:	c1 2c       	mov	r12, r1
     3d6:	d1 2c       	mov	r13, r1
     3d8:	f0 e8       	ldi	r31, 0x80	; 128
     3da:	ef 2e       	mov	r14, r31
     3dc:	ff eb       	ldi	r31, 0xBF	; 191
     3de:	ff 2e       	mov	r15, r31
     3e0:	f0 2d       	mov	r31, r0
	}
	else if(motorId == FLAG_R)
	{
		if(pwm_duty < 0)
		{
			PORTC |= (1<<PC6); // Set the direction to backward
     3e2:	ae 9a       	sbi	0x15, 6	; 21
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <motor_pwm+0xc4>
		} 
		else
		{
			PORTC &= ~(1<<PC6); // Set the direction to forward
     3e6:	ae 98       	cbi	0x15, 6	; 21
		}
		OCR1B = fabs(pwm_duty)*MAX_PWM; // Set the duty cycle
     3e8:	c7 01       	movw	r24, r14
     3ea:	b6 01       	movw	r22, r12
     3ec:	9f 77       	andi	r25, 0x7F	; 127
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 ec       	ldi	r19, 0xC0	; 192
     3f2:	47 e4       	ldi	r20, 0x47	; 71
     3f4:	54 e4       	ldi	r21, 0x44	; 68
     3f6:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     3fa:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__fixunssfsi>
     3fe:	79 bd       	out	0x29, r23	; 41
     400:	68 bd       	out	0x28, r22	; 40
	}
	/* CODE END */
}
     402:	11 c0       	rjmp	.+34     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	/* CODE START */

	if(pwm_duty > 1) pwm_duty = 1;
	if(pwm_duty < -1) pwm_duty = -1;

	if(motorId == FLAG_L)
     404:	cc 23       	and	r28, r28
     406:	11 f2       	breq	.-124    	; 0x38c <motor_pwm+0x68>
     408:	0c c0       	rjmp	.+24     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     40a:	cc 23       	and	r28, r28
     40c:	09 f4       	brne	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40e:	b4 cf       	rjmp	.-152    	; 0x378 <motor_pwm+0x54>
			pwm_duty -	Vorzeichenbehafteter Dutycycle (-1 voll zurï¿½ck, +1 voll vorwï¿½rts) */
void motor_pwm(uint8_t motorId, float pwm_duty)
{
	/* CODE START */

	if(pwm_duty > 1) pwm_duty = 1;
     410:	0f 2e       	mov	r0, r31
     412:	c1 2c       	mov	r12, r1
     414:	d1 2c       	mov	r13, r1
     416:	f0 e8       	ldi	r31, 0x80	; 128
     418:	ef 2e       	mov	r14, r31
     41a:	ff e3       	ldi	r31, 0x3F	; 63
     41c:	ff 2e       	mov	r15, r31
     41e:	f0 2d       	mov	r31, r0
     420:	cc cf       	rjmp	.-104    	; 0x3ba <motor_pwm+0x96>
		{
			PORTC &= ~(1<<PC7); // Set the direction to forward
		}
		OCR1A = fabs(pwm_duty)*MAX_PWM; // Set the duty cycle
	}
	else if(motorId == FLAG_R)
     422:	c1 30       	cpi	r28, 0x01	; 1
     424:	b1 f2       	breq	.-84     	; 0x3d2 <motor_pwm+0xae>
			PORTC &= ~(1<<PC6); // Set the direction to forward
		}
		OCR1B = fabs(pwm_duty)*MAX_PWM; // Set the duty cycle
	}
	/* CODE END */
}
     426:	cf 91       	pop	r28
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	08 95       	ret

00000432 <motor_setVel>:
	/* CODE END */
}

/* Routine zur Ansteuerung der Motoren mit Kennlinienkorrektur */
void motor_setVel(float vSollLinks, float vSollRechts)		// vSollLinks und vSollRechts in cm/s
{
     432:	4f 92       	push	r4
     434:	5f 92       	push	r5
     436:	6f 92       	push	r6
     438:	7f 92       	push	r7
     43a:	8f 92       	push	r8
     43c:	9f 92       	push	r9
     43e:	af 92       	push	r10
     440:	bf 92       	push	r11
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	2c 97       	sbiw	r28, 0x0c	; 12
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	6d 83       	std	Y+5, r22	; 0x05
     460:	7e 83       	std	Y+6, r23	; 0x06
     462:	8f 83       	std	Y+7, r24	; 0x07
     464:	98 87       	std	Y+8, r25	; 0x08
     466:	69 01       	movw	r12, r18
     468:	7a 01       	movw	r14, r20
	/* CODE START */

	float U_nom = 8.3; // [V] Nominal voltage
	float U_aktuell;
	U_aktuell = akku_voltage(); //
     46a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <akku_voltage>
     46e:	69 83       	std	Y+1, r22	; 0x01
     470:	7a 83       	std	Y+2, r23	; 0x02
     472:	8b 83       	std	Y+3, r24	; 0x03
     474:	9c 83       	std	Y+4, r25	; 0x04

	float sgn_L = 0;
	float sgn_R = 0;

	if(vSollLinks > 0) sgn_L = -1;
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	a9 01       	movw	r20, r18
     47c:	6d 81       	ldd	r22, Y+5	; 0x05
     47e:	7e 81       	ldd	r23, Y+6	; 0x06
     480:	8f 81       	ldd	r24, Y+7	; 0x07
     482:	98 85       	ldd	r25, Y+8	; 0x08
     484:	0e 94 39 0a 	call	0x1472	; 0x1472 <__gesf2>
     488:	18 16       	cp	r1, r24
     48a:	a4 f0       	brlt	.+40     	; 0x4b4 <motor_setVel+0x82>
	else if(vSollLinks < 0) sgn_L = 1;
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	a9 01       	movw	r20, r18
     492:	6d 81       	ldd	r22, Y+5	; 0x05
     494:	7e 81       	ldd	r23, Y+6	; 0x06
     496:	8f 81       	ldd	r24, Y+7	; 0x07
     498:	98 85       	ldd	r25, Y+8	; 0x08
     49a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__cmpsf2>
     49e:	88 23       	and	r24, r24
     4a0:	94 f4       	brge	.+36     	; 0x4c6 <motor_setVel+0x94>
     4a2:	0f 2e       	mov	r0, r31
     4a4:	81 2c       	mov	r8, r1
     4a6:	91 2c       	mov	r9, r1
     4a8:	f0 e8       	ldi	r31, 0x80	; 128
     4aa:	af 2e       	mov	r10, r31
     4ac:	ff e3       	ldi	r31, 0x3F	; 63
     4ae:	bf 2e       	mov	r11, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	0c c0       	rjmp	.+24     	; 0x4cc <motor_setVel+0x9a>
	U_aktuell = akku_voltage(); //

	float sgn_L = 0;
	float sgn_R = 0;

	if(vSollLinks > 0) sgn_L = -1;
     4b4:	0f 2e       	mov	r0, r31
     4b6:	81 2c       	mov	r8, r1
     4b8:	91 2c       	mov	r9, r1
     4ba:	f0 e8       	ldi	r31, 0x80	; 128
     4bc:	af 2e       	mov	r10, r31
     4be:	ff eb       	ldi	r31, 0xBF	; 191
     4c0:	bf 2e       	mov	r11, r31
     4c2:	f0 2d       	mov	r31, r0
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <motor_setVel+0x9a>

	float U_nom = 8.3; // [V] Nominal voltage
	float U_aktuell;
	U_aktuell = akku_voltage(); //

	float sgn_L = 0;
     4c6:	81 2c       	mov	r8, r1
     4c8:	91 2c       	mov	r9, r1
     4ca:	54 01       	movw	r10, r8
	float sgn_R = 0;

	if(vSollLinks > 0) sgn_L = -1;
	else if(vSollLinks < 0) sgn_L = 1;

	if(vSollRechts > 0) sgn_R = 1;
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	a9 01       	movw	r20, r18
     4d2:	c7 01       	movw	r24, r14
     4d4:	b6 01       	movw	r22, r12
     4d6:	0e 94 39 0a 	call	0x1472	; 0x1472 <__gesf2>
     4da:	18 16       	cp	r1, r24
     4dc:	94 f0       	brlt	.+36     	; 0x502 <motor_setVel+0xd0>
	else if(vSollRechts < 0) sgn_R = -1;
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	a9 01       	movw	r20, r18
     4e4:	c7 01       	movw	r24, r14
     4e6:	b6 01       	movw	r22, r12
     4e8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__cmpsf2>
     4ec:	88 23       	and	r24, r24
     4ee:	94 f4       	brge	.+36     	; 0x514 <motor_setVel+0xe2>
     4f0:	0f 2e       	mov	r0, r31
     4f2:	41 2c       	mov	r4, r1
     4f4:	51 2c       	mov	r5, r1
     4f6:	f0 e8       	ldi	r31, 0x80	; 128
     4f8:	6f 2e       	mov	r6, r31
     4fa:	ff eb       	ldi	r31, 0xBF	; 191
     4fc:	7f 2e       	mov	r7, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	0c c0       	rjmp	.+24     	; 0x51a <motor_setVel+0xe8>
	float sgn_R = 0;

	if(vSollLinks > 0) sgn_L = -1;
	else if(vSollLinks < 0) sgn_L = 1;

	if(vSollRechts > 0) sgn_R = 1;
     502:	0f 2e       	mov	r0, r31
     504:	41 2c       	mov	r4, r1
     506:	51 2c       	mov	r5, r1
     508:	f0 e8       	ldi	r31, 0x80	; 128
     50a:	6f 2e       	mov	r6, r31
     50c:	ff e3       	ldi	r31, 0x3F	; 63
     50e:	7f 2e       	mov	r7, r31
     510:	f0 2d       	mov	r31, r0
     512:	03 c0       	rjmp	.+6      	; 0x51a <motor_setVel+0xe8>
	float U_nom = 8.3; // [V] Nominal voltage
	float U_aktuell;
	U_aktuell = akku_voltage(); //

	float sgn_L = 0;
	float sgn_R = 0;
     514:	41 2c       	mov	r4, r1
     516:	51 2c       	mov	r5, r1
     518:	32 01       	movw	r6, r4
	else if(vSollRechts < 0) sgn_R = -1;



    // Convert the target speeds to PWM duty cycle using the motor characteristics.
    float pwmDutyL = (U_nom/U_aktuell) * (mv_L * vSollLinks + cv_L * sgn_L);
     51a:	29 81       	ldd	r18, Y+1	; 0x01
     51c:	3a 81       	ldd	r19, Y+2	; 0x02
     51e:	4b 81       	ldd	r20, Y+3	; 0x03
     520:	5c 81       	ldd	r21, Y+4	; 0x04
     522:	6d ec       	ldi	r22, 0xCD	; 205
     524:	7c ec       	ldi	r23, 0xCC	; 204
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	91 e4       	ldi	r25, 0x41	; 65
     52a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__divsf3>
     52e:	69 83       	std	Y+1, r22	; 0x01
     530:	7a 83       	std	Y+2, r23	; 0x02
     532:	8b 83       	std	Y+3, r24	; 0x03
     534:	9c 83       	std	Y+4, r25	; 0x04
    float pwmDutyR = (U_nom/U_aktuell) * (mv_R * vSollRechts + cv_R * sgn_R);
     536:	28 e4       	ldi	r18, 0x48	; 72
     538:	39 ea       	ldi	r19, 0xA9	; 169
     53a:	44 e0       	ldi	r20, 0x04	; 4
     53c:	5c e3       	ldi	r21, 0x3C	; 60
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     546:	6b 01       	movw	r12, r22
     548:	7c 01       	movw	r14, r24
     54a:	2a ed       	ldi	r18, 0xDA	; 218
     54c:	36 ee       	ldi	r19, 0xE6	; 230
     54e:	46 e4       	ldi	r20, 0x46	; 70
     550:	5c e3       	ldi	r21, 0x3C	; 60
     552:	c3 01       	movw	r24, r6
     554:	b2 01       	movw	r22, r4
     556:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	c7 01       	movw	r24, r14
     560:	b6 01       	movw	r22, r12
     562:	0e 94 75 08 	call	0x10ea	; 0x10ea <__addsf3>
     566:	29 81       	ldd	r18, Y+1	; 0x01
     568:	3a 81       	ldd	r19, Y+2	; 0x02
     56a:	4b 81       	ldd	r20, Y+3	; 0x03
     56c:	5c 81       	ldd	r21, Y+4	; 0x04
     56e:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     572:	69 87       	std	Y+9, r22	; 0x09
     574:	7a 87       	std	Y+10, r23	; 0x0a
     576:	8b 87       	std	Y+11, r24	; 0x0b
     578:	9c 87       	std	Y+12, r25	; 0x0c

    // The direction is determined by the sign of vSollLinks and vSollRechts
    // If negative, we need to drive the motor in reverse.

    // Apply the PWM duty cycle to the motors, ensuring direction is handled.
    motor_pwm(FLAG_L, pwmDutyL);
     57a:	28 e4       	ldi	r18, 0x48	; 72
     57c:	39 ea       	ldi	r19, 0xA9	; 169
     57e:	44 e0       	ldi	r20, 0x04	; 4
     580:	5c e3       	ldi	r21, 0x3C	; 60
     582:	6d 81       	ldd	r22, Y+5	; 0x05
     584:	7e 81       	ldd	r23, Y+6	; 0x06
     586:	8f 81       	ldd	r24, Y+7	; 0x07
     588:	98 85       	ldd	r25, Y+8	; 0x08
     58a:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     58e:	6b 01       	movw	r12, r22
     590:	7c 01       	movw	r14, r24
     592:	2a ed       	ldi	r18, 0xDA	; 218
     594:	36 ee       	ldi	r19, 0xE6	; 230
     596:	46 e4       	ldi	r20, 0x46	; 70
     598:	5c e3       	ldi	r21, 0x3C	; 60
     59a:	c5 01       	movw	r24, r10
     59c:	b4 01       	movw	r22, r8
     59e:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     5a2:	9b 01       	movw	r18, r22
     5a4:	ac 01       	movw	r20, r24
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	0e 94 75 08 	call	0x10ea	; 0x10ea <__addsf3>
     5ae:	29 81       	ldd	r18, Y+1	; 0x01
     5b0:	3a 81       	ldd	r19, Y+2	; 0x02
     5b2:	4b 81       	ldd	r20, Y+3	; 0x03
     5b4:	5c 81       	ldd	r21, Y+4	; 0x04
     5b6:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     5ba:	ab 01       	movw	r20, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 92 01 	call	0x324	; 0x324 <motor_pwm>
    motor_pwm(FLAG_R, pwmDutyR);
     5c4:	49 85       	ldd	r20, Y+9	; 0x09
     5c6:	5a 85       	ldd	r21, Y+10	; 0x0a
     5c8:	6b 85       	ldd	r22, Y+11	; 0x0b
     5ca:	7c 85       	ldd	r23, Y+12	; 0x0c
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 92 01 	call	0x324	; 0x324 <motor_pwm>

	/* CODE END */		
}
     5d2:	2c 96       	adiw	r28, 0x0c	; 12
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	bf 90       	pop	r11
     5ec:	af 90       	pop	r10
     5ee:	9f 90       	pop	r9
     5f0:	8f 90       	pop	r8
     5f2:	7f 90       	pop	r7
     5f4:	6f 90       	pop	r6
     5f6:	5f 90       	pop	r5
     5f8:	4f 90       	pop	r4
     5fa:	08 95       	ret

000005fc <motor_getVel>:

/* Routine zum Auslesen der Radgeschwindigkeiten in cm/s ï¿½ber die Decoder
	OUTPUT: vMessLinks - Geschwindigkeit des linken Rades (cm/s)
			vMessRechts - Geschwindigkeit des rechten Rades (cm/s) */
void motor_getVel(float* vMessLinks, float* vMessRechts)
{
     5fc:	4f 92       	push	r4
     5fe:	5f 92       	push	r5
     600:	6f 92       	push	r6
     602:	7f 92       	push	r7
     604:	8f 92       	push	r8
     606:	9f 92       	push	r9
     608:	af 92       	push	r10
     60a:	bf 92       	push	r11
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	ec 01       	movw	r28, r24
     61e:	8b 01       	movw	r16, r22
	// Geschwindigkeit des linken und rechten Rades in cm/s

    static int32_t lastCountLeft = 0;
    static int32_t lastCountRight = 0;

    int32_t currentCountLeft = qdec_getCounts(FLAG_SPI_QDEC_L);
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 09 08 	call	0x1012	; 0x1012 <qdec_getCounts>
     626:	4b 01       	movw	r8, r22
     628:	5c 01       	movw	r10, r24
    int32_t currentCountRight = qdec_getCounts(FLAG_SPI_QDEC_R);
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	0e 94 09 08 	call	0x1012	; 0x1012 <qdec_getCounts>
     630:	6b 01       	movw	r12, r22
     632:	7c 01       	movw	r14, r24
    // Berechnen Sie die zurÃ¼ckgelegte Strecke fÃ¼r jedes Rad
    float distancePerCountLeft = (PI * D_RAD_L) / COUNTS_PER_REV;
    float distancePerCountRight = (PI * D_RAD_R) / COUNTS_PER_REV; 

    int32_t deltaCountLeft = currentCountLeft - lastCountLeft;
    int32_t deltaCountRight = currentCountRight - lastCountRight;
     634:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <lastCountRight.2042>
     638:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <lastCountRight.2042+0x1>
     63c:	a0 91 e7 00 	lds	r26, 0x00E7	; 0x8000e7 <lastCountRight.2042+0x2>
     640:	b0 91 e8 00 	lds	r27, 0x00E8	; 0x8000e8 <lastCountRight.2042+0x3>
     644:	26 01       	movw	r4, r12
     646:	37 01       	movw	r6, r14
     648:	48 1a       	sub	r4, r24
     64a:	59 0a       	sbc	r5, r25
     64c:	6a 0a       	sbc	r6, r26
     64e:	7b 0a       	sbc	r7, r27

    // Geschwindigkeit in cm/s berechnen
    *vMessLinks = (distancePerCountLeft * deltaCountLeft) / T_SAMPLE ;
     650:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <lastCountLeft.2041>
     654:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <lastCountLeft.2041+0x1>
     658:	a0 91 eb 00 	lds	r26, 0x00EB	; 0x8000eb <lastCountLeft.2041+0x2>
     65c:	b0 91 ec 00 	lds	r27, 0x00EC	; 0x8000ec <lastCountLeft.2041+0x3>
     660:	a5 01       	movw	r20, r10
     662:	94 01       	movw	r18, r8
     664:	28 1b       	sub	r18, r24
     666:	39 0b       	sbc	r19, r25
     668:	4a 0b       	sbc	r20, r26
     66a:	5b 0b       	sbc	r21, r27
     66c:	ca 01       	movw	r24, r20
     66e:	b9 01       	movw	r22, r18
     670:	0e 94 89 09 	call	0x1312	; 0x1312 <__floatsisf>
     674:	2a ee       	ldi	r18, 0xEA	; 234
     676:	3a eb       	ldi	r19, 0xBA	; 186
     678:	4c eb       	ldi	r20, 0xBC	; 188
     67a:	5b e3       	ldi	r21, 0x3B	; 59
     67c:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     680:	2a e0       	ldi	r18, 0x0A	; 10
     682:	37 ed       	ldi	r19, 0xD7	; 215
     684:	43 e2       	ldi	r20, 0x23	; 35
     686:	5c e3       	ldi	r21, 0x3C	; 60
     688:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__divsf3>
     68c:	68 83       	st	Y, r22
     68e:	79 83       	std	Y+1, r23	; 0x01
     690:	8a 83       	std	Y+2, r24	; 0x02
     692:	9b 83       	std	Y+3, r25	; 0x03
    *vMessRechts = (distancePerCountRight * deltaCountRight) / T_SAMPLE;
     694:	c3 01       	movw	r24, r6
     696:	b2 01       	movw	r22, r4
     698:	0e 94 89 09 	call	0x1312	; 0x1312 <__floatsisf>
     69c:	2a ee       	ldi	r18, 0xEA	; 234
     69e:	3a eb       	ldi	r19, 0xBA	; 186
     6a0:	4c eb       	ldi	r20, 0xBC	; 188
     6a2:	5b e3       	ldi	r21, 0x3B	; 59
     6a4:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     6a8:	2a e0       	ldi	r18, 0x0A	; 10
     6aa:	37 ed       	ldi	r19, 0xD7	; 215
     6ac:	43 e2       	ldi	r20, 0x23	; 35
     6ae:	5c e3       	ldi	r21, 0x3C	; 60
     6b0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__divsf3>
     6b4:	f8 01       	movw	r30, r16
     6b6:	60 83       	st	Z, r22
     6b8:	71 83       	std	Z+1, r23	; 0x01
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	93 83       	std	Z+3, r25	; 0x03

    // Aktualisieren der letzten Count-Werte fÃ¼r die nÃ¤chste Messung
    lastCountLeft = currentCountLeft;
     6be:	80 92 e9 00 	sts	0x00E9, r8	; 0x8000e9 <lastCountLeft.2041>
     6c2:	90 92 ea 00 	sts	0x00EA, r9	; 0x8000ea <lastCountLeft.2041+0x1>
     6c6:	a0 92 eb 00 	sts	0x00EB, r10	; 0x8000eb <lastCountLeft.2041+0x2>
     6ca:	b0 92 ec 00 	sts	0x00EC, r11	; 0x8000ec <lastCountLeft.2041+0x3>
    lastCountRight = currentCountRight;
     6ce:	c0 92 e5 00 	sts	0x00E5, r12	; 0x8000e5 <lastCountRight.2042>
     6d2:	d0 92 e6 00 	sts	0x00E6, r13	; 0x8000e6 <lastCountRight.2042+0x1>
     6d6:	e0 92 e7 00 	sts	0x00E7, r14	; 0x8000e7 <lastCountRight.2042+0x2>
     6da:	f0 92 e8 00 	sts	0x00E8, r15	; 0x8000e8 <lastCountRight.2042+0x3>
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	9f 90       	pop	r9
     6f4:	8f 90       	pop	r8
     6f6:	7f 90       	pop	r7
     6f8:	6f 90       	pop	r6
     6fa:	5f 90       	pop	r5
     6fc:	4f 90       	pop	r4
     6fe:	08 95       	ret

00000700 <motor_manualCtrl>:
	/* CODE END */		
}

/* Routine zur manuellen Steuerung per UART */
void motor_manualCtrl(void) 
{
     700:	2f 92       	push	r2
     702:	3f 92       	push	r3
     704:	4f 92       	push	r4
     706:	5f 92       	push	r5
     708:	6f 92       	push	r6
     70a:	7f 92       	push	r7
     70c:	8f 92       	push	r8
     70e:	9f 92       	push	r9
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	ce 59       	subi	r28, 0x9E	; 158
     72a:	d1 09       	sbc	r29, r1
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
	float vel_R = 0;

	//werte fÃ¼r die tasten sind im header definiert

	// werte Ã¼ber UART empfangen und in variable speichern
	uint8_t data = uart_getch();
     736:	0e 94 cc 06 	call	0xd98	; 0xd98 <uart_getch>

	switch (data)
     73a:	84 36       	cpi	r24, 0x64	; 100
     73c:	09 f4       	brne	.+2      	; 0x740 <motor_manualCtrl+0x40>
     73e:	51 c0       	rjmp	.+162    	; 0x7e2 <motor_manualCtrl+0xe2>
     740:	30 f4       	brcc	.+12     	; 0x74e <motor_manualCtrl+0x4e>
     742:	80 32       	cpi	r24, 0x20	; 32
     744:	09 f4       	brne	.+2      	; 0x748 <motor_manualCtrl+0x48>
     746:	64 c0       	rjmp	.+200    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     748:	81 36       	cpi	r24, 0x61	; 97
     74a:	a1 f1       	breq	.+104    	; 0x7b4 <motor_manualCtrl+0xb4>
     74c:	79 c0       	rjmp	.+242    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     74e:	83 37       	cpi	r24, 0x73	; 115
     750:	d1 f0       	breq	.+52     	; 0x786 <motor_manualCtrl+0x86>
     752:	87 37       	cpi	r24, 0x77	; 119
     754:	09 f0       	breq	.+2      	; 0x758 <motor_manualCtrl+0x58>
     756:	74 c0       	rjmp	.+232    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	{
	case 'w':
		forward += 1.0;
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e8       	ldi	r20, 0x80	; 128
     75e:	5f e3       	ldi	r21, 0x3F	; 63
     760:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <forward>
     764:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <forward+0x1>
     768:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <forward+0x2>
     76c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <forward+0x3>
     770:	0e 94 75 08 	call	0x10ea	; 0x10ea <__addsf3>
     774:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <forward>
     778:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <forward+0x1>
     77c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <forward+0x2>
     780:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <forward+0x3>
		break;
     784:	5d c0       	rjmp	.+186    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	case 's':
		forward -= 1.0;
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e8       	ldi	r20, 0x80	; 128
     78c:	5f e3       	ldi	r21, 0x3F	; 63
     78e:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <forward>
     792:	70 91 05 03 	lds	r23, 0x0305	; 0x800305 <forward+0x1>
     796:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <forward+0x2>
     79a:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <forward+0x3>
     79e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__subsf3>
     7a2:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <forward>
     7a6:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <forward+0x1>
     7aa:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <forward+0x2>
     7ae:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <forward+0x3>
		break;
     7b2:	46 c0       	rjmp	.+140    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	case 'a':
		left += 1.0;
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e8       	ldi	r20, 0x80	; 128
     7ba:	5f e3       	ldi	r21, 0x3F	; 63
     7bc:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <left>
     7c0:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <left+0x1>
     7c4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <left+0x2>
     7c8:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <left+0x3>
     7cc:	0e 94 75 08 	call	0x10ea	; 0x10ea <__addsf3>
     7d0:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <left>
     7d4:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <left+0x1>
     7d8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <left+0x2>
     7dc:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <left+0x3>
		break;
     7e0:	2f c0       	rjmp	.+94     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	case 'd':
		left -= 1.0;
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e8       	ldi	r20, 0x80	; 128
     7e8:	5f e3       	ldi	r21, 0x3F	; 63
     7ea:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <left>
     7ee:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <left+0x1>
     7f2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <left+0x2>
     7f6:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <left+0x3>
     7fa:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__subsf3>
     7fe:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <left>
     802:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <left+0x1>
     806:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <left+0x2>
     80a:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <left+0x3>
		break;
     80e:	18 c0       	rjmp	.+48     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	case ' ':
		forward = 0;
     810:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <forward>
     814:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <forward+0x1>
     818:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <forward+0x2>
     81c:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <forward+0x3>
		left = 0;
     820:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <left>
     824:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <left+0x1>
     828:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <left+0x2>
     82c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <left+0x3>
		right = 0;
     830:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <right>
     834:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <right+0x1>
     838:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <right+0x2>
     83c:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <right+0x3>
	//pwm_duty_L = forward - backward - left + right;

	//vel_R = forward - backward + left - right;
	//vel_L = forward - backward - left + right;

	vel_R = forward -left;
     840:	40 90 04 03 	lds	r4, 0x0304	; 0x800304 <forward>
     844:	50 90 05 03 	lds	r5, 0x0305	; 0x800305 <forward+0x1>
     848:	60 90 06 03 	lds	r6, 0x0306	; 0x800306 <forward+0x2>
     84c:	70 90 07 03 	lds	r7, 0x0307	; 0x800307 <forward+0x3>
     850:	c0 90 01 02 	lds	r12, 0x0201	; 0x800201 <left>
     854:	d0 90 02 02 	lds	r13, 0x0202	; 0x800202 <left+0x1>
     858:	e0 90 03 02 	lds	r14, 0x0203	; 0x800203 <left+0x2>
     85c:	f0 90 04 02 	lds	r15, 0x0204	; 0x800204 <left+0x3>
     860:	a7 01       	movw	r20, r14
     862:	96 01       	movw	r18, r12
     864:	c3 01       	movw	r24, r6
     866:	b2 01       	movw	r22, r4
     868:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__subsf3>
     86c:	86 2e       	mov	r8, r22
     86e:	97 2e       	mov	r9, r23
     870:	28 2e       	mov	r2, r24
     872:	39 2e       	mov	r3, r25
	vel_L = forward +left;
     874:	a7 01       	movw	r20, r14
     876:	96 01       	movw	r18, r12
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	0e 94 75 08 	call	0x10ea	; 0x10ea <__addsf3>
     880:	e6 2e       	mov	r14, r22
     882:	f7 2e       	mov	r15, r23
     884:	08 2f       	mov	r16, r24
     886:	19 2f       	mov	r17, r25

	char buffer[150];

	float v_ist_L, v_ist_R;
	motor_getVel(&v_ist_L, &v_ist_R);
     888:	be 01       	movw	r22, r28
     88a:	65 56       	subi	r22, 0x65	; 101
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	ce 01       	movw	r24, r28
     890:	89 56       	subi	r24, 0x69	; 105
     892:	9f 4f       	sbci	r25, 0xFF	; 255
     894:	0e 94 fe 02 	call	0x5fc	; 0x5fc <motor_getVel>

	snprintf(buffer, sizeof(buffer), "L_ist: %.2f, L_soll: %.2f , R_ist: %.2f, R_soll: %.2f \r\n", v_ist_L, vel_L, v_ist_R, vel_R);
     898:	3f 92       	push	r3
     89a:	2f 92       	push	r2
     89c:	9f 92       	push	r9
     89e:	8f 92       	push	r8
     8a0:	c2 56       	subi	r28, 0x62	; 98
     8a2:	df 4f       	sbci	r29, 0xFF	; 255
     8a4:	88 81       	ld	r24, Y
     8a6:	ce 59       	subi	r28, 0x9E	; 158
     8a8:	d0 40       	sbci	r29, 0x00	; 0
     8aa:	8f 93       	push	r24
     8ac:	c3 56       	subi	r28, 0x63	; 99
     8ae:	df 4f       	sbci	r29, 0xFF	; 255
     8b0:	88 81       	ld	r24, Y
     8b2:	cd 59       	subi	r28, 0x9D	; 157
     8b4:	d0 40       	sbci	r29, 0x00	; 0
     8b6:	8f 93       	push	r24
     8b8:	c4 56       	subi	r28, 0x64	; 100
     8ba:	df 4f       	sbci	r29, 0xFF	; 255
     8bc:	88 81       	ld	r24, Y
     8be:	cc 59       	subi	r28, 0x9C	; 156
     8c0:	d0 40       	sbci	r29, 0x00	; 0
     8c2:	8f 93       	push	r24
     8c4:	c5 56       	subi	r28, 0x65	; 101
     8c6:	df 4f       	sbci	r29, 0xFF	; 255
     8c8:	88 81       	ld	r24, Y
     8ca:	cb 59       	subi	r28, 0x9B	; 155
     8cc:	d0 40       	sbci	r29, 0x00	; 0
     8ce:	8f 93       	push	r24
     8d0:	1f 93       	push	r17
     8d2:	0f 93       	push	r16
     8d4:	ff 92       	push	r15
     8d6:	ef 92       	push	r14
     8d8:	c6 56       	subi	r28, 0x66	; 102
     8da:	df 4f       	sbci	r29, 0xFF	; 255
     8dc:	88 81       	ld	r24, Y
     8de:	ca 59       	subi	r28, 0x9A	; 154
     8e0:	d0 40       	sbci	r29, 0x00	; 0
     8e2:	8f 93       	push	r24
     8e4:	c7 56       	subi	r28, 0x67	; 103
     8e6:	df 4f       	sbci	r29, 0xFF	; 255
     8e8:	88 81       	ld	r24, Y
     8ea:	c9 59       	subi	r28, 0x99	; 153
     8ec:	d0 40       	sbci	r29, 0x00	; 0
     8ee:	8f 93       	push	r24
     8f0:	c8 56       	subi	r28, 0x68	; 104
     8f2:	df 4f       	sbci	r29, 0xFF	; 255
     8f4:	88 81       	ld	r24, Y
     8f6:	c8 59       	subi	r28, 0x98	; 152
     8f8:	d0 40       	sbci	r29, 0x00	; 0
     8fa:	8f 93       	push	r24
     8fc:	c9 56       	subi	r28, 0x69	; 105
     8fe:	df 4f       	sbci	r29, 0xFF	; 255
     900:	88 81       	ld	r24, Y
     902:	c7 59       	subi	r28, 0x97	; 151
     904:	d0 40       	sbci	r29, 0x00	; 0
     906:	8f 93       	push	r24
     908:	82 e8       	ldi	r24, 0x82	; 130
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	1f 92       	push	r1
     912:	86 e9       	ldi	r24, 0x96	; 150
     914:	8f 93       	push	r24
     916:	ce 01       	movw	r24, r28
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	5c 01       	movw	r10, r24
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <snprintf>
	uart_puts((uint8_t*)buffer);
     924:	c5 01       	movw	r24, r10
     926:	0e 94 12 07 	call	0xe24	; 0xe24 <uart_puts>
	//motor_pwm(FLAG_L, 50);
	//motor_pwm(FLAG_R, 50);

	//velocity control

	motor_setVel(vel_L, vel_R);
     92a:	28 2d       	mov	r18, r8
     92c:	39 2d       	mov	r19, r9
     92e:	42 2d       	mov	r20, r2
     930:	53 2d       	mov	r21, r3
     932:	6e 2d       	mov	r22, r14
     934:	7f 2d       	mov	r23, r15
     936:	80 2f       	mov	r24, r16
     938:	91 2f       	mov	r25, r17
     93a:	0e 94 19 02 	call	0x432	; 0x432 <motor_setVel>

	/* CODE END */
}
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	c2 56       	subi	r28, 0x62	; 98
     94a:	df 4f       	sbci	r29, 0xFF	; 255
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	7f 90       	pop	r7
     970:	6f 90       	pop	r6
     972:	5f 90       	pop	r5
     974:	4f 90       	pop	r4
     976:	3f 90       	pop	r3
     978:	2f 90       	pop	r2
     97a:	08 95       	ret

0000097c <reglerTrajektorienfolge_init>:
	/* CODE END */
}

/*Ausführung der flachheitsbasierten Steuerung */
void reglerTrajektorienfolge_steuerung(void)
{
     97c:	0e 94 a2 06 	call	0xd44	; 0xd44 <trajektorie_init>
     980:	08 95       	ret

00000982 <reglerTrajektorienfolge_beobachter>:
     982:	08 95       	ret

00000984 <reglerTrajektorienfolge_regelung>:
			u2_B - Beobachteter Eingang 2
			x1_B - Beobachteter Zustand 1
			X2_B - Beobachteter Zustand 2
			x3_B - Beobachteter Zustand 3 */
void reglerTrajektorienfolge_regelung(float u1_B, float u2_B, float x1_B, float x2_B, float x3_B)
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
	/* CODE START */
	/* CODE END */	
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <akku_init>:

/* Initialisierungsroutine für das Auslesen der Akkuspannung */
void akku_init()
{
	/* ADC auf Kannal ADC3 setzen und lediglich ADCH Register verwenden */
	ADMUX |= ((1<<MUX0) | (1<<MUX1) | (1<<ADLAR));
     992:	87 b1       	in	r24, 0x07	; 7
     994:	83 62       	ori	r24, 0x23	; 35
     996:	87 b9       	out	0x07, r24	; 7
	
	/* ADC aktivieren und Prescale auf 128 setzten */
	ADCSRA |= ((1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2));
     998:	86 b1       	in	r24, 0x06	; 6
     99a:	87 68       	ori	r24, 0x87	; 135
     99c:	86 b9       	out	0x06, r24	; 6
	
	/* Erste ADC-Wandlung starten */
	ADCSRA |= (1<<ADSC);
     99e:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     9a0:	36 99       	sbic	0x06, 6	; 6
     9a2:	fe cf       	rjmp	.-4      	; 0x9a0 <akku_init+0xe>
}
     9a4:	08 95       	ret

000009a6 <akku_voltage>:

/* Routine zum  Abfragen der aktuellen Akkuspannung */
float akku_voltage()
{
	/* ADC auf Kannal ADC3 setzen und lediglich ADCH Register verwenden */
	ADMUX |= ((1<<MUX0) | (1<<MUX1) | (1<<ADLAR));
     9a6:	87 b1       	in	r24, 0x07	; 7
     9a8:	83 62       	ori	r24, 0x23	; 35
     9aa:	87 b9       	out	0x07, r24	; 7
	
	/* ADC-Wandlung starten */
	ADCSRA |= (1<<ADSC);
     9ac:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     9ae:	36 99       	sbic	0x06, 6	; 6
     9b0:	fe cf       	rjmp	.-4      	; 0x9ae <akku_voltage+0x8>
	uint8_t voltage8 = ADCH;
     9b2:	65 b1       	in	r22, 0x05	; 5
	
	/* Wandlungsergebnis vom ADC3 in einen Spannungswert umrechnen */
	return ((float)voltage8/255.0*SPANNUNGSTEILER*VREF);
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 87 09 	call	0x130e	; 0x130e <__floatunsisf>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	4f e7       	ldi	r20, 0x7F	; 127
     9c4:	53 e4       	ldi	r21, 0x43	; 67
     9c6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__divsf3>
     9ca:	28 e4       	ldi	r18, 0x48	; 72
     9cc:	31 ee       	ldi	r19, 0xE1	; 225
     9ce:	42 e1       	ldi	r20, 0x12	; 18
     9d0:	51 e4       	ldi	r21, 0x41	; 65
     9d2:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e5       	ldi	r20, 0x50	; 80
     9dc:	50 e4       	ldi	r21, 0x40	; 64
     9de:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
}
     9e2:	08 95       	ret

000009e4 <akku_check>:

/* Routine zur Überpüfung, ob die Akkuspannung nicht unterhalb des kritischen Wertes liegt */
void akku_check()
{
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	6e 97       	sbiw	r28, 0x1e	; 30
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
	/* Wenn der Akku leer ist wird in eine Endlosschleife gesprungen,
	 so dass das User-Programm nicht gestartet wird */
		
	/* Abfragen der aktuellen Akkuspannung */
	float voltage = akku_voltage();
     a0a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <akku_voltage>
     a0e:	d6 2e       	mov	r13, r22
     a10:	c7 2e       	mov	r12, r23
     a12:	b8 2e       	mov	r11, r24
     a14:	a9 2e       	mov	r10, r25
	
	/* Überprüfen ob die aktuelle Akkuspannung innerhalb des zulässigen Bereichs ist */
	if (voltage < V_LOW)
     a16:	26 e6       	ldi	r18, 0x66	; 102
     a18:	36 e6       	ldi	r19, 0x66	; 102
     a1a:	46 ee       	ldi	r20, 0xE6	; 230
     a1c:	50 e4       	ldi	r21, 0x40	; 64
     a1e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__cmpsf2>
     a22:	88 23       	and	r24, r24
     a24:	0c f0       	brlt	.+2      	; 0xa28 <akku_check+0x44>
     a26:	41 c0       	rjmp	.+130    	; 0xaaa <akku_check+0xc6>
	{
		sei();	// Sei() einschalten, um eine Meldung per UART versenden zu können
     a28:	78 94       	sei
		
		char send[30] = ""; // Char-Buffer von 30 Zeichen für Meldung
     a2a:	1a 82       	std	Y+2, r1	; 0x02
     a2c:	19 82       	std	Y+1, r1	; 0x01
     a2e:	fe 01       	movw	r30, r28
     a30:	33 96       	adiw	r30, 0x03	; 3
     a32:	8c e1       	ldi	r24, 0x1C	; 28
     a34:	df 01       	movw	r26, r30
     a36:	1d 92       	st	X+, r1
     a38:	8a 95       	dec	r24
     a3a:	e9 f7       	brne	.-6      	; 0xa36 <akku_check+0x52>
		
		/* Endlosschleife mit Warnung --> Akku leer --> gelbe LED Blinkt*/
		while (1)
		{
			/* Warnmeldung verschicken */
			sprintf(send, "Akku leer! U_Akku = %.1fV \n\r", voltage);
     a3c:	0f 2e       	mov	r0, r31
     a3e:	fb eb       	ldi	r31, 0xBB	; 187
     a40:	ef 2e       	mov	r14, r31
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	ff 2e       	mov	r15, r31
     a46:	f0 2d       	mov	r31, r0
     a48:	8e 01       	movw	r16, r28
     a4a:	0f 5f       	subi	r16, 0xFF	; 255
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_puts((uint8_t*)send);
			
			/* gelbe LED an PA1 blinken lassen */
			PORTA ^= (1<<PA1);
     a4e:	68 94       	set
     a50:	99 24       	eor	r9, r9
     a52:	91 f8       	bld	r9, 1
		
		/* Endlosschleife mit Warnung --> Akku leer --> gelbe LED Blinkt*/
		while (1)
		{
			/* Warnmeldung verschicken */
			sprintf(send, "Akku leer! U_Akku = %.1fV \n\r", voltage);
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ff 92       	push	r15
     a5e:	ef 92       	push	r14
     a60:	1f 93       	push	r17
     a62:	0f 93       	push	r16
     a64:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <sprintf>
			uart_puts((uint8_t*)send);
     a68:	c8 01       	movw	r24, r16
     a6a:	0e 94 12 07 	call	0xe24	; 0xe24 <uart_puts>
			
			/* gelbe LED an PA1 blinken lassen */
			PORTA ^= (1<<PA1);
     a6e:	8b b3       	in	r24, 0x1b	; 27
     a70:	89 25       	eor	r24, r9
     a72:	8b bb       	out	0x1b, r24	; 27
     a74:	bf ef       	ldi	r27, 0xFF	; 255
     a76:	29 e6       	ldi	r18, 0x69	; 105
     a78:	88 e1       	ldi	r24, 0x18	; 24
     a7a:	b1 50       	subi	r27, 0x01	; 1
     a7c:	20 40       	sbci	r18, 0x00	; 0
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	e1 f7       	brne	.-8      	; 0xa7a <akku_check+0x96>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <akku_check+0xa0>
     a84:	00 00       	nop
			_delay_ms(1000);
			PORTA ^= (1<<PA1);
     a86:	8b b3       	in	r24, 0x1b	; 27
     a88:	89 25       	eor	r24, r9
     a8a:	8b bb       	out	0x1b, r24	; 27
     a8c:	9f ef       	ldi	r25, 0xFF	; 255
     a8e:	a9 e6       	ldi	r26, 0x69	; 105
     a90:	b8 e1       	ldi	r27, 0x18	; 24
     a92:	91 50       	subi	r25, 0x01	; 1
     a94:	a0 40       	sbci	r26, 0x00	; 0
     a96:	b0 40       	sbci	r27, 0x00	; 0
     a98:	e1 f7       	brne	.-8      	; 0xa92 <akku_check+0xae>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <akku_check+0xb8>
     a9c:	00 00       	nop
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	d5 cf       	rjmp	.-86     	; 0xa54 <akku_check+0x70>
			_delay_ms(1000);
		}
	}
     aaa:	6e 96       	adiw	r28, 0x1e	; 30
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	08 95       	ret

00000ace <gyro_sendStop>:
}

/* Stelle die Stopkondition her */
void gyro_sendStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ace:	84 e9       	ldi	r24, 0x94	; 148
     ad0:	86 bf       	out	0x36, r24	; 54
	/* Warten */
	while(TWCR & (1<<TWSTO));
     ad2:	06 b6       	in	r0, 0x36	; 54
     ad4:	04 fc       	sbrc	r0, 4
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <gyro_sendStop+0x4>
}
     ad8:	08 95       	ret

00000ada <gyro_sendStart>:
{
	/* RW_bit = 0: Write Master -> Slave
	* RW_bit = 1: Read  Master <- Slave
	*/
		/* Sende Start-Kondition */
		TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     ada:	94 ea       	ldi	r25, 0xA4	; 164
     adc:	96 bf       	out	0x36, r25	; 54
		
		/* Warten bis das TWINT Flag gesetzt wurde, dies zeigt, dass der "START" verschickt wurde. */
		while (!(TWCR & (1<<TWINT)));
     ade:	06 b6       	in	r0, 0x36	; 54
     ae0:	07 fe       	sbrs	r0, 7
     ae2:	fd cf       	rjmp	.-6      	; 0xade <gyro_sendStart+0x4>
		
		/* Sende Adresse + WRITE bit = 0 */
		TWDR = ITG_I2C_ADR<<1|RW_bit;
     ae4:	80 6d       	ori	r24, 0xD0	; 208
     ae6:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
     ae8:	84 e8       	ldi	r24, 0x84	; 132
     aea:	86 bf       	out	0x36, r24	; 54
		
		/* Warten auf Acknowledge */
		while (!(TWCR & (1<<TWINT)));
     aec:	06 b6       	in	r0, 0x36	; 54
     aee:	07 fe       	sbrs	r0, 7
     af0:	fd cf       	rjmp	.-6      	; 0xaec <gyro_sendStart+0x12>
}
     af2:	08 95       	ret

00000af4 <gyro_write>:
	gyro_calibrate();
}

/* Routine um ein Datenbyte über I2C in ein Sensorregister zu schreiben */
void gyro_write(uint8_t Register, uint8_t data)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	d8 2f       	mov	r29, r24
     afa:	c6 2f       	mov	r28, r22
	/* Sende Start-Kondition (Datenrichtung Master->Slave) */
	gyro_sendStart(0);
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 6d 05 	call	0xada	; 0xada <gyro_sendStart>
	
	/* Sende Addresse des Registers */
	TWDR = Register;
     b02:	d3 b9       	out	0x03, r29	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	
     b04:	84 e8       	ldi	r24, 0x84	; 132
     b06:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     b08:	06 b6       	in	r0, 0x36	; 54
     b0a:	07 fe       	sbrs	r0, 7
     b0c:	fd cf       	rjmp	.-6      	; 0xb08 <gyro_write+0x14>
		
	/* Sende die Daten */
	TWDR = data;
     b0e:	c3 b9       	out	0x03, r28	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	
     b10:	84 e8       	ldi	r24, 0x84	; 132
     b12:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     b14:	06 b6       	in	r0, 0x36	; 54
     b16:	07 fe       	sbrs	r0, 7
     b18:	fd cf       	rjmp	.-6      	; 0xb14 <gyro_write+0x20>
	
	/* Sende Stop-Kondition */
	gyro_sendStop();
     b1a:	0e 94 67 05 	call	0xace	; 0xace <gyro_sendStop>
	
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <gyro_read>:

/* Routine zum Auslesen von n-Datenbytes aus einem Sensorregister */
void gyro_read(uint8_t Register, uint8_t *data, uint8_t n_bytes)
{	
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	08 2f       	mov	r16, r24
     b2e:	16 2f       	mov	r17, r22
     b30:	d7 2f       	mov	r29, r23
     b32:	c4 2f       	mov	r28, r20
	/* Sende Start-Kondition (Datenrichtung Master->Slave) */
	gyro_sendStart(0);
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 6d 05 	call	0xada	; 0xada <gyro_sendStart>
	
	/* Sende Addresse des Registers */
	TWDR = Register;
     b3a:	03 b9       	out	0x03, r16	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     b3c:	84 e8       	ldi	r24, 0x84	; 132
     b3e:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     b40:	06 b6       	in	r0, 0x36	; 54
     b42:	07 fe       	sbrs	r0, 7
     b44:	fd cf       	rjmp	.-6      	; 0xb40 <gyro_read+0x1c>
	
	/* Sende Start-Kondition (Datenrichtung Slave->Master) */
	gyro_sendStart(1);
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 6d 05 	call	0xada	; 0xada <gyro_sendStart>
	
	/* Lese die Daten */
	for(int16_t i=0;i<n_bytes;i++)
     b4c:	4c 2f       	mov	r20, r28
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	14 16       	cp	r1, r20
     b52:	15 06       	cpc	r1, r21
     b54:	cc f4       	brge	.+50     	; 0xb88 <gyro_read+0x64>
     b56:	e1 2f       	mov	r30, r17
     b58:	fd 2f       	mov	r31, r29
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
	{
		/* Sende Acknowledge an den Gyro */
		TWCR = (1<<TWINT)|(1<<TWEN)|((i==n_bytes-1) ? 0 : (1<<TWEA));
     b5e:	ba 01       	movw	r22, r20
     b60:	61 50       	subi	r22, 0x01	; 1
     b62:	71 09       	sbc	r23, r1
     b64:	a4 e8       	ldi	r26, 0x84	; 132
     b66:	34 ec       	ldi	r19, 0xC4	; 196
     b68:	68 17       	cp	r22, r24
     b6a:	79 07       	cpc	r23, r25
     b6c:	11 f0       	breq	.+4      	; 0xb72 <gyro_read+0x4e>
     b6e:	23 2f       	mov	r18, r19
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <gyro_read+0x50>
     b72:	2a 2f       	mov	r18, r26
     b74:	26 bf       	out	0x36, r18	; 54
		/* Warte bis die Übertragung komplett ist */
		while (!(TWCR & (1<<TWINT)));
     b76:	06 b6       	in	r0, 0x36	; 54
     b78:	07 fe       	sbrs	r0, 7
     b7a:	fd cf       	rjmp	.-6      	; 0xb76 <gyro_read+0x52>
		data[i] = TWDR;
     b7c:	23 b1       	in	r18, 0x03	; 3
     b7e:	21 93       	st	Z+, r18
	
	/* Sende Start-Kondition (Datenrichtung Slave->Master) */
	gyro_sendStart(1);
	
	/* Lese die Daten */
	for(int16_t i=0;i<n_bytes;i++)
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	84 17       	cp	r24, r20
     b84:	95 07       	cpc	r25, r21
     b86:	81 f7       	brne	.-32     	; 0xb68 <gyro_read+0x44>
		while (!(TWCR & (1<<TWINT)));
		data[i] = TWDR;
	}
	
	/* Sende Stop-Kondition */
	gyro_sendStop();
     b88:	0e 94 67 05 	call	0xace	; 0xace <gyro_sendStop>
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	08 95       	ret

00000b96 <gyro_getData>:
		while (!(TWCR & (1<<TWINT)));
}

/* Routine zum Auslesen der Drehratendaten aus dem Gyro */
void gyro_getData(int16_t *pGyroData)
{
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <gyro_getData+0xa>
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <gyro_getData+0xc>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <gyro_getData+0xe>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	8c 01       	movw	r16, r24
	uint8_t Buffer[6];	// Buffer zum Einlesen der Daten
	gyro_read(29, Buffer, 6);	// Daten über I2C einlesen
     baa:	46 e0       	ldi	r20, 0x06	; 6
     bac:	be 01       	movw	r22, r28
     bae:	6f 5f       	subi	r22, 0xFF	; 255
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255
     bb2:	8d e1       	ldi	r24, 0x1D	; 29
     bb4:	0e 94 92 05 	call	0xb24	; 0xb24 <gyro_read>

	pGyroData[0] = ((int)((Buffer[0]<<8) | Buffer[1]) - gyroOffset[0]); // Datensatz für für die x-Achse
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	98 2f       	mov	r25, r24
     bbe:	88 27       	eor	r24, r24
     bc0:	2a 81       	ldd	r18, Y+2	; 0x02
     bc2:	82 2b       	or	r24, r18
     bc4:	ed ee       	ldi	r30, 0xED	; 237
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	20 81       	ld	r18, Z
     bca:	31 81       	ldd	r19, Z+1	; 0x01
     bcc:	82 1b       	sub	r24, r18
     bce:	93 0b       	sbc	r25, r19
     bd0:	d8 01       	movw	r26, r16
     bd2:	11 96       	adiw	r26, 0x01	; 1
     bd4:	9c 93       	st	X, r25
     bd6:	8e 93       	st	-X, r24
	pGyroData[1] = ((int)((Buffer[2]<<8) | Buffer[3]) - gyroOffset[1]); // Datensatz für für die y-Achse
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	98 2f       	mov	r25, r24
     bde:	88 27       	eor	r24, r24
     be0:	2c 81       	ldd	r18, Y+4	; 0x04
     be2:	82 2b       	or	r24, r18
     be4:	22 81       	ldd	r18, Z+2	; 0x02
     be6:	33 81       	ldd	r19, Z+3	; 0x03
     be8:	82 1b       	sub	r24, r18
     bea:	93 0b       	sbc	r25, r19
     bec:	13 96       	adiw	r26, 0x03	; 3
     bee:	9c 93       	st	X, r25
     bf0:	8e 93       	st	-X, r24
     bf2:	12 97       	sbiw	r26, 0x02	; 2
	pGyroData[2] = ((int)((Buffer[4]<<8) | Buffer[5]) - gyroOffset[2]); // Datensatz für für die z-Achse
     bf4:	8d 81       	ldd	r24, Y+5	; 0x05
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	98 2f       	mov	r25, r24
     bfa:	88 27       	eor	r24, r24
     bfc:	2e 81       	ldd	r18, Y+6	; 0x06
     bfe:	82 2b       	or	r24, r18
     c00:	24 81       	ldd	r18, Z+4	; 0x04
     c02:	35 81       	ldd	r19, Z+5	; 0x05
     c04:	82 1b       	sub	r24, r18
     c06:	93 0b       	sbc	r25, r19
     c08:	15 96       	adiw	r26, 0x05	; 5
     c0a:	9c 93       	st	X, r25
     c0c:	8e 93       	st	-X, r24
     c0e:	14 97       	sbiw	r26, 0x04	; 4
}
     c10:	26 96       	adiw	r28, 0x06	; 6
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <gyro_calibrate>:

/* Routine zum Kalibrieren des Gyro (Bestimmung der Drehratenoffsets der Achsen) */
void gyro_calibrate(void)
{	
     c26:	4f 92       	push	r4
     c28:	5f 92       	push	r5
     c2a:	6f 92       	push	r6
     c2c:	7f 92       	push	r7
     c2e:	8f 92       	push	r8
     c30:	9f 92       	push	r9
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	00 d0       	rcall	.+0      	; 0xc48 <gyro_calibrate+0x22>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <gyro_calibrate+0x24>
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <gyro_calibrate+0x26>
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	00 e4       	ldi	r16, 0x40	; 64
     c52:	10 e0       	ldi	r17, 0x00	; 0
	int16_t i = 0;	// Schleifenzähler
	int16_t gyroData[3];	// Buffervariablen für die Drehraten
	int32_t x=0,y=0,z=0;	// Hilfsvariablen zur Offsetberechnung
     c54:	c1 2c       	mov	r12, r1
     c56:	d1 2c       	mov	r13, r1
     c58:	76 01       	movw	r14, r12
     c5a:	81 2c       	mov	r8, r1
     c5c:	91 2c       	mov	r9, r1
     c5e:	54 01       	movw	r10, r8
     c60:	41 2c       	mov	r4, r1
     c62:	51 2c       	mov	r5, r1
     c64:	32 01       	movw	r6, r4

	/* Auslesen von 64 Datensätzen aus dem Gyro */
	for (i = 0; i < 64; i++)
	{
		gyro_getData(gyroData);
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	0e 94 cb 05 	call	0xb96	; 0xb96 <gyro_getData>
		x += gyroData[0];
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	09 2e       	mov	r0, r25
     c74:	00 0c       	add	r0, r0
     c76:	aa 0b       	sbc	r26, r26
     c78:	bb 0b       	sbc	r27, r27
     c7a:	48 0e       	add	r4, r24
     c7c:	59 1e       	adc	r5, r25
     c7e:	6a 1e       	adc	r6, r26
     c80:	7b 1e       	adc	r7, r27
		y += gyroData[1];
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	09 2e       	mov	r0, r25
     c88:	00 0c       	add	r0, r0
     c8a:	aa 0b       	sbc	r26, r26
     c8c:	bb 0b       	sbc	r27, r27
     c8e:	88 0e       	add	r8, r24
     c90:	99 1e       	adc	r9, r25
     c92:	aa 1e       	adc	r10, r26
     c94:	bb 1e       	adc	r11, r27
		z += gyroData[2];
     c96:	8d 81       	ldd	r24, Y+5	; 0x05
     c98:	9e 81       	ldd	r25, Y+6	; 0x06
     c9a:	09 2e       	mov	r0, r25
     c9c:	00 0c       	add	r0, r0
     c9e:	aa 0b       	sbc	r26, r26
     ca0:	bb 0b       	sbc	r27, r27
     ca2:	c8 0e       	add	r12, r24
     ca4:	d9 1e       	adc	r13, r25
     ca6:	ea 1e       	adc	r14, r26
     ca8:	fb 1e       	adc	r15, r27
     caa:	8f e1       	ldi	r24, 0x1F	; 31
     cac:	9e e4       	ldi	r25, 0x4E	; 78
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <gyro_calibrate+0x88>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <gyro_calibrate+0x8e>
     cb4:	00 00       	nop
     cb6:	01 50       	subi	r16, 0x01	; 1
     cb8:	11 09       	sbc	r17, r1
	int16_t i = 0;	// Schleifenzähler
	int16_t gyroData[3];	// Buffervariablen für die Drehraten
	int32_t x=0,y=0,z=0;	// Hilfsvariablen zur Offsetberechnung

	/* Auslesen von 64 Datensätzen aus dem Gyro */
	for (i = 0; i < 64; i++)
     cba:	a9 f6       	brne	.-86     	; 0xc66 <gyro_calibrate+0x40>
		z += gyroData[2];
		_delay_ms(10);
	}
	
	/* Berechnung des Offsets (Summe / 64) */
	gyroOffset[0] = x >> 6;
     cbc:	ed ee       	ldi	r30, 0xED	; 237
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	68 94       	set
     cc2:	15 f8       	bld	r1, 5
     cc4:	75 94       	asr	r7
     cc6:	67 94       	ror	r6
     cc8:	57 94       	ror	r5
     cca:	47 94       	ror	r4
     ccc:	16 94       	lsr	r1
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <gyro_calibrate+0x9e>
     cd0:	51 82       	std	Z+1, r5	; 0x01
     cd2:	40 82       	st	Z, r4
	gyroOffset[1] = y >> 6;
     cd4:	68 94       	set
     cd6:	15 f8       	bld	r1, 5
     cd8:	b5 94       	asr	r11
     cda:	a7 94       	ror	r10
     cdc:	97 94       	ror	r9
     cde:	87 94       	ror	r8
     ce0:	16 94       	lsr	r1
     ce2:	d1 f7       	brne	.-12     	; 0xcd8 <gyro_calibrate+0xb2>
     ce4:	93 82       	std	Z+3, r9	; 0x03
     ce6:	82 82       	std	Z+2, r8	; 0x02
	gyroOffset[2] = z >> 6;
     ce8:	68 94       	set
     cea:	15 f8       	bld	r1, 5
     cec:	f5 94       	asr	r15
     cee:	e7 94       	ror	r14
     cf0:	d7 94       	ror	r13
     cf2:	c7 94       	ror	r12
     cf4:	16 94       	lsr	r1
     cf6:	d1 f7       	brne	.-12     	; 0xcec <gyro_calibrate+0xc6>
     cf8:	d5 82       	std	Z+5, r13	; 0x05
     cfa:	c4 82       	std	Z+4, r12	; 0x04
     cfc:	26 96       	adiw	r28, 0x06	; 6
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	9f 90       	pop	r9
     d1e:	8f 90       	pop	r8
     d20:	7f 90       	pop	r7
     d22:	6f 90       	pop	r6
     d24:	5f 90       	pop	r5
     d26:	4f 90       	pop	r4
     d28:	08 95       	ret

00000d2a <gyro_init>:

/* Routine zum Initialisieren des Gyros */
void gyro_init(void)
{
	/* Konfiguriere den Gyro */
	TWBR = ((F_CPU/I2C_SPEED) - 16)/2;	// I2C-Register konfigureren
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	80 b9       	out	0x00, r24	; 0
	
	gyro_write(21, 0);				// 1kHz interne Abtastung des Analoggyros
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	85 e1       	ldi	r24, 0x15	; 21
     d32:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <gyro_write>
	gyro_write(22, 0b00010011);		// no sync, 1000 deg/s, 42 Hz Lowpass
     d36:	63 e1       	ldi	r22, 0x13	; 19
     d38:	86 e1       	ldi	r24, 0x16	; 22
     d3a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <gyro_write>
	
	/* Kalibriere den Gyro (setzt den Gyro-Offset) */
	gyro_calibrate();
     d3e:	0e 94 13 06 	call	0xc26	; 0xc26 <gyro_calibrate>
     d42:	08 95       	ret

00000d44 <trajektorie_init>:

/* Initialisierungsfunktion für die Solltrajektorienfunktion */
void trajektorie_init()
{
	// Länge der Trajektorie ermitteln
	traj_laenge = sizeof(dy1_dt) / sizeof(dy1_dt[0]);
     d44:	8f e7       	ldi	r24, 0x7F	; 127
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <traj_laenge+0x1>
     d4c:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <traj_laenge>
	
	// Initialisierung d.h. zuerst Beschleunigungsphase starten
	beschleunigungsphase=1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <beschleunigungsphase+0x1>
     d58:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <beschleunigungsphase>
	// Trajektorenzähler = 0
	i_trj=0;
     d5c:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <i_trj+0x1>
     d60:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <i_trj>
     d64:	08 95       	ret

00000d66 <uart_init>:
}

void uart_flush()
{
	uart_inbufpos=0;
	uart_inbufeval=0;
     d66:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <uart_outbufpos>
     d6a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <uart_outbufeval>
     d6e:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_inbufpos>
     d72:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <uart_inbufeval>
     d76:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <reset_pos>
     d7a:	80 b5       	in	r24, 0x20	; 32
     d7c:	8f 77       	andi	r24, 0x7F	; 127
     d7e:	80 bd       	out	0x20, r24	; 32
     d80:	10 bc       	out	0x20, r1	; 32
     d82:	8c e0       	ldi	r24, 0x0C	; 12
     d84:	89 b9       	out	0x09, r24	; 9
     d86:	59 98       	cbi	0x0b, 1	; 11
     d88:	80 b5       	in	r24, 0x20	; 32
     d8a:	80 68       	ori	r24, 0x80	; 128
     d8c:	80 bd       	out	0x20, r24	; 32
     d8e:	86 e8       	ldi	r24, 0x86	; 134
     d90:	80 bd       	out	0x20, r24	; 32
     d92:	88 ed       	ldi	r24, 0xD8	; 216
     d94:	8a b9       	out	0x0a, r24	; 10
     d96:	08 95       	ret

00000d98 <uart_getch>:
     d98:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <uart_inbufpos>
     d9c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <uart_inbufeval>
     da0:	98 17       	cp	r25, r24
     da2:	89 f0       	breq	.+34     	; 0xdc6 <uart_getch+0x2e>
     da4:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <uart_inbufeval>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	8e 0f       	add	r24, r30
     dac:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <uart_inbufeval>
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	eb 5f       	subi	r30, 0xFB	; 251
     db4:	fd 4f       	sbci	r31, 0xFD	; 253
     db6:	80 81       	ld	r24, Z
     db8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <uart_inbufeval>
     dbc:	9f 3f       	cpi	r25, 0xFF	; 255
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <uart_getch+0x30>
     dc0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <uart_inbufeval>
     dc4:	08 95       	ret
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	08 95       	ret

00000dca <uart_send>:
     dca:	5d 9b       	sbis	0x0b, 5	; 11
     dcc:	17 c0       	rjmp	.+46     	; 0xdfc <uart_send+0x32>
     dce:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <uart_outbufpos>
     dd2:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <uart_outbufeval>
     dd6:	98 17       	cp	r25, r24
     dd8:	89 f0       	breq	.+34     	; 0xdfc <uart_send+0x32>
     dda:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <uart_outbufeval>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	8e 0f       	add	r24, r30
     de2:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <uart_outbufeval>
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	ef 5f       	subi	r30, 0xFF	; 255
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	80 81       	ld	r24, Z
     dee:	8c b9       	out	0x0c, r24	; 12
     df0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <uart_outbufeval>
     df4:	8f 3f       	cpi	r24, 0xFF	; 255
     df6:	11 f4       	brne	.+4      	; 0xdfc <uart_send+0x32>
     df8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <uart_outbufeval>
     dfc:	08 95       	ret

00000dfe <uart_putch>:
     dfe:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <uart_outbufpos>
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	9e 0f       	add	r25, r30
     e06:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <uart_outbufpos>
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	ef 5f       	subi	r30, 0xFF	; 255
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	80 83       	st	Z, r24
     e12:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <uart_outbufpos>
     e16:	8f 3f       	cpi	r24, 0xFF	; 255
     e18:	11 f4       	brne	.+4      	; 0xe1e <uart_putch+0x20>
     e1a:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <uart_outbufpos>
     e1e:	0e 94 e5 06 	call	0xdca	; 0xdca <uart_send>
     e22:	08 95       	ret

00000e24 <uart_puts>:
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	ec 01       	movw	r28, r24
     e2a:	88 81       	ld	r24, Y
     e2c:	88 23       	and	r24, r24
     e2e:	31 f0       	breq	.+12     	; 0xe3c <uart_puts+0x18>
     e30:	21 96       	adiw	r28, 0x01	; 1
     e32:	0e 94 ff 06 	call	0xdfe	; 0xdfe <uart_putch>
     e36:	89 91       	ld	r24, Y+
     e38:	81 11       	cpse	r24, r1
     e3a:	fb cf       	rjmp	.-10     	; 0xe32 <uart_puts+0xe>
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <uart_receive>:
     e42:	9c b1       	in	r25, 0x0c	; 12
     e44:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <uart_inbufpos>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	8e 0f       	add	r24, r30
     e4c:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <uart_inbufpos>
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	eb 5f       	subi	r30, 0xFB	; 251
     e54:	fd 4f       	sbci	r31, 0xFD	; 253
     e56:	90 83       	st	Z, r25
     e58:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <uart_inbufpos>
     e5c:	8f 3f       	cpi	r24, 0xFF	; 255
     e5e:	11 f4       	brne	.+4      	; 0xe64 <uart_receive+0x22>
     e60:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <uart_inbufpos>
     e64:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <reset_pos>
     e68:	e8 2f       	mov	r30, r24
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	e8 52       	subi	r30, 0x28	; 40
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	20 81       	ld	r18, Z
     e72:	92 13       	cpse	r25, r18
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <uart_receive+0x56>
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <reset_pos>
     e7c:	8a 30       	cpi	r24, 0x0A	; 10
     e7e:	71 f4       	brne	.+28     	; 0xe9c <uart_receive+0x5a>
     e80:	83 e6       	ldi	r24, 0x63	; 99
     e82:	0e 94 ff 06 	call	0xdfe	; 0xdfe <uart_putch>
     e86:	99 e0       	ldi	r25, 0x09	; 9
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	a8 95       	wdr
     e90:	81 bd       	out	0x21, r24	; 33
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	91 bd       	out	0x21, r25	; 33
     e96:	ff cf       	rjmp	.-2      	; 0xe96 <uart_receive+0x54>
     e98:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <reset_pos>
     e9c:	08 95       	ret

00000e9e <__vector_15>:
}


ISR(USART_TXC_vect)
{
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
	// character has been sent. see if there is more data in buffer
	uart_send();
     ec0:	0e 94 e5 06 	call	0xdca	; 0xdca <uart_send>
}
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <__vector_13>:

ISR(USART_RXC_vect)
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
	// character received by uart. load it to buffer
	uart_receive();
     f08:	0e 94 21 07 	call	0xe42	; 0xe42 <uart_receive>
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <spi_init>:
	// MC als als Master konfigurieren
	// zu beginn nmodus 0 setzen (CPOL = 0, CPHA = 0)
	// aktiv keinen slave auswÃ¤hlen (alles SS leitungen auf 1)

	// Ausgangspins setzen
	DDRB |= (1<<PB7);	// SCK
     f2e:	bf 9a       	sbi	0x17, 7	; 23
	DDRB |= (1<<PB5);	// MOSI
     f30:	bd 9a       	sbi	0x17, 5	; 23
	DDRB |= (1<<PB3);	// SS_accelerator
     f32:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= (1<<PB0);	// SS_Qdec_R
     f34:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1<<PB4);	// SS_Qdec_L
     f36:	bc 9a       	sbi	0x17, 4	; 23

	// als master konfigurieren
	SPCR |= (1<<MSTR);
     f38:	6c 9a       	sbi	0x0d, 4	; 13

	// SPI anschalten
	SPCR |= (1<<SPE);
     f3a:	6e 9a       	sbi	0x0d, 6	; 13

	// nmodus 0 setzen, CPOL = 0, CPHA = 0. Ist initial auch auf null, aber fÃ¼r bessere versÃ¤tndlichkeit noch auf null setzen
	SPCR &= ~(1<<CPOL);
     f3c:	6b 98       	cbi	0x0d, 3	; 13
	SPCR &= ~(1<<CPHA);
     f3e:	6a 98       	cbi	0x0d, 2	; 13

	// SS leitungen auf 1 setzen
	PORTB |= (1<<PB3) | (1<<PB4) | (1<<PB0);
     f40:	88 b3       	in	r24, 0x18	; 24
     f42:	89 61       	ori	r24, 0x19	; 25
     f44:	88 bb       	out	0x18, r24	; 24
     f46:	08 95       	ret

00000f48 <spi_select>:
	// Data order: MSB / LSB first
	// Mode 0: CPOL = 0, CPHA = 0
	// SS leitung des gewÃ¼nschten Decoders deaktivieren
	

	if(spiSensorId == FLAG_SPI_QDEC_L)
     f48:	81 11       	cpse	r24, r1
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <spi_select+0xe>
	{
		// CPOL = 0, CPHA = 0
		SPCR &= ~(1<<CPOL); // idle low for SCK
     f4c:	6b 98       	cbi	0x0d, 3	; 13
		SPCR &= ~(1<<CPHA); // clock edge for MOSI data shift = high to low
     f4e:	6a 98       	cbi	0x0d, 2	; 13
		PORTB &= ~(1<<PB4);
     f50:	c4 98       	cbi	0x18, 4	; 24
		SPCR &= ~(1<<DORD); // MSB first
     f52:	6d 98       	cbi	0x0d, 5	; 13
     f54:	08 95       	ret

	}
	else if(spiSensorId == FLAG_SPI_QDEC_R)
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	29 f4       	brne	.+10     	; 0xf64 <spi_select+0x1c>
	{
		// CPOL = 0, CPHA = 0
		SPCR &= ~(1<<CPOL); // idle low for SCK
     f5a:	6b 98       	cbi	0x0d, 3	; 13
		SPCR &= ~(1<<CPHA); // clock edge for MOSI data shift = high to low
     f5c:	6a 98       	cbi	0x0d, 2	; 13
		PORTB &= ~(1<<PB0);
     f5e:	c0 98       	cbi	0x18, 0	; 24
		SPCR &= ~(1<<DORD); // MSB first
     f60:	6d 98       	cbi	0x0d, 5	; 13
     f62:	08 95       	ret
	}
	else if(spiSensorId == FLAG_SPI_ACC)
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	29 f4       	brne	.+10     	; 0xf72 <spi_select+0x2a>
	{
		// CPOL = 1, CPHA = 1
		SPCR |= (1<<CPOL);
     f68:	6b 9a       	sbi	0x0d, 3	; 13
		SPCR |= (1<<CPHA);
     f6a:	6a 9a       	sbi	0x0d, 2	; 13
		PORTB &= ~(1<<PB3);
     f6c:	c3 98       	cbi	0x18, 3	; 24
		SPCR &= ~(1<<DORD); // MSB first
     f6e:	6d 98       	cbi	0x0d, 5	; 13
     f70:	08 95       	ret

	}
	else if(spiSensorId == FLAG_SPI_NONE)
     f72:	83 36       	cpi	r24, 0x63	; 99
     f74:	19 f4       	brne	.+6      	; 0xf7c <spi_select+0x34>
	{
		PORTB |= (1<<PB3) | (1<<PB4) | (1<<PB0);
     f76:	88 b3       	in	r24, 0x18	; 24
     f78:	89 61       	ori	r24, 0x19	; 25
     f7a:	88 bb       	out	0x18, r24	; 24
     f7c:	08 95       	ret

00000f7e <spi_sendAndRead>:

	// Damit SCL lÃ¤uft, muss etwas in SPDR geschrieben werden
	// Warte bis die Ãbertragung abgeschlossen ist (SPIF Ã¼berprÃ¼fen)
	// SPDR muss gelesen werden, um SPIF zu lÃ¶schen

	SPDR = data;
     f7e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     f80:	77 9b       	sbis	0x0e, 7	; 14
     f82:	fe cf       	rjmp	.-4      	; 0xf80 <spi_sendAndRead+0x2>
	//_delay_ms(1);
	receivedData = SPDR;
     f84:	8f b1       	in	r24, 0x0f	; 15
	return receivedData;

	/* CODE END */
}
     f86:	08 95       	ret

00000f88 <qdec_writeRegister>:
/* Schreiben eines Registers auf den Quadratur-Decodern 
	INPUT:  - spiSensorId:	Auswahl des Decoders welcher angesprochen wird (z.B. FLAG_SPI_QDEC_L)
			- registerByte: Das zeschreibenden Registers (z.B. WRITE_MDR0)
			- data:			Daten die in das Register geschrieben werden sollen */ 
void qdec_writeRegister(uint8_t spiSensorId, uint8_t registerByte, uint8_t data)
{
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	d6 2f       	mov	r29, r22
     f8e:	c4 2f       	mov	r28, r20
	// wird in der init Funktion aufgerufen um die Decoder zu konfigurieren
	// SS leitung des gewÃ¼nschten Decoders aktivieren
	// Daten senden
	// SS leitung des gewÃ¼nschten Decoders deaktivieren

	spi_select(spiSensorId);
     f90:	0e 94 a4 07 	call	0xf48	; 0xf48 <spi_select>
	spi_sendAndRead(registerByte);
     f94:	8d 2f       	mov	r24, r29
     f96:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
	spi_sendAndRead(data);
     f9a:	8c 2f       	mov	r24, r28
     f9c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
	spi_select(FLAG_SPI_NONE);
     fa0:	83 e6       	ldi	r24, 0x63	; 99
     fa2:	0e 94 a4 07 	call	0xf48	; 0xf48 <spi_select>
	
	/* CODE END */
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <qdec_writeCommand>:

/* Senden eines Kommandos an die Quadratur-Decoder 
	INPUT:  - spiSensorId:	Auswahl des Decoders welcher angesprochen wird (z.B. FLAG_SPI_QDEC_L)
			- comand:		Das zu sendende Kommando (z.B. CLR_CNTR) */
void qdec_writeCommand(uint8_t spiSensorId, uint8_t command)
{
     fac:	cf 93       	push	r28
     fae:	c6 2f       	mov	r28, r22
	/* CODE START */
	// wird in der init Funktion aufgerufen um die Decoder zu konfigurieren

	spi_select(spiSensorId);
     fb0:	0e 94 a4 07 	call	0xf48	; 0xf48 <spi_select>
	spi_sendAndRead(command);
     fb4:	8c 2f       	mov	r24, r28
     fb6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
	spi_select(FLAG_SPI_NONE);
     fba:	83 e6       	ldi	r24, 0x63	; 99
     fbc:	0e 94 a4 07 	call	0xf48	; 0xf48 <spi_select>

	/* CODE END */
}
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <qdec_init>:
void qdec_init(void)
{	
	
	/* links */
	
	qdec_writeRegister(FLAG_SPI_QDEC_L, WRITE_MDR1, DIS_CNTR);			// Zï¿½hlen ausschalten
     fc4:	44 e0       	ldi	r20, 0x04	; 4
     fc6:	60 e9       	ldi	r22, 0x90	; 144
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e 94 c4 07 	call	0xf88	; 0xf88 <qdec_writeRegister>
	qdec_writeRegister(FLAG_SPI_QDEC_L, WRITE_MDR0, QUADRX4|FREE_RUN|DISABLE_INDX|FILTER_1); // Konfigurieren
     fce:	43 e0       	ldi	r20, 0x03	; 3
     fd0:	68 e8       	ldi	r22, 0x88	; 136
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 c4 07 	call	0xf88	; 0xf88 <qdec_writeRegister>
	qdec_writeCommand(FLAG_SPI_QDEC_L, CLR_CNTR);							// Zï¿½hler auf null setzen
     fd8:	60 e2       	ldi	r22, 0x20	; 32
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 d6 07 	call	0xfac	; 0xfac <qdec_writeCommand>
	qdec_writeRegister(FLAG_SPI_QDEC_L, WRITE_MDR1, BYTE_4|EN_CNTR);		// 4 Bytemodus einschalten und Zï¿½hler einschalten
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	60 e9       	ldi	r22, 0x90	; 144
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 c4 07 	call	0xf88	; 0xf88 <qdec_writeRegister>
	
	/* rechts */
	
	qdec_writeRegister(FLAG_SPI_QDEC_R, WRITE_MDR1, DIS_CNTR);			// Zï¿½hlen ausschalten
     fea:	44 e0       	ldi	r20, 0x04	; 4
     fec:	60 e9       	ldi	r22, 0x90	; 144
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 c4 07 	call	0xf88	; 0xf88 <qdec_writeRegister>
	qdec_writeRegister(FLAG_SPI_QDEC_R, WRITE_MDR0, QUADRX4|FREE_RUN|DISABLE_INDX|FILTER_1); // Konfigurieren
     ff4:	43 e0       	ldi	r20, 0x03	; 3
     ff6:	68 e8       	ldi	r22, 0x88	; 136
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	0e 94 c4 07 	call	0xf88	; 0xf88 <qdec_writeRegister>
	qdec_writeCommand(FLAG_SPI_QDEC_R, CLR_CNTR);							// Zï¿½hler auf null setzen
     ffe:	60 e2       	ldi	r22, 0x20	; 32
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	0e 94 d6 07 	call	0xfac	; 0xfac <qdec_writeCommand>
	qdec_writeRegister(FLAG_SPI_QDEC_R, WRITE_MDR1, BYTE_4|EN_CNTR);		// 4 Bytemodus einschalten und Zï¿½hler einschalten
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	60 e9       	ldi	r22, 0x90	; 144
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	0e 94 c4 07 	call	0xf88	; 0xf88 <qdec_writeRegister>
    1010:	08 95       	ret

00001012 <qdec_getCounts>:

/* Gebe die gezï¿½hlten Ticks zurï¿½ck
	INPUT:	- spiSensorId:  Auswahl des Decoders welcher angesprochen wird (z.B. FLAG_SPI_QDEC_L) 
	OUTPUT: - counts:		Anzahl der gezï¿½hlten Ticks */
int32_t qdec_getCounts(uint8_t spiSensorId)
{
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	c8 2f       	mov	r28, r24

	// SS leitung des gewÃ¼nschten Decoders aktivieren
	// Daten senden
	// Daten empfangen

	spi_select(spiSensorId);
    1020:	0e 94 a4 07 	call	0xf48	; 0xf48 <spi_select>
	//spi_sendAndRead(LOAD_OTR); // If required, depends on your setup and need
	spi_sendAndRead(READ_CNTR); // Assuming this is the command to start reading, replace with actual command if different
    1024:	80 e6       	ldi	r24, 0x60	; 96
    1026:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>

	// Cast to uint32_t before shifting to avoid warning
	int32_t counts = (uint32_t)spi_sendAndRead(0) << 24; // MSB
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
    1030:	d8 2f       	mov	r29, r24
	counts |= (uint32_t)spi_sendAndRead(0) << 16;
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
    1038:	c8 2e       	mov	r12, r24
    103a:	d1 2c       	mov	r13, r1
    103c:	e1 2c       	mov	r14, r1
    103e:	f1 2c       	mov	r15, r1
    1040:	76 01       	movw	r14, r12
    1042:	dd 24       	eor	r13, r13
    1044:	cc 24       	eor	r12, r12
    1046:	fd 2a       	or	r15, r29
	counts |= (uint32_t)spi_sendAndRead(0) << 8;
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
    104e:	d8 2f       	mov	r29, r24
	counts |= (uint32_t)spi_sendAndRead(0); // LSB
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
    1056:	c8 2a       	or	r12, r24
    1058:	dd 2a       	or	r13, r29
	spi_select(FLAG_SPI_NONE);
    105a:	83 e6       	ldi	r24, 0x63	; 99
    105c:	0e 94 a4 07 	call	0xf48	; 0xf48 <spi_select>

	if (spiSensorId == FLAG_SPI_QDEC_R) {
    1060:	c1 30       	cpi	r28, 0x01	; 1
    1062:	41 f4       	brne	.+16     	; 0x1074 <qdec_getCounts+0x62>
        counts = -counts;
    1064:	f0 94       	com	r15
    1066:	e0 94       	com	r14
    1068:	d0 94       	com	r13
    106a:	c0 94       	com	r12
    106c:	c1 1c       	adc	r12, r1
    106e:	d1 1c       	adc	r13, r1
    1070:	e1 1c       	adc	r14, r1
    1072:	f1 1c       	adc	r15, r1
    }

	return counts;

	/* CODE END */
}
    1074:	c7 01       	movw	r24, r14
    1076:	b6 01       	movw	r22, r12
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	08 95       	ret

00001086 <acc_writeRegister>:

/* Schreiben eines Registers auf den Beschleunigungssensoren
	INPUT:  - registerByte: Das zeschreibenden Registers (z.B. ADXL_BW_RATE)
			- data:			Daten die in das Register geschrieben werden sollen */
void acc_writeRegister(uint8_t registerByte, uint8_t data)
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	d8 2f       	mov	r29, r24
    108c:	c6 2f       	mov	r28, r22
	/* CODE START */

	// SS leitung des Beschleunigungssensors aktivieren
	// Daten senden
	// SS leitung des Beschleunigungssensors deaktivieren
	spi_select(FLAG_SPI_ACC);
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	0e 94 a4 07 	call	0xf48	; 0xf48 <spi_select>
	spi_sendAndRead(registerByte);
    1094:	8d 2f       	mov	r24, r29
    1096:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
	spi_sendAndRead(data);
    109a:	8c 2f       	mov	r24, r28
    109c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <spi_sendAndRead>
	spi_select(FLAG_SPI_NONE);
    10a0:	83 e6       	ldi	r24, 0x63	; 99
    10a2:	0e 94 a4 07 	call	0xf48	; 0xf48 <spi_select>

	/* CODE END */
}
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <acc_init>:
/* Initialisierung des Beschleunigungssensors */
void acc_init(void)
{	
	
	// Konfiguriere den Beschleunigungssensor
	acc_writeRegister(ADXL_BW_RATE,		0b00001010 ); // Output rate 100 Hz, Bandwidth 50 Hz
    10ac:	6a e0       	ldi	r22, 0x0A	; 10
    10ae:	8c e2       	ldi	r24, 0x2C	; 44
    10b0:	0e 94 43 08 	call	0x1086	; 0x1086 <acc_writeRegister>
	acc_writeRegister(ADXL_DATA_FORMAT, 0b00001011 ); // Volle Auflï¿½sung, Range +-16g !!
    10b4:	6b e0       	ldi	r22, 0x0B	; 11
    10b6:	81 e3       	ldi	r24, 0x31	; 49
    10b8:	0e 94 43 08 	call	0x1086	; 0x1086 <acc_writeRegister>
		
	// Beschleunigungssensor aus- und wieder einschalten
	acc_writeRegister(ADXL_POWER_CTL,	0b00000000 ); // Alles aus
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	8d e2       	ldi	r24, 0x2D	; 45
    10c0:	0e 94 43 08 	call	0x1086	; 0x1086 <acc_writeRegister>
	acc_writeRegister(ADXL_POWER_CTL,	0b00010000 ); // AUTO_SLEEP modus aktivieren
    10c4:	60 e1       	ldi	r22, 0x10	; 16
    10c6:	8d e2       	ldi	r24, 0x2D	; 45
    10c8:	0e 94 43 08 	call	0x1086	; 0x1086 <acc_writeRegister>
	acc_writeRegister(ADXL_POWER_CTL,	0b00001000 ); // MEASURE modus aktivieren
    10cc:	68 e0       	ldi	r22, 0x08	; 8
    10ce:	8d e2       	ldi	r24, 0x2D	; 45
    10d0:	0e 94 43 08 	call	0x1086	; 0x1086 <acc_writeRegister>
    10d4:	2f ef       	ldi	r18, 0xFF	; 255
    10d6:	80 e7       	ldi	r24, 0x70	; 112
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	21 50       	subi	r18, 0x01	; 1
    10dc:	80 40       	sbci	r24, 0x00	; 0
    10de:	90 40       	sbci	r25, 0x00	; 0
    10e0:	e1 f7       	brne	.-8      	; 0x10da <acc_init+0x2e>
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <acc_init+0x38>
    10e4:	00 00       	nop
    10e6:	08 95       	ret

000010e8 <__subsf3>:
    10e8:	50 58       	subi	r21, 0x80	; 128

000010ea <__addsf3>:
    10ea:	bb 27       	eor	r27, r27
    10ec:	aa 27       	eor	r26, r26
    10ee:	0e 94 8c 08 	call	0x1118	; 0x1118 <__addsf3x>
    10f2:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    10f6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    10fa:	38 f0       	brcs	.+14     	; 0x110a <__addsf3+0x20>
    10fc:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    1100:	20 f0       	brcs	.+8      	; 0x110a <__addsf3+0x20>
    1102:	39 f4       	brne	.+14     	; 0x1112 <__addsf3+0x28>
    1104:	9f 3f       	cpi	r25, 0xFF	; 255
    1106:	19 f4       	brne	.+6      	; 0x110e <__addsf3+0x24>
    1108:	26 f4       	brtc	.+8      	; 0x1112 <__addsf3+0x28>
    110a:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>
    110e:	0e f4       	brtc	.+2      	; 0x1112 <__addsf3+0x28>
    1110:	e0 95       	com	r30
    1112:	e7 fb       	bst	r30, 7
    1114:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>

00001118 <__addsf3x>:
    1118:	e9 2f       	mov	r30, r25
    111a:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    111e:	58 f3       	brcs	.-42     	; 0x10f6 <__addsf3+0xc>
    1120:	ba 17       	cp	r27, r26
    1122:	62 07       	cpc	r22, r18
    1124:	73 07       	cpc	r23, r19
    1126:	84 07       	cpc	r24, r20
    1128:	95 07       	cpc	r25, r21
    112a:	20 f0       	brcs	.+8      	; 0x1134 <__addsf3x+0x1c>
    112c:	79 f4       	brne	.+30     	; 0x114c <__addsf3x+0x34>
    112e:	a6 f5       	brtc	.+104    	; 0x1198 <__addsf3x+0x80>
    1130:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_zero>
    1134:	0e f4       	brtc	.+2      	; 0x1138 <__addsf3x+0x20>
    1136:	e0 95       	com	r30
    1138:	0b 2e       	mov	r0, r27
    113a:	ba 2f       	mov	r27, r26
    113c:	a0 2d       	mov	r26, r0
    113e:	0b 01       	movw	r0, r22
    1140:	b9 01       	movw	r22, r18
    1142:	90 01       	movw	r18, r0
    1144:	0c 01       	movw	r0, r24
    1146:	ca 01       	movw	r24, r20
    1148:	a0 01       	movw	r20, r0
    114a:	11 24       	eor	r1, r1
    114c:	ff 27       	eor	r31, r31
    114e:	59 1b       	sub	r21, r25
    1150:	99 f0       	breq	.+38     	; 0x1178 <__addsf3x+0x60>
    1152:	59 3f       	cpi	r21, 0xF9	; 249
    1154:	50 f4       	brcc	.+20     	; 0x116a <__addsf3x+0x52>
    1156:	50 3e       	cpi	r21, 0xE0	; 224
    1158:	68 f1       	brcs	.+90     	; 0x11b4 <__addsf3x+0x9c>
    115a:	1a 16       	cp	r1, r26
    115c:	f0 40       	sbci	r31, 0x00	; 0
    115e:	a2 2f       	mov	r26, r18
    1160:	23 2f       	mov	r18, r19
    1162:	34 2f       	mov	r19, r20
    1164:	44 27       	eor	r20, r20
    1166:	58 5f       	subi	r21, 0xF8	; 248
    1168:	f3 cf       	rjmp	.-26     	; 0x1150 <__addsf3x+0x38>
    116a:	46 95       	lsr	r20
    116c:	37 95       	ror	r19
    116e:	27 95       	ror	r18
    1170:	a7 95       	ror	r26
    1172:	f0 40       	sbci	r31, 0x00	; 0
    1174:	53 95       	inc	r21
    1176:	c9 f7       	brne	.-14     	; 0x116a <__addsf3x+0x52>
    1178:	7e f4       	brtc	.+30     	; 0x1198 <__addsf3x+0x80>
    117a:	1f 16       	cp	r1, r31
    117c:	ba 0b       	sbc	r27, r26
    117e:	62 0b       	sbc	r22, r18
    1180:	73 0b       	sbc	r23, r19
    1182:	84 0b       	sbc	r24, r20
    1184:	ba f0       	brmi	.+46     	; 0x11b4 <__addsf3x+0x9c>
    1186:	91 50       	subi	r25, 0x01	; 1
    1188:	a1 f0       	breq	.+40     	; 0x11b2 <__addsf3x+0x9a>
    118a:	ff 0f       	add	r31, r31
    118c:	bb 1f       	adc	r27, r27
    118e:	66 1f       	adc	r22, r22
    1190:	77 1f       	adc	r23, r23
    1192:	88 1f       	adc	r24, r24
    1194:	c2 f7       	brpl	.-16     	; 0x1186 <__addsf3x+0x6e>
    1196:	0e c0       	rjmp	.+28     	; 0x11b4 <__addsf3x+0x9c>
    1198:	ba 0f       	add	r27, r26
    119a:	62 1f       	adc	r22, r18
    119c:	73 1f       	adc	r23, r19
    119e:	84 1f       	adc	r24, r20
    11a0:	48 f4       	brcc	.+18     	; 0x11b4 <__addsf3x+0x9c>
    11a2:	87 95       	ror	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	b7 95       	ror	r27
    11aa:	f7 95       	ror	r31
    11ac:	9e 3f       	cpi	r25, 0xFE	; 254
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <__addsf3x+0x9a>
    11b0:	b0 cf       	rjmp	.-160    	; 0x1112 <__addsf3+0x28>
    11b2:	93 95       	inc	r25
    11b4:	88 0f       	add	r24, r24
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <__addsf3x+0xa2>
    11b8:	99 27       	eor	r25, r25
    11ba:	ee 0f       	add	r30, r30
    11bc:	97 95       	ror	r25
    11be:	87 95       	ror	r24
    11c0:	08 95       	ret

000011c2 <__cmpsf2>:
    11c2:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_cmp>
    11c6:	08 f4       	brcc	.+2      	; 0x11ca <__cmpsf2+0x8>
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	08 95       	ret

000011cc <__divsf3>:
    11cc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__divsf3x>
    11d0:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    11d4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    11d8:	58 f0       	brcs	.+22     	; 0x11f0 <__divsf3+0x24>
    11da:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    11de:	40 f0       	brcs	.+16     	; 0x11f0 <__divsf3+0x24>
    11e0:	29 f4       	brne	.+10     	; 0x11ec <__divsf3+0x20>
    11e2:	5f 3f       	cpi	r21, 0xFF	; 255
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <__divsf3+0x24>
    11e6:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    11ea:	51 11       	cpse	r21, r1
    11ec:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    11f0:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>

000011f4 <__divsf3x>:
    11f4:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    11f8:	68 f3       	brcs	.-38     	; 0x11d4 <__divsf3+0x8>

000011fa <__divsf3_pse>:
    11fa:	99 23       	and	r25, r25
    11fc:	b1 f3       	breq	.-20     	; 0x11ea <__divsf3+0x1e>
    11fe:	55 23       	and	r21, r21
    1200:	91 f3       	breq	.-28     	; 0x11e6 <__divsf3+0x1a>
    1202:	95 1b       	sub	r25, r21
    1204:	55 0b       	sbc	r21, r21
    1206:	bb 27       	eor	r27, r27
    1208:	aa 27       	eor	r26, r26
    120a:	62 17       	cp	r22, r18
    120c:	73 07       	cpc	r23, r19
    120e:	84 07       	cpc	r24, r20
    1210:	38 f0       	brcs	.+14     	; 0x1220 <__divsf3_pse+0x26>
    1212:	9f 5f       	subi	r25, 0xFF	; 255
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	44 1f       	adc	r20, r20
    121c:	aa 1f       	adc	r26, r26
    121e:	a9 f3       	breq	.-22     	; 0x120a <__divsf3_pse+0x10>
    1220:	35 d0       	rcall	.+106    	; 0x128c <__divsf3_pse+0x92>
    1222:	0e 2e       	mov	r0, r30
    1224:	3a f0       	brmi	.+14     	; 0x1234 <__divsf3_pse+0x3a>
    1226:	e0 e8       	ldi	r30, 0x80	; 128
    1228:	32 d0       	rcall	.+100    	; 0x128e <__divsf3_pse+0x94>
    122a:	91 50       	subi	r25, 0x01	; 1
    122c:	50 40       	sbci	r21, 0x00	; 0
    122e:	e6 95       	lsr	r30
    1230:	00 1c       	adc	r0, r0
    1232:	ca f7       	brpl	.-14     	; 0x1226 <__divsf3_pse+0x2c>
    1234:	2b d0       	rcall	.+86     	; 0x128c <__divsf3_pse+0x92>
    1236:	fe 2f       	mov	r31, r30
    1238:	29 d0       	rcall	.+82     	; 0x128c <__divsf3_pse+0x92>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	bb 1f       	adc	r27, r27
    1242:	26 17       	cp	r18, r22
    1244:	37 07       	cpc	r19, r23
    1246:	48 07       	cpc	r20, r24
    1248:	ab 07       	cpc	r26, r27
    124a:	b0 e8       	ldi	r27, 0x80	; 128
    124c:	09 f0       	breq	.+2      	; 0x1250 <__divsf3_pse+0x56>
    124e:	bb 0b       	sbc	r27, r27
    1250:	80 2d       	mov	r24, r0
    1252:	bf 01       	movw	r22, r30
    1254:	ff 27       	eor	r31, r31
    1256:	93 58       	subi	r25, 0x83	; 131
    1258:	5f 4f       	sbci	r21, 0xFF	; 255
    125a:	3a f0       	brmi	.+14     	; 0x126a <__divsf3_pse+0x70>
    125c:	9e 3f       	cpi	r25, 0xFE	; 254
    125e:	51 05       	cpc	r21, r1
    1260:	78 f0       	brcs	.+30     	; 0x1280 <__divsf3_pse+0x86>
    1262:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    1266:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    126a:	5f 3f       	cpi	r21, 0xFF	; 255
    126c:	e4 f3       	brlt	.-8      	; 0x1266 <__divsf3_pse+0x6c>
    126e:	98 3e       	cpi	r25, 0xE8	; 232
    1270:	d4 f3       	brlt	.-12     	; 0x1266 <__divsf3_pse+0x6c>
    1272:	86 95       	lsr	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b7 95       	ror	r27
    127a:	f7 95       	ror	r31
    127c:	9f 5f       	subi	r25, 0xFF	; 255
    127e:	c9 f7       	brne	.-14     	; 0x1272 <__divsf3_pse+0x78>
    1280:	88 0f       	add	r24, r24
    1282:	91 1d       	adc	r25, r1
    1284:	96 95       	lsr	r25
    1286:	87 95       	ror	r24
    1288:	97 f9       	bld	r25, 7
    128a:	08 95       	ret
    128c:	e1 e0       	ldi	r30, 0x01	; 1
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	bb 1f       	adc	r27, r27
    1296:	62 17       	cp	r22, r18
    1298:	73 07       	cpc	r23, r19
    129a:	84 07       	cpc	r24, r20
    129c:	ba 07       	cpc	r27, r26
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__divsf3_pse+0xae>
    12a0:	62 1b       	sub	r22, r18
    12a2:	73 0b       	sbc	r23, r19
    12a4:	84 0b       	sbc	r24, r20
    12a6:	ba 0b       	sbc	r27, r26
    12a8:	ee 1f       	adc	r30, r30
    12aa:	88 f7       	brcc	.-30     	; 0x128e <__divsf3_pse+0x94>
    12ac:	e0 95       	com	r30
    12ae:	08 95       	ret

000012b0 <__fixunssfsi>:
    12b0:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_splitA>
    12b4:	88 f0       	brcs	.+34     	; 0x12d8 <__fixunssfsi+0x28>
    12b6:	9f 57       	subi	r25, 0x7F	; 127
    12b8:	98 f0       	brcs	.+38     	; 0x12e0 <__fixunssfsi+0x30>
    12ba:	b9 2f       	mov	r27, r25
    12bc:	99 27       	eor	r25, r25
    12be:	b7 51       	subi	r27, 0x17	; 23
    12c0:	b0 f0       	brcs	.+44     	; 0x12ee <__fixunssfsi+0x3e>
    12c2:	e1 f0       	breq	.+56     	; 0x12fc <__fixunssfsi+0x4c>
    12c4:	66 0f       	add	r22, r22
    12c6:	77 1f       	adc	r23, r23
    12c8:	88 1f       	adc	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	1a f0       	brmi	.+6      	; 0x12d4 <__fixunssfsi+0x24>
    12ce:	ba 95       	dec	r27
    12d0:	c9 f7       	brne	.-14     	; 0x12c4 <__fixunssfsi+0x14>
    12d2:	14 c0       	rjmp	.+40     	; 0x12fc <__fixunssfsi+0x4c>
    12d4:	b1 30       	cpi	r27, 0x01	; 1
    12d6:	91 f0       	breq	.+36     	; 0x12fc <__fixunssfsi+0x4c>
    12d8:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_zero>
    12dc:	b1 e0       	ldi	r27, 0x01	; 1
    12de:	08 95       	ret
    12e0:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_zero>
    12e4:	67 2f       	mov	r22, r23
    12e6:	78 2f       	mov	r23, r24
    12e8:	88 27       	eor	r24, r24
    12ea:	b8 5f       	subi	r27, 0xF8	; 248
    12ec:	39 f0       	breq	.+14     	; 0x12fc <__fixunssfsi+0x4c>
    12ee:	b9 3f       	cpi	r27, 0xF9	; 249
    12f0:	cc f3       	brlt	.-14     	; 0x12e4 <__fixunssfsi+0x34>
    12f2:	86 95       	lsr	r24
    12f4:	77 95       	ror	r23
    12f6:	67 95       	ror	r22
    12f8:	b3 95       	inc	r27
    12fa:	d9 f7       	brne	.-10     	; 0x12f2 <__fixunssfsi+0x42>
    12fc:	3e f4       	brtc	.+14     	; 0x130c <__fixunssfsi+0x5c>
    12fe:	90 95       	com	r25
    1300:	80 95       	com	r24
    1302:	70 95       	com	r23
    1304:	61 95       	neg	r22
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	8f 4f       	sbci	r24, 0xFF	; 255
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	08 95       	ret

0000130e <__floatunsisf>:
    130e:	e8 94       	clt
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <__floatsisf+0x12>

00001312 <__floatsisf>:
    1312:	97 fb       	bst	r25, 7
    1314:	3e f4       	brtc	.+14     	; 0x1324 <__floatsisf+0x12>
    1316:	90 95       	com	r25
    1318:	80 95       	com	r24
    131a:	70 95       	com	r23
    131c:	61 95       	neg	r22
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	8f 4f       	sbci	r24, 0xFF	; 255
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	99 23       	and	r25, r25
    1326:	a9 f0       	breq	.+42     	; 0x1352 <__floatsisf+0x40>
    1328:	f9 2f       	mov	r31, r25
    132a:	96 e9       	ldi	r25, 0x96	; 150
    132c:	bb 27       	eor	r27, r27
    132e:	93 95       	inc	r25
    1330:	f6 95       	lsr	r31
    1332:	87 95       	ror	r24
    1334:	77 95       	ror	r23
    1336:	67 95       	ror	r22
    1338:	b7 95       	ror	r27
    133a:	f1 11       	cpse	r31, r1
    133c:	f8 cf       	rjmp	.-16     	; 0x132e <__floatsisf+0x1c>
    133e:	fa f4       	brpl	.+62     	; 0x137e <__floatsisf+0x6c>
    1340:	bb 0f       	add	r27, r27
    1342:	11 f4       	brne	.+4      	; 0x1348 <__floatsisf+0x36>
    1344:	60 ff       	sbrs	r22, 0
    1346:	1b c0       	rjmp	.+54     	; 0x137e <__floatsisf+0x6c>
    1348:	6f 5f       	subi	r22, 0xFF	; 255
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	16 c0       	rjmp	.+44     	; 0x137e <__floatsisf+0x6c>
    1352:	88 23       	and	r24, r24
    1354:	11 f0       	breq	.+4      	; 0x135a <__floatsisf+0x48>
    1356:	96 e9       	ldi	r25, 0x96	; 150
    1358:	11 c0       	rjmp	.+34     	; 0x137c <__floatsisf+0x6a>
    135a:	77 23       	and	r23, r23
    135c:	21 f0       	breq	.+8      	; 0x1366 <__floatsisf+0x54>
    135e:	9e e8       	ldi	r25, 0x8E	; 142
    1360:	87 2f       	mov	r24, r23
    1362:	76 2f       	mov	r23, r22
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <__floatsisf+0x5e>
    1366:	66 23       	and	r22, r22
    1368:	71 f0       	breq	.+28     	; 0x1386 <__floatsisf+0x74>
    136a:	96 e8       	ldi	r25, 0x86	; 134
    136c:	86 2f       	mov	r24, r22
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	2a f0       	brmi	.+10     	; 0x137e <__floatsisf+0x6c>
    1374:	9a 95       	dec	r25
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	88 1f       	adc	r24, r24
    137c:	da f7       	brpl	.-10     	; 0x1374 <__floatsisf+0x62>
    137e:	88 0f       	add	r24, r24
    1380:	96 95       	lsr	r25
    1382:	87 95       	ror	r24
    1384:	97 f9       	bld	r25, 7
    1386:	08 95       	ret

00001388 <__fp_cmp>:
    1388:	99 0f       	add	r25, r25
    138a:	00 08       	sbc	r0, r0
    138c:	55 0f       	add	r21, r21
    138e:	aa 0b       	sbc	r26, r26
    1390:	e0 e8       	ldi	r30, 0x80	; 128
    1392:	fe ef       	ldi	r31, 0xFE	; 254
    1394:	16 16       	cp	r1, r22
    1396:	17 06       	cpc	r1, r23
    1398:	e8 07       	cpc	r30, r24
    139a:	f9 07       	cpc	r31, r25
    139c:	c0 f0       	brcs	.+48     	; 0x13ce <__fp_cmp+0x46>
    139e:	12 16       	cp	r1, r18
    13a0:	13 06       	cpc	r1, r19
    13a2:	e4 07       	cpc	r30, r20
    13a4:	f5 07       	cpc	r31, r21
    13a6:	98 f0       	brcs	.+38     	; 0x13ce <__fp_cmp+0x46>
    13a8:	62 1b       	sub	r22, r18
    13aa:	73 0b       	sbc	r23, r19
    13ac:	84 0b       	sbc	r24, r20
    13ae:	95 0b       	sbc	r25, r21
    13b0:	39 f4       	brne	.+14     	; 0x13c0 <__fp_cmp+0x38>
    13b2:	0a 26       	eor	r0, r26
    13b4:	61 f0       	breq	.+24     	; 0x13ce <__fp_cmp+0x46>
    13b6:	23 2b       	or	r18, r19
    13b8:	24 2b       	or	r18, r20
    13ba:	25 2b       	or	r18, r21
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <__fp_cmp+0x3e>
    13be:	08 95       	ret
    13c0:	0a 26       	eor	r0, r26
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <__fp_cmp+0x3e>
    13c4:	a1 40       	sbci	r26, 0x01	; 1
    13c6:	a6 95       	lsr	r26
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	81 1d       	adc	r24, r1
    13cc:	81 1d       	adc	r24, r1
    13ce:	08 95       	ret

000013d0 <__fp_inf>:
    13d0:	97 f9       	bld	r25, 7
    13d2:	9f 67       	ori	r25, 0x7F	; 127
    13d4:	80 e8       	ldi	r24, 0x80	; 128
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	08 95       	ret

000013dc <__fp_nan>:
    13dc:	9f ef       	ldi	r25, 0xFF	; 255
    13de:	80 ec       	ldi	r24, 0xC0	; 192
    13e0:	08 95       	ret

000013e2 <__fp_pscA>:
    13e2:	00 24       	eor	r0, r0
    13e4:	0a 94       	dec	r0
    13e6:	16 16       	cp	r1, r22
    13e8:	17 06       	cpc	r1, r23
    13ea:	18 06       	cpc	r1, r24
    13ec:	09 06       	cpc	r0, r25
    13ee:	08 95       	ret

000013f0 <__fp_pscB>:
    13f0:	00 24       	eor	r0, r0
    13f2:	0a 94       	dec	r0
    13f4:	12 16       	cp	r1, r18
    13f6:	13 06       	cpc	r1, r19
    13f8:	14 06       	cpc	r1, r20
    13fa:	05 06       	cpc	r0, r21
    13fc:	08 95       	ret

000013fe <__fp_round>:
    13fe:	09 2e       	mov	r0, r25
    1400:	03 94       	inc	r0
    1402:	00 0c       	add	r0, r0
    1404:	11 f4       	brne	.+4      	; 0x140a <__fp_round+0xc>
    1406:	88 23       	and	r24, r24
    1408:	52 f0       	brmi	.+20     	; 0x141e <__fp_round+0x20>
    140a:	bb 0f       	add	r27, r27
    140c:	40 f4       	brcc	.+16     	; 0x141e <__fp_round+0x20>
    140e:	bf 2b       	or	r27, r31
    1410:	11 f4       	brne	.+4      	; 0x1416 <__fp_round+0x18>
    1412:	60 ff       	sbrs	r22, 0
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__fp_round+0x20>
    1416:	6f 5f       	subi	r22, 0xFF	; 255
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	08 95       	ret

00001420 <__fp_split3>:
    1420:	57 fd       	sbrc	r21, 7
    1422:	90 58       	subi	r25, 0x80	; 128
    1424:	44 0f       	add	r20, r20
    1426:	55 1f       	adc	r21, r21
    1428:	59 f0       	breq	.+22     	; 0x1440 <__fp_splitA+0x10>
    142a:	5f 3f       	cpi	r21, 0xFF	; 255
    142c:	71 f0       	breq	.+28     	; 0x144a <__fp_splitA+0x1a>
    142e:	47 95       	ror	r20

00001430 <__fp_splitA>:
    1430:	88 0f       	add	r24, r24
    1432:	97 fb       	bst	r25, 7
    1434:	99 1f       	adc	r25, r25
    1436:	61 f0       	breq	.+24     	; 0x1450 <__fp_splitA+0x20>
    1438:	9f 3f       	cpi	r25, 0xFF	; 255
    143a:	79 f0       	breq	.+30     	; 0x145a <__fp_splitA+0x2a>
    143c:	87 95       	ror	r24
    143e:	08 95       	ret
    1440:	12 16       	cp	r1, r18
    1442:	13 06       	cpc	r1, r19
    1444:	14 06       	cpc	r1, r20
    1446:	55 1f       	adc	r21, r21
    1448:	f2 cf       	rjmp	.-28     	; 0x142e <__fp_split3+0xe>
    144a:	46 95       	lsr	r20
    144c:	f1 df       	rcall	.-30     	; 0x1430 <__fp_splitA>
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <__fp_splitA+0x30>
    1450:	16 16       	cp	r1, r22
    1452:	17 06       	cpc	r1, r23
    1454:	18 06       	cpc	r1, r24
    1456:	99 1f       	adc	r25, r25
    1458:	f1 cf       	rjmp	.-30     	; 0x143c <__fp_splitA+0xc>
    145a:	86 95       	lsr	r24
    145c:	71 05       	cpc	r23, r1
    145e:	61 05       	cpc	r22, r1
    1460:	08 94       	sec
    1462:	08 95       	ret

00001464 <__fp_zero>:
    1464:	e8 94       	clt

00001466 <__fp_szero>:
    1466:	bb 27       	eor	r27, r27
    1468:	66 27       	eor	r22, r22
    146a:	77 27       	eor	r23, r23
    146c:	cb 01       	movw	r24, r22
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__gesf2>:
    1472:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_cmp>
    1476:	08 f4       	brcc	.+2      	; 0x147a <__gesf2+0x8>
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	08 95       	ret

0000147c <__mulsf3>:
    147c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3x>
    1480:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    1484:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    1488:	38 f0       	brcs	.+14     	; 0x1498 <__mulsf3+0x1c>
    148a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    148e:	20 f0       	brcs	.+8      	; 0x1498 <__mulsf3+0x1c>
    1490:	95 23       	and	r25, r21
    1492:	11 f0       	breq	.+4      	; 0x1498 <__mulsf3+0x1c>
    1494:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    1498:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>
    149c:	11 24       	eor	r1, r1
    149e:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>

000014a2 <__mulsf3x>:
    14a2:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    14a6:	70 f3       	brcs	.-36     	; 0x1484 <__mulsf3+0x8>

000014a8 <__mulsf3_pse>:
    14a8:	95 9f       	mul	r25, r21
    14aa:	c1 f3       	breq	.-16     	; 0x149c <__mulsf3+0x20>
    14ac:	95 0f       	add	r25, r21
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	55 1f       	adc	r21, r21
    14b2:	62 9f       	mul	r22, r18
    14b4:	f0 01       	movw	r30, r0
    14b6:	72 9f       	mul	r23, r18
    14b8:	bb 27       	eor	r27, r27
    14ba:	f0 0d       	add	r31, r0
    14bc:	b1 1d       	adc	r27, r1
    14be:	63 9f       	mul	r22, r19
    14c0:	aa 27       	eor	r26, r26
    14c2:	f0 0d       	add	r31, r0
    14c4:	b1 1d       	adc	r27, r1
    14c6:	aa 1f       	adc	r26, r26
    14c8:	64 9f       	mul	r22, r20
    14ca:	66 27       	eor	r22, r22
    14cc:	b0 0d       	add	r27, r0
    14ce:	a1 1d       	adc	r26, r1
    14d0:	66 1f       	adc	r22, r22
    14d2:	82 9f       	mul	r24, r18
    14d4:	22 27       	eor	r18, r18
    14d6:	b0 0d       	add	r27, r0
    14d8:	a1 1d       	adc	r26, r1
    14da:	62 1f       	adc	r22, r18
    14dc:	73 9f       	mul	r23, r19
    14de:	b0 0d       	add	r27, r0
    14e0:	a1 1d       	adc	r26, r1
    14e2:	62 1f       	adc	r22, r18
    14e4:	83 9f       	mul	r24, r19
    14e6:	a0 0d       	add	r26, r0
    14e8:	61 1d       	adc	r22, r1
    14ea:	22 1f       	adc	r18, r18
    14ec:	74 9f       	mul	r23, r20
    14ee:	33 27       	eor	r19, r19
    14f0:	a0 0d       	add	r26, r0
    14f2:	61 1d       	adc	r22, r1
    14f4:	23 1f       	adc	r18, r19
    14f6:	84 9f       	mul	r24, r20
    14f8:	60 0d       	add	r22, r0
    14fa:	21 1d       	adc	r18, r1
    14fc:	82 2f       	mov	r24, r18
    14fe:	76 2f       	mov	r23, r22
    1500:	6a 2f       	mov	r22, r26
    1502:	11 24       	eor	r1, r1
    1504:	9f 57       	subi	r25, 0x7F	; 127
    1506:	50 40       	sbci	r21, 0x00	; 0
    1508:	9a f0       	brmi	.+38     	; 0x1530 <__mulsf3_pse+0x88>
    150a:	f1 f0       	breq	.+60     	; 0x1548 <__mulsf3_pse+0xa0>
    150c:	88 23       	and	r24, r24
    150e:	4a f0       	brmi	.+18     	; 0x1522 <__mulsf3_pse+0x7a>
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	bb 1f       	adc	r27, r27
    1516:	66 1f       	adc	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	91 50       	subi	r25, 0x01	; 1
    151e:	50 40       	sbci	r21, 0x00	; 0
    1520:	a9 f7       	brne	.-22     	; 0x150c <__mulsf3_pse+0x64>
    1522:	9e 3f       	cpi	r25, 0xFE	; 254
    1524:	51 05       	cpc	r21, r1
    1526:	80 f0       	brcs	.+32     	; 0x1548 <__mulsf3_pse+0xa0>
    1528:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    152c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    1530:	5f 3f       	cpi	r21, 0xFF	; 255
    1532:	e4 f3       	brlt	.-8      	; 0x152c <__mulsf3_pse+0x84>
    1534:	98 3e       	cpi	r25, 0xE8	; 232
    1536:	d4 f3       	brlt	.-12     	; 0x152c <__mulsf3_pse+0x84>
    1538:	86 95       	lsr	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b7 95       	ror	r27
    1540:	f7 95       	ror	r31
    1542:	e7 95       	ror	r30
    1544:	9f 5f       	subi	r25, 0xFF	; 255
    1546:	c1 f7       	brne	.-16     	; 0x1538 <__mulsf3_pse+0x90>
    1548:	fe 2b       	or	r31, r30
    154a:	88 0f       	add	r24, r24
    154c:	91 1d       	adc	r25, r1
    154e:	96 95       	lsr	r25
    1550:	87 95       	ror	r24
    1552:	97 f9       	bld	r25, 7
    1554:	08 95       	ret

00001556 <vfprintf>:
    1556:	a0 e1       	ldi	r26, 0x10	; 16
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e1 eb       	ldi	r30, 0xB1	; 177
    155c:	fa e0       	ldi	r31, 0x0A	; 10
    155e:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__prologue_saves__>
    1562:	7c 01       	movw	r14, r24
    1564:	1b 01       	movw	r2, r22
    1566:	6a 01       	movw	r12, r20
    1568:	fc 01       	movw	r30, r24
    156a:	17 82       	std	Z+7, r1	; 0x07
    156c:	16 82       	std	Z+6, r1	; 0x06
    156e:	83 81       	ldd	r24, Z+3	; 0x03
    1570:	81 ff       	sbrs	r24, 1
    1572:	44 c3       	rjmp	.+1672   	; 0x1bfc <vfprintf+0x6a6>
    1574:	9e 01       	movw	r18, r28
    1576:	2f 5f       	subi	r18, 0xFF	; 255
    1578:	3f 4f       	sbci	r19, 0xFF	; 255
    157a:	39 01       	movw	r6, r18
    157c:	f7 01       	movw	r30, r14
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	f1 01       	movw	r30, r2
    1582:	93 fd       	sbrc	r25, 3
    1584:	85 91       	lpm	r24, Z+
    1586:	93 ff       	sbrs	r25, 3
    1588:	81 91       	ld	r24, Z+
    158a:	1f 01       	movw	r2, r30
    158c:	88 23       	and	r24, r24
    158e:	09 f4       	brne	.+2      	; 0x1592 <vfprintf+0x3c>
    1590:	31 c3       	rjmp	.+1634   	; 0x1bf4 <vfprintf+0x69e>
    1592:	85 32       	cpi	r24, 0x25	; 37
    1594:	39 f4       	brne	.+14     	; 0x15a4 <vfprintf+0x4e>
    1596:	93 fd       	sbrc	r25, 3
    1598:	85 91       	lpm	r24, Z+
    159a:	93 ff       	sbrs	r25, 3
    159c:	81 91       	ld	r24, Z+
    159e:	1f 01       	movw	r2, r30
    15a0:	85 32       	cpi	r24, 0x25	; 37
    15a2:	39 f4       	brne	.+14     	; 0x15b2 <vfprintf+0x5c>
    15a4:	b7 01       	movw	r22, r14
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    15ac:	56 01       	movw	r10, r12
    15ae:	65 01       	movw	r12, r10
    15b0:	e5 cf       	rjmp	.-54     	; 0x157c <vfprintf+0x26>
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	51 2c       	mov	r5, r1
    15b6:	91 2c       	mov	r9, r1
    15b8:	ff e1       	ldi	r31, 0x1F	; 31
    15ba:	f9 15       	cp	r31, r9
    15bc:	d8 f0       	brcs	.+54     	; 0x15f4 <vfprintf+0x9e>
    15be:	8b 32       	cpi	r24, 0x2B	; 43
    15c0:	79 f0       	breq	.+30     	; 0x15e0 <vfprintf+0x8a>
    15c2:	38 f4       	brcc	.+14     	; 0x15d2 <vfprintf+0x7c>
    15c4:	80 32       	cpi	r24, 0x20	; 32
    15c6:	79 f0       	breq	.+30     	; 0x15e6 <vfprintf+0x90>
    15c8:	83 32       	cpi	r24, 0x23	; 35
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <vfprintf+0x9e>
    15cc:	f9 2d       	mov	r31, r9
    15ce:	f0 61       	ori	r31, 0x10	; 16
    15d0:	2e c0       	rjmp	.+92     	; 0x162e <vfprintf+0xd8>
    15d2:	8d 32       	cpi	r24, 0x2D	; 45
    15d4:	61 f0       	breq	.+24     	; 0x15ee <vfprintf+0x98>
    15d6:	80 33       	cpi	r24, 0x30	; 48
    15d8:	69 f4       	brne	.+26     	; 0x15f4 <vfprintf+0x9e>
    15da:	29 2d       	mov	r18, r9
    15dc:	21 60       	ori	r18, 0x01	; 1
    15de:	2d c0       	rjmp	.+90     	; 0x163a <vfprintf+0xe4>
    15e0:	39 2d       	mov	r19, r9
    15e2:	32 60       	ori	r19, 0x02	; 2
    15e4:	93 2e       	mov	r9, r19
    15e6:	89 2d       	mov	r24, r9
    15e8:	84 60       	ori	r24, 0x04	; 4
    15ea:	98 2e       	mov	r9, r24
    15ec:	2a c0       	rjmp	.+84     	; 0x1642 <vfprintf+0xec>
    15ee:	e9 2d       	mov	r30, r9
    15f0:	e8 60       	ori	r30, 0x08	; 8
    15f2:	15 c0       	rjmp	.+42     	; 0x161e <vfprintf+0xc8>
    15f4:	97 fc       	sbrc	r9, 7
    15f6:	2d c0       	rjmp	.+90     	; 0x1652 <vfprintf+0xfc>
    15f8:	20 ed       	ldi	r18, 0xD0	; 208
    15fa:	28 0f       	add	r18, r24
    15fc:	2a 30       	cpi	r18, 0x0A	; 10
    15fe:	88 f4       	brcc	.+34     	; 0x1622 <vfprintf+0xcc>
    1600:	96 fe       	sbrs	r9, 6
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <vfprintf+0xba>
    1604:	3a e0       	ldi	r19, 0x0A	; 10
    1606:	13 9f       	mul	r17, r19
    1608:	20 0d       	add	r18, r0
    160a:	11 24       	eor	r1, r1
    160c:	12 2f       	mov	r17, r18
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <vfprintf+0xec>
    1610:	8a e0       	ldi	r24, 0x0A	; 10
    1612:	58 9e       	mul	r5, r24
    1614:	20 0d       	add	r18, r0
    1616:	11 24       	eor	r1, r1
    1618:	52 2e       	mov	r5, r18
    161a:	e9 2d       	mov	r30, r9
    161c:	e0 62       	ori	r30, 0x20	; 32
    161e:	9e 2e       	mov	r9, r30
    1620:	10 c0       	rjmp	.+32     	; 0x1642 <vfprintf+0xec>
    1622:	8e 32       	cpi	r24, 0x2E	; 46
    1624:	31 f4       	brne	.+12     	; 0x1632 <vfprintf+0xdc>
    1626:	96 fc       	sbrc	r9, 6
    1628:	e5 c2       	rjmp	.+1482   	; 0x1bf4 <vfprintf+0x69e>
    162a:	f9 2d       	mov	r31, r9
    162c:	f0 64       	ori	r31, 0x40	; 64
    162e:	9f 2e       	mov	r9, r31
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <vfprintf+0xec>
    1632:	8c 36       	cpi	r24, 0x6C	; 108
    1634:	21 f4       	brne	.+8      	; 0x163e <vfprintf+0xe8>
    1636:	29 2d       	mov	r18, r9
    1638:	20 68       	ori	r18, 0x80	; 128
    163a:	92 2e       	mov	r9, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vfprintf+0xec>
    163e:	88 36       	cpi	r24, 0x68	; 104
    1640:	41 f4       	brne	.+16     	; 0x1652 <vfprintf+0xfc>
    1642:	f1 01       	movw	r30, r2
    1644:	93 fd       	sbrc	r25, 3
    1646:	85 91       	lpm	r24, Z+
    1648:	93 ff       	sbrs	r25, 3
    164a:	81 91       	ld	r24, Z+
    164c:	1f 01       	movw	r2, r30
    164e:	81 11       	cpse	r24, r1
    1650:	b3 cf       	rjmp	.-154    	; 0x15b8 <vfprintf+0x62>
    1652:	9b eb       	ldi	r25, 0xBB	; 187
    1654:	98 0f       	add	r25, r24
    1656:	93 30       	cpi	r25, 0x03	; 3
    1658:	20 f4       	brcc	.+8      	; 0x1662 <vfprintf+0x10c>
    165a:	99 2d       	mov	r25, r9
    165c:	90 61       	ori	r25, 0x10	; 16
    165e:	80 5e       	subi	r24, 0xE0	; 224
    1660:	07 c0       	rjmp	.+14     	; 0x1670 <vfprintf+0x11a>
    1662:	9b e9       	ldi	r25, 0x9B	; 155
    1664:	98 0f       	add	r25, r24
    1666:	93 30       	cpi	r25, 0x03	; 3
    1668:	08 f0       	brcs	.+2      	; 0x166c <vfprintf+0x116>
    166a:	66 c1       	rjmp	.+716    	; 0x1938 <vfprintf+0x3e2>
    166c:	99 2d       	mov	r25, r9
    166e:	9f 7e       	andi	r25, 0xEF	; 239
    1670:	96 ff       	sbrs	r25, 6
    1672:	16 e0       	ldi	r17, 0x06	; 6
    1674:	9f 73       	andi	r25, 0x3F	; 63
    1676:	99 2e       	mov	r9, r25
    1678:	85 36       	cpi	r24, 0x65	; 101
    167a:	19 f4       	brne	.+6      	; 0x1682 <vfprintf+0x12c>
    167c:	90 64       	ori	r25, 0x40	; 64
    167e:	99 2e       	mov	r9, r25
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <vfprintf+0x13c>
    1682:	86 36       	cpi	r24, 0x66	; 102
    1684:	21 f4       	brne	.+8      	; 0x168e <vfprintf+0x138>
    1686:	39 2f       	mov	r19, r25
    1688:	30 68       	ori	r19, 0x80	; 128
    168a:	93 2e       	mov	r9, r19
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <vfprintf+0x13c>
    168e:	11 11       	cpse	r17, r1
    1690:	11 50       	subi	r17, 0x01	; 1
    1692:	97 fe       	sbrs	r9, 7
    1694:	07 c0       	rjmp	.+14     	; 0x16a4 <vfprintf+0x14e>
    1696:	1c 33       	cpi	r17, 0x3C	; 60
    1698:	50 f4       	brcc	.+20     	; 0x16ae <vfprintf+0x158>
    169a:	44 24       	eor	r4, r4
    169c:	43 94       	inc	r4
    169e:	41 0e       	add	r4, r17
    16a0:	27 e0       	ldi	r18, 0x07	; 7
    16a2:	0b c0       	rjmp	.+22     	; 0x16ba <vfprintf+0x164>
    16a4:	18 30       	cpi	r17, 0x08	; 8
    16a6:	38 f0       	brcs	.+14     	; 0x16b6 <vfprintf+0x160>
    16a8:	27 e0       	ldi	r18, 0x07	; 7
    16aa:	17 e0       	ldi	r17, 0x07	; 7
    16ac:	05 c0       	rjmp	.+10     	; 0x16b8 <vfprintf+0x162>
    16ae:	27 e0       	ldi	r18, 0x07	; 7
    16b0:	9c e3       	ldi	r25, 0x3C	; 60
    16b2:	49 2e       	mov	r4, r25
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x164>
    16b6:	21 2f       	mov	r18, r17
    16b8:	41 2c       	mov	r4, r1
    16ba:	56 01       	movw	r10, r12
    16bc:	84 e0       	ldi	r24, 0x04	; 4
    16be:	a8 0e       	add	r10, r24
    16c0:	b1 1c       	adc	r11, r1
    16c2:	f6 01       	movw	r30, r12
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	04 2d       	mov	r16, r4
    16ce:	a3 01       	movw	r20, r6
    16d0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__ftoa_engine>
    16d4:	6c 01       	movw	r12, r24
    16d6:	f9 81       	ldd	r31, Y+1	; 0x01
    16d8:	fc 87       	std	Y+12, r31	; 0x0c
    16da:	f0 ff       	sbrs	r31, 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x18c>
    16de:	f3 ff       	sbrs	r31, 3
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <vfprintf+0x198>
    16e2:	91 fc       	sbrc	r9, 1
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <vfprintf+0x19c>
    16e6:	92 fe       	sbrs	r9, 2
    16e8:	06 c0       	rjmp	.+12     	; 0x16f6 <vfprintf+0x1a0>
    16ea:	00 e2       	ldi	r16, 0x20	; 32
    16ec:	05 c0       	rjmp	.+10     	; 0x16f8 <vfprintf+0x1a2>
    16ee:	0d e2       	ldi	r16, 0x2D	; 45
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <vfprintf+0x1a2>
    16f2:	0b e2       	ldi	r16, 0x2B	; 43
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <vfprintf+0x1a2>
    16f6:	00 e0       	ldi	r16, 0x00	; 0
    16f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    16fa:	8c 70       	andi	r24, 0x0C	; 12
    16fc:	19 f0       	breq	.+6      	; 0x1704 <vfprintf+0x1ae>
    16fe:	01 11       	cpse	r16, r1
    1700:	5a c2       	rjmp	.+1204   	; 0x1bb6 <vfprintf+0x660>
    1702:	9b c2       	rjmp	.+1334   	; 0x1c3a <vfprintf+0x6e4>
    1704:	97 fe       	sbrs	r9, 7
    1706:	10 c0       	rjmp	.+32     	; 0x1728 <vfprintf+0x1d2>
    1708:	4c 0c       	add	r4, r12
    170a:	fc 85       	ldd	r31, Y+12	; 0x0c
    170c:	f4 ff       	sbrs	r31, 4
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <vfprintf+0x1c2>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	81 33       	cpi	r24, 0x31	; 49
    1714:	09 f4       	brne	.+2      	; 0x1718 <vfprintf+0x1c2>
    1716:	4a 94       	dec	r4
    1718:	14 14       	cp	r1, r4
    171a:	74 f5       	brge	.+92     	; 0x1778 <vfprintf+0x222>
    171c:	28 e0       	ldi	r18, 0x08	; 8
    171e:	24 15       	cp	r18, r4
    1720:	78 f5       	brcc	.+94     	; 0x1780 <vfprintf+0x22a>
    1722:	88 e0       	ldi	r24, 0x08	; 8
    1724:	48 2e       	mov	r4, r24
    1726:	2c c0       	rjmp	.+88     	; 0x1780 <vfprintf+0x22a>
    1728:	96 fc       	sbrc	r9, 6
    172a:	2a c0       	rjmp	.+84     	; 0x1780 <vfprintf+0x22a>
    172c:	81 2f       	mov	r24, r17
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	8c 15       	cp	r24, r12
    1732:	9d 05       	cpc	r25, r13
    1734:	9c f0       	brlt	.+38     	; 0x175c <vfprintf+0x206>
    1736:	3c ef       	ldi	r19, 0xFC	; 252
    1738:	c3 16       	cp	r12, r19
    173a:	3f ef       	ldi	r19, 0xFF	; 255
    173c:	d3 06       	cpc	r13, r19
    173e:	74 f0       	brlt	.+28     	; 0x175c <vfprintf+0x206>
    1740:	89 2d       	mov	r24, r9
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	98 2e       	mov	r9, r24
    1746:	0a c0       	rjmp	.+20     	; 0x175c <vfprintf+0x206>
    1748:	e2 e0       	ldi	r30, 0x02	; 2
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	ec 0f       	add	r30, r28
    174e:	fd 1f       	adc	r31, r29
    1750:	e1 0f       	add	r30, r17
    1752:	f1 1d       	adc	r31, r1
    1754:	80 81       	ld	r24, Z
    1756:	80 33       	cpi	r24, 0x30	; 48
    1758:	19 f4       	brne	.+6      	; 0x1760 <vfprintf+0x20a>
    175a:	11 50       	subi	r17, 0x01	; 1
    175c:	11 11       	cpse	r17, r1
    175e:	f4 cf       	rjmp	.-24     	; 0x1748 <vfprintf+0x1f2>
    1760:	97 fe       	sbrs	r9, 7
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <vfprintf+0x22a>
    1764:	44 24       	eor	r4, r4
    1766:	43 94       	inc	r4
    1768:	41 0e       	add	r4, r17
    176a:	81 2f       	mov	r24, r17
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	c8 16       	cp	r12, r24
    1770:	d9 06       	cpc	r13, r25
    1772:	2c f4       	brge	.+10     	; 0x177e <vfprintf+0x228>
    1774:	1c 19       	sub	r17, r12
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <vfprintf+0x22a>
    1778:	44 24       	eor	r4, r4
    177a:	43 94       	inc	r4
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <vfprintf+0x22a>
    177e:	10 e0       	ldi	r17, 0x00	; 0
    1780:	97 fe       	sbrs	r9, 7
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <vfprintf+0x23a>
    1784:	1c 14       	cp	r1, r12
    1786:	1d 04       	cpc	r1, r13
    1788:	34 f4       	brge	.+12     	; 0x1796 <vfprintf+0x240>
    178a:	c6 01       	movw	r24, r12
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	05 c0       	rjmp	.+10     	; 0x179a <vfprintf+0x244>
    1790:	85 e0       	ldi	r24, 0x05	; 5
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x244>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	01 11       	cpse	r16, r1
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	11 23       	and	r17, r17
    17a0:	31 f0       	breq	.+12     	; 0x17ae <vfprintf+0x258>
    17a2:	21 2f       	mov	r18, r17
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	2f 5f       	subi	r18, 0xFF	; 255
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	82 0f       	add	r24, r18
    17ac:	93 1f       	adc	r25, r19
    17ae:	25 2d       	mov	r18, r5
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	82 17       	cp	r24, r18
    17b4:	93 07       	cpc	r25, r19
    17b6:	14 f4       	brge	.+4      	; 0x17bc <vfprintf+0x266>
    17b8:	58 1a       	sub	r5, r24
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <vfprintf+0x268>
    17bc:	51 2c       	mov	r5, r1
    17be:	89 2d       	mov	r24, r9
    17c0:	89 70       	andi	r24, 0x09	; 9
    17c2:	49 f4       	brne	.+18     	; 0x17d6 <vfprintf+0x280>
    17c4:	55 20       	and	r5, r5
    17c6:	39 f0       	breq	.+14     	; 0x17d6 <vfprintf+0x280>
    17c8:	b7 01       	movw	r22, r14
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    17d2:	5a 94       	dec	r5
    17d4:	f7 cf       	rjmp	.-18     	; 0x17c4 <vfprintf+0x26e>
    17d6:	00 23       	and	r16, r16
    17d8:	29 f0       	breq	.+10     	; 0x17e4 <vfprintf+0x28e>
    17da:	b7 01       	movw	r22, r14
    17dc:	80 2f       	mov	r24, r16
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    17e4:	93 fc       	sbrc	r9, 3
    17e6:	09 c0       	rjmp	.+18     	; 0x17fa <vfprintf+0x2a4>
    17e8:	55 20       	and	r5, r5
    17ea:	39 f0       	breq	.+14     	; 0x17fa <vfprintf+0x2a4>
    17ec:	b7 01       	movw	r22, r14
    17ee:	80 e3       	ldi	r24, 0x30	; 48
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    17f6:	5a 94       	dec	r5
    17f8:	f7 cf       	rjmp	.-18     	; 0x17e8 <vfprintf+0x292>
    17fa:	97 fe       	sbrs	r9, 7
    17fc:	4c c0       	rjmp	.+152    	; 0x1896 <vfprintf+0x340>
    17fe:	46 01       	movw	r8, r12
    1800:	d7 fe       	sbrs	r13, 7
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <vfprintf+0x2b2>
    1804:	81 2c       	mov	r8, r1
    1806:	91 2c       	mov	r9, r1
    1808:	c6 01       	movw	r24, r12
    180a:	88 19       	sub	r24, r8
    180c:	99 09       	sbc	r25, r9
    180e:	f3 01       	movw	r30, r6
    1810:	e8 0f       	add	r30, r24
    1812:	f9 1f       	adc	r31, r25
    1814:	fe 87       	std	Y+14, r31	; 0x0e
    1816:	ed 87       	std	Y+13, r30	; 0x0d
    1818:	96 01       	movw	r18, r12
    181a:	24 19       	sub	r18, r4
    181c:	31 09       	sbc	r19, r1
    181e:	38 8b       	std	Y+16, r19	; 0x10
    1820:	2f 87       	std	Y+15, r18	; 0x0f
    1822:	01 2f       	mov	r16, r17
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	11 95       	neg	r17
    1828:	01 95       	neg	r16
    182a:	11 09       	sbc	r17, r1
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	83 16       	cp	r8, r19
    1830:	93 06       	cpc	r9, r19
    1832:	29 f4       	brne	.+10     	; 0x183e <vfprintf+0x2e8>
    1834:	b7 01       	movw	r22, r14
    1836:	8e e2       	ldi	r24, 0x2E	; 46
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    183e:	c8 14       	cp	r12, r8
    1840:	d9 04       	cpc	r13, r9
    1842:	4c f0       	brlt	.+18     	; 0x1856 <vfprintf+0x300>
    1844:	8f 85       	ldd	r24, Y+15	; 0x0f
    1846:	98 89       	ldd	r25, Y+16	; 0x10
    1848:	88 15       	cp	r24, r8
    184a:	99 05       	cpc	r25, r9
    184c:	24 f4       	brge	.+8      	; 0x1856 <vfprintf+0x300>
    184e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1850:	fe 85       	ldd	r31, Y+14	; 0x0e
    1852:	81 81       	ldd	r24, Z+1	; 0x01
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <vfprintf+0x302>
    1856:	80 e3       	ldi	r24, 0x30	; 48
    1858:	f1 e0       	ldi	r31, 0x01	; 1
    185a:	8f 1a       	sub	r8, r31
    185c:	91 08       	sbc	r9, r1
    185e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1860:	3e 85       	ldd	r19, Y+14	; 0x0e
    1862:	2f 5f       	subi	r18, 0xFF	; 255
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	3e 87       	std	Y+14, r19	; 0x0e
    1868:	2d 87       	std	Y+13, r18	; 0x0d
    186a:	80 16       	cp	r8, r16
    186c:	91 06       	cpc	r9, r17
    186e:	2c f0       	brlt	.+10     	; 0x187a <vfprintf+0x324>
    1870:	b7 01       	movw	r22, r14
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1878:	d9 cf       	rjmp	.-78     	; 0x182c <vfprintf+0x2d6>
    187a:	c8 14       	cp	r12, r8
    187c:	d9 04       	cpc	r13, r9
    187e:	41 f4       	brne	.+16     	; 0x1890 <vfprintf+0x33a>
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	96 33       	cpi	r25, 0x36	; 54
    1884:	20 f4       	brcc	.+8      	; 0x188e <vfprintf+0x338>
    1886:	95 33       	cpi	r25, 0x35	; 53
    1888:	19 f4       	brne	.+6      	; 0x1890 <vfprintf+0x33a>
    188a:	3c 85       	ldd	r19, Y+12	; 0x0c
    188c:	34 ff       	sbrs	r19, 4
    188e:	81 e3       	ldi	r24, 0x31	; 49
    1890:	b7 01       	movw	r22, r14
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	4e c0       	rjmp	.+156    	; 0x1932 <vfprintf+0x3dc>
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	81 33       	cpi	r24, 0x31	; 49
    189a:	19 f0       	breq	.+6      	; 0x18a2 <vfprintf+0x34c>
    189c:	9c 85       	ldd	r25, Y+12	; 0x0c
    189e:	9f 7e       	andi	r25, 0xEF	; 239
    18a0:	9c 87       	std	Y+12, r25	; 0x0c
    18a2:	b7 01       	movw	r22, r14
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    18aa:	11 11       	cpse	r17, r1
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <vfprintf+0x362>
    18ae:	94 fc       	sbrc	r9, 4
    18b0:	18 c0       	rjmp	.+48     	; 0x18e2 <vfprintf+0x38c>
    18b2:	85 e6       	ldi	r24, 0x65	; 101
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	17 c0       	rjmp	.+46     	; 0x18e6 <vfprintf+0x390>
    18b8:	b7 01       	movw	r22, r14
    18ba:	8e e2       	ldi	r24, 0x2E	; 46
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    18c2:	1e 5f       	subi	r17, 0xFE	; 254
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	01 e0       	ldi	r16, 0x01	; 1
    18c8:	08 0f       	add	r16, r24
    18ca:	f3 01       	movw	r30, r6
    18cc:	e8 0f       	add	r30, r24
    18ce:	f1 1d       	adc	r31, r1
    18d0:	80 81       	ld	r24, Z
    18d2:	b7 01       	movw	r22, r14
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    18da:	80 2f       	mov	r24, r16
    18dc:	01 13       	cpse	r16, r17
    18de:	f3 cf       	rjmp	.-26     	; 0x18c6 <vfprintf+0x370>
    18e0:	e6 cf       	rjmp	.-52     	; 0x18ae <vfprintf+0x358>
    18e2:	85 e4       	ldi	r24, 0x45	; 69
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b7 01       	movw	r22, r14
    18e8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    18ec:	d7 fc       	sbrc	r13, 7
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <vfprintf+0x3a6>
    18f0:	c1 14       	cp	r12, r1
    18f2:	d1 04       	cpc	r13, r1
    18f4:	41 f4       	brne	.+16     	; 0x1906 <vfprintf+0x3b0>
    18f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    18f8:	e4 ff       	sbrs	r30, 4
    18fa:	05 c0       	rjmp	.+10     	; 0x1906 <vfprintf+0x3b0>
    18fc:	d1 94       	neg	r13
    18fe:	c1 94       	neg	r12
    1900:	d1 08       	sbc	r13, r1
    1902:	8d e2       	ldi	r24, 0x2D	; 45
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <vfprintf+0x3b2>
    1906:	8b e2       	ldi	r24, 0x2B	; 43
    1908:	b7 01       	movw	r22, r14
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1910:	80 e3       	ldi	r24, 0x30	; 48
    1912:	2a e0       	ldi	r18, 0x0A	; 10
    1914:	c2 16       	cp	r12, r18
    1916:	d1 04       	cpc	r13, r1
    1918:	2c f0       	brlt	.+10     	; 0x1924 <vfprintf+0x3ce>
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	fa e0       	ldi	r31, 0x0A	; 10
    191e:	cf 1a       	sub	r12, r31
    1920:	d1 08       	sbc	r13, r1
    1922:	f7 cf       	rjmp	.-18     	; 0x1912 <vfprintf+0x3bc>
    1924:	b7 01       	movw	r22, r14
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    192c:	b7 01       	movw	r22, r14
    192e:	c6 01       	movw	r24, r12
    1930:	c0 96       	adiw	r24, 0x30	; 48
    1932:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1936:	54 c1       	rjmp	.+680    	; 0x1be0 <vfprintf+0x68a>
    1938:	83 36       	cpi	r24, 0x63	; 99
    193a:	31 f0       	breq	.+12     	; 0x1948 <vfprintf+0x3f2>
    193c:	83 37       	cpi	r24, 0x73	; 115
    193e:	79 f0       	breq	.+30     	; 0x195e <vfprintf+0x408>
    1940:	83 35       	cpi	r24, 0x53	; 83
    1942:	09 f0       	breq	.+2      	; 0x1946 <vfprintf+0x3f0>
    1944:	56 c0       	rjmp	.+172    	; 0x19f2 <vfprintf+0x49c>
    1946:	20 c0       	rjmp	.+64     	; 0x1988 <vfprintf+0x432>
    1948:	56 01       	movw	r10, r12
    194a:	32 e0       	ldi	r19, 0x02	; 2
    194c:	a3 0e       	add	r10, r19
    194e:	b1 1c       	adc	r11, r1
    1950:	f6 01       	movw	r30, r12
    1952:	80 81       	ld	r24, Z
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	01 e0       	ldi	r16, 0x01	; 1
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	63 01       	movw	r12, r6
    195c:	12 c0       	rjmp	.+36     	; 0x1982 <vfprintf+0x42c>
    195e:	56 01       	movw	r10, r12
    1960:	f2 e0       	ldi	r31, 0x02	; 2
    1962:	af 0e       	add	r10, r31
    1964:	b1 1c       	adc	r11, r1
    1966:	f6 01       	movw	r30, r12
    1968:	c0 80       	ld	r12, Z
    196a:	d1 80       	ldd	r13, Z+1	; 0x01
    196c:	96 fe       	sbrs	r9, 6
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <vfprintf+0x420>
    1970:	61 2f       	mov	r22, r17
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	02 c0       	rjmp	.+4      	; 0x197a <vfprintf+0x424>
    1976:	6f ef       	ldi	r22, 0xFF	; 255
    1978:	7f ef       	ldi	r23, 0xFF	; 255
    197a:	c6 01       	movw	r24, r12
    197c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <strnlen>
    1980:	8c 01       	movw	r16, r24
    1982:	f9 2d       	mov	r31, r9
    1984:	ff 77       	andi	r31, 0x7F	; 127
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <vfprintf+0x45a>
    1988:	56 01       	movw	r10, r12
    198a:	22 e0       	ldi	r18, 0x02	; 2
    198c:	a2 0e       	add	r10, r18
    198e:	b1 1c       	adc	r11, r1
    1990:	f6 01       	movw	r30, r12
    1992:	c0 80       	ld	r12, Z
    1994:	d1 80       	ldd	r13, Z+1	; 0x01
    1996:	96 fe       	sbrs	r9, 6
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <vfprintf+0x44a>
    199a:	61 2f       	mov	r22, r17
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <vfprintf+0x44e>
    19a0:	6f ef       	ldi	r22, 0xFF	; 255
    19a2:	7f ef       	ldi	r23, 0xFF	; 255
    19a4:	c6 01       	movw	r24, r12
    19a6:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <strnlen_P>
    19aa:	8c 01       	movw	r16, r24
    19ac:	f9 2d       	mov	r31, r9
    19ae:	f0 68       	ori	r31, 0x80	; 128
    19b0:	9f 2e       	mov	r9, r31
    19b2:	f3 fd       	sbrc	r31, 3
    19b4:	1a c0       	rjmp	.+52     	; 0x19ea <vfprintf+0x494>
    19b6:	85 2d       	mov	r24, r5
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	08 17       	cp	r16, r24
    19bc:	19 07       	cpc	r17, r25
    19be:	a8 f4       	brcc	.+42     	; 0x19ea <vfprintf+0x494>
    19c0:	b7 01       	movw	r22, r14
    19c2:	80 e2       	ldi	r24, 0x20	; 32
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    19ca:	5a 94       	dec	r5
    19cc:	f4 cf       	rjmp	.-24     	; 0x19b6 <vfprintf+0x460>
    19ce:	f6 01       	movw	r30, r12
    19d0:	97 fc       	sbrc	r9, 7
    19d2:	85 91       	lpm	r24, Z+
    19d4:	97 fe       	sbrs	r9, 7
    19d6:	81 91       	ld	r24, Z+
    19d8:	6f 01       	movw	r12, r30
    19da:	b7 01       	movw	r22, r14
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    19e2:	51 10       	cpse	r5, r1
    19e4:	5a 94       	dec	r5
    19e6:	01 50       	subi	r16, 0x01	; 1
    19e8:	11 09       	sbc	r17, r1
    19ea:	01 15       	cp	r16, r1
    19ec:	11 05       	cpc	r17, r1
    19ee:	79 f7       	brne	.-34     	; 0x19ce <vfprintf+0x478>
    19f0:	f7 c0       	rjmp	.+494    	; 0x1be0 <vfprintf+0x68a>
    19f2:	84 36       	cpi	r24, 0x64	; 100
    19f4:	11 f0       	breq	.+4      	; 0x19fa <vfprintf+0x4a4>
    19f6:	89 36       	cpi	r24, 0x69	; 105
    19f8:	61 f5       	brne	.+88     	; 0x1a52 <vfprintf+0x4fc>
    19fa:	56 01       	movw	r10, r12
    19fc:	97 fe       	sbrs	r9, 7
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <vfprintf+0x4bc>
    1a00:	24 e0       	ldi	r18, 0x04	; 4
    1a02:	a2 0e       	add	r10, r18
    1a04:	b1 1c       	adc	r11, r1
    1a06:	f6 01       	movw	r30, r12
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	0a c0       	rjmp	.+20     	; 0x1a26 <vfprintf+0x4d0>
    1a12:	f2 e0       	ldi	r31, 0x02	; 2
    1a14:	af 0e       	add	r10, r31
    1a16:	b1 1c       	adc	r11, r1
    1a18:	f6 01       	movw	r30, r12
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	07 2e       	mov	r0, r23
    1a20:	00 0c       	add	r0, r0
    1a22:	88 0b       	sbc	r24, r24
    1a24:	99 0b       	sbc	r25, r25
    1a26:	f9 2d       	mov	r31, r9
    1a28:	ff 76       	andi	r31, 0x6F	; 111
    1a2a:	9f 2e       	mov	r9, r31
    1a2c:	97 ff       	sbrs	r25, 7
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <vfprintf+0x4ec>
    1a30:	90 95       	com	r25
    1a32:	80 95       	com	r24
    1a34:	70 95       	com	r23
    1a36:	61 95       	neg	r22
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	f0 68       	ori	r31, 0x80	; 128
    1a40:	9f 2e       	mov	r9, r31
    1a42:	2a e0       	ldi	r18, 0x0A	; 10
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	a3 01       	movw	r20, r6
    1a48:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__ultoa_invert>
    1a4c:	c8 2e       	mov	r12, r24
    1a4e:	c6 18       	sub	r12, r6
    1a50:	3f c0       	rjmp	.+126    	; 0x1ad0 <vfprintf+0x57a>
    1a52:	09 2d       	mov	r16, r9
    1a54:	85 37       	cpi	r24, 0x75	; 117
    1a56:	21 f4       	brne	.+8      	; 0x1a60 <vfprintf+0x50a>
    1a58:	0f 7e       	andi	r16, 0xEF	; 239
    1a5a:	2a e0       	ldi	r18, 0x0A	; 10
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	1d c0       	rjmp	.+58     	; 0x1a9a <vfprintf+0x544>
    1a60:	09 7f       	andi	r16, 0xF9	; 249
    1a62:	8f 36       	cpi	r24, 0x6F	; 111
    1a64:	91 f0       	breq	.+36     	; 0x1a8a <vfprintf+0x534>
    1a66:	18 f4       	brcc	.+6      	; 0x1a6e <vfprintf+0x518>
    1a68:	88 35       	cpi	r24, 0x58	; 88
    1a6a:	59 f0       	breq	.+22     	; 0x1a82 <vfprintf+0x52c>
    1a6c:	c3 c0       	rjmp	.+390    	; 0x1bf4 <vfprintf+0x69e>
    1a6e:	80 37       	cpi	r24, 0x70	; 112
    1a70:	19 f0       	breq	.+6      	; 0x1a78 <vfprintf+0x522>
    1a72:	88 37       	cpi	r24, 0x78	; 120
    1a74:	11 f0       	breq	.+4      	; 0x1a7a <vfprintf+0x524>
    1a76:	be c0       	rjmp	.+380    	; 0x1bf4 <vfprintf+0x69e>
    1a78:	00 61       	ori	r16, 0x10	; 16
    1a7a:	04 ff       	sbrs	r16, 4
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <vfprintf+0x53a>
    1a7e:	04 60       	ori	r16, 0x04	; 4
    1a80:	07 c0       	rjmp	.+14     	; 0x1a90 <vfprintf+0x53a>
    1a82:	94 fe       	sbrs	r9, 4
    1a84:	08 c0       	rjmp	.+16     	; 0x1a96 <vfprintf+0x540>
    1a86:	06 60       	ori	r16, 0x06	; 6
    1a88:	06 c0       	rjmp	.+12     	; 0x1a96 <vfprintf+0x540>
    1a8a:	28 e0       	ldi	r18, 0x08	; 8
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	05 c0       	rjmp	.+10     	; 0x1a9a <vfprintf+0x544>
    1a90:	20 e1       	ldi	r18, 0x10	; 16
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <vfprintf+0x544>
    1a96:	20 e1       	ldi	r18, 0x10	; 16
    1a98:	32 e0       	ldi	r19, 0x02	; 2
    1a9a:	56 01       	movw	r10, r12
    1a9c:	07 ff       	sbrs	r16, 7
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <vfprintf+0x55c>
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	a8 0e       	add	r10, r24
    1aa4:	b1 1c       	adc	r11, r1
    1aa6:	f6 01       	movw	r30, r12
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <vfprintf+0x56c>
    1ab2:	f2 e0       	ldi	r31, 0x02	; 2
    1ab4:	af 0e       	add	r10, r31
    1ab6:	b1 1c       	adc	r11, r1
    1ab8:	f6 01       	movw	r30, r12
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a3 01       	movw	r20, r6
    1ac4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__ultoa_invert>
    1ac8:	c8 2e       	mov	r12, r24
    1aca:	c6 18       	sub	r12, r6
    1acc:	0f 77       	andi	r16, 0x7F	; 127
    1ace:	90 2e       	mov	r9, r16
    1ad0:	96 fe       	sbrs	r9, 6
    1ad2:	0b c0       	rjmp	.+22     	; 0x1aea <vfprintf+0x594>
    1ad4:	09 2d       	mov	r16, r9
    1ad6:	0e 7f       	andi	r16, 0xFE	; 254
    1ad8:	c1 16       	cp	r12, r17
    1ada:	50 f4       	brcc	.+20     	; 0x1af0 <vfprintf+0x59a>
    1adc:	94 fe       	sbrs	r9, 4
    1ade:	0a c0       	rjmp	.+20     	; 0x1af4 <vfprintf+0x59e>
    1ae0:	92 fc       	sbrc	r9, 2
    1ae2:	08 c0       	rjmp	.+16     	; 0x1af4 <vfprintf+0x59e>
    1ae4:	09 2d       	mov	r16, r9
    1ae6:	0e 7e       	andi	r16, 0xEE	; 238
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <vfprintf+0x59e>
    1aea:	dc 2c       	mov	r13, r12
    1aec:	09 2d       	mov	r16, r9
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <vfprintf+0x5a0>
    1af0:	dc 2c       	mov	r13, r12
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <vfprintf+0x5a0>
    1af4:	d1 2e       	mov	r13, r17
    1af6:	04 ff       	sbrs	r16, 4
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <vfprintf+0x5be>
    1afa:	fe 01       	movw	r30, r28
    1afc:	ec 0d       	add	r30, r12
    1afe:	f1 1d       	adc	r31, r1
    1b00:	80 81       	ld	r24, Z
    1b02:	80 33       	cpi	r24, 0x30	; 48
    1b04:	11 f4       	brne	.+4      	; 0x1b0a <vfprintf+0x5b4>
    1b06:	09 7e       	andi	r16, 0xE9	; 233
    1b08:	09 c0       	rjmp	.+18     	; 0x1b1c <vfprintf+0x5c6>
    1b0a:	02 ff       	sbrs	r16, 2
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <vfprintf+0x5c4>
    1b0e:	d3 94       	inc	r13
    1b10:	d3 94       	inc	r13
    1b12:	04 c0       	rjmp	.+8      	; 0x1b1c <vfprintf+0x5c6>
    1b14:	80 2f       	mov	r24, r16
    1b16:	86 78       	andi	r24, 0x86	; 134
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <vfprintf+0x5c6>
    1b1a:	d3 94       	inc	r13
    1b1c:	03 fd       	sbrc	r16, 3
    1b1e:	11 c0       	rjmp	.+34     	; 0x1b42 <vfprintf+0x5ec>
    1b20:	00 ff       	sbrs	r16, 0
    1b22:	06 c0       	rjmp	.+12     	; 0x1b30 <vfprintf+0x5da>
    1b24:	1c 2d       	mov	r17, r12
    1b26:	d5 14       	cp	r13, r5
    1b28:	80 f4       	brcc	.+32     	; 0x1b4a <vfprintf+0x5f4>
    1b2a:	15 0d       	add	r17, r5
    1b2c:	1d 19       	sub	r17, r13
    1b2e:	0d c0       	rjmp	.+26     	; 0x1b4a <vfprintf+0x5f4>
    1b30:	d5 14       	cp	r13, r5
    1b32:	58 f4       	brcc	.+22     	; 0x1b4a <vfprintf+0x5f4>
    1b34:	b7 01       	movw	r22, r14
    1b36:	80 e2       	ldi	r24, 0x20	; 32
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1b3e:	d3 94       	inc	r13
    1b40:	f7 cf       	rjmp	.-18     	; 0x1b30 <vfprintf+0x5da>
    1b42:	d5 14       	cp	r13, r5
    1b44:	10 f4       	brcc	.+4      	; 0x1b4a <vfprintf+0x5f4>
    1b46:	5d 18       	sub	r5, r13
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <vfprintf+0x5f6>
    1b4a:	51 2c       	mov	r5, r1
    1b4c:	04 ff       	sbrs	r16, 4
    1b4e:	10 c0       	rjmp	.+32     	; 0x1b70 <vfprintf+0x61a>
    1b50:	b7 01       	movw	r22, r14
    1b52:	80 e3       	ldi	r24, 0x30	; 48
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1b5a:	02 ff       	sbrs	r16, 2
    1b5c:	17 c0       	rjmp	.+46     	; 0x1b8c <vfprintf+0x636>
    1b5e:	01 fd       	sbrc	r16, 1
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <vfprintf+0x612>
    1b62:	88 e7       	ldi	r24, 0x78	; 120
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <vfprintf+0x616>
    1b68:	88 e5       	ldi	r24, 0x58	; 88
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	b7 01       	movw	r22, r14
    1b6e:	0c c0       	rjmp	.+24     	; 0x1b88 <vfprintf+0x632>
    1b70:	80 2f       	mov	r24, r16
    1b72:	86 78       	andi	r24, 0x86	; 134
    1b74:	59 f0       	breq	.+22     	; 0x1b8c <vfprintf+0x636>
    1b76:	01 ff       	sbrs	r16, 1
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <vfprintf+0x628>
    1b7a:	8b e2       	ldi	r24, 0x2B	; 43
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <vfprintf+0x62a>
    1b7e:	80 e2       	ldi	r24, 0x20	; 32
    1b80:	07 fd       	sbrc	r16, 7
    1b82:	8d e2       	ldi	r24, 0x2D	; 45
    1b84:	b7 01       	movw	r22, r14
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1b8c:	c1 16       	cp	r12, r17
    1b8e:	38 f4       	brcc	.+14     	; 0x1b9e <vfprintf+0x648>
    1b90:	b7 01       	movw	r22, r14
    1b92:	80 e3       	ldi	r24, 0x30	; 48
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1b9a:	11 50       	subi	r17, 0x01	; 1
    1b9c:	f7 cf       	rjmp	.-18     	; 0x1b8c <vfprintf+0x636>
    1b9e:	ca 94       	dec	r12
    1ba0:	f3 01       	movw	r30, r6
    1ba2:	ec 0d       	add	r30, r12
    1ba4:	f1 1d       	adc	r31, r1
    1ba6:	80 81       	ld	r24, Z
    1ba8:	b7 01       	movw	r22, r14
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1bb0:	c1 10       	cpse	r12, r1
    1bb2:	f5 cf       	rjmp	.-22     	; 0x1b9e <vfprintf+0x648>
    1bb4:	15 c0       	rjmp	.+42     	; 0x1be0 <vfprintf+0x68a>
    1bb6:	f4 e0       	ldi	r31, 0x04	; 4
    1bb8:	f5 15       	cp	r31, r5
    1bba:	60 f5       	brcc	.+88     	; 0x1c14 <vfprintf+0x6be>
    1bbc:	84 e0       	ldi	r24, 0x04	; 4
    1bbe:	58 1a       	sub	r5, r24
    1bc0:	93 fe       	sbrs	r9, 3
    1bc2:	1f c0       	rjmp	.+62     	; 0x1c02 <vfprintf+0x6ac>
    1bc4:	01 11       	cpse	r16, r1
    1bc6:	27 c0       	rjmp	.+78     	; 0x1c16 <vfprintf+0x6c0>
    1bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bca:	23 ff       	sbrs	r18, 3
    1bcc:	2a c0       	rjmp	.+84     	; 0x1c22 <vfprintf+0x6cc>
    1bce:	04 e5       	ldi	r16, 0x54	; 84
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
    1bd2:	39 2d       	mov	r19, r9
    1bd4:	30 71       	andi	r19, 0x10	; 16
    1bd6:	93 2e       	mov	r9, r19
    1bd8:	f8 01       	movw	r30, r16
    1bda:	84 91       	lpm	r24, Z
    1bdc:	81 11       	cpse	r24, r1
    1bde:	24 c0       	rjmp	.+72     	; 0x1c28 <vfprintf+0x6d2>
    1be0:	55 20       	and	r5, r5
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <vfprintf+0x690>
    1be4:	e4 cc       	rjmp	.-1592   	; 0x15ae <vfprintf+0x58>
    1be6:	b7 01       	movw	r22, r14
    1be8:	80 e2       	ldi	r24, 0x20	; 32
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1bf0:	5a 94       	dec	r5
    1bf2:	f6 cf       	rjmp	.-20     	; 0x1be0 <vfprintf+0x68a>
    1bf4:	f7 01       	movw	r30, r14
    1bf6:	86 81       	ldd	r24, Z+6	; 0x06
    1bf8:	97 81       	ldd	r25, Z+7	; 0x07
    1bfa:	26 c0       	rjmp	.+76     	; 0x1c48 <vfprintf+0x6f2>
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	9f ef       	ldi	r25, 0xFF	; 255
    1c00:	23 c0       	rjmp	.+70     	; 0x1c48 <vfprintf+0x6f2>
    1c02:	b7 01       	movw	r22, r14
    1c04:	80 e2       	ldi	r24, 0x20	; 32
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1c0c:	5a 94       	dec	r5
    1c0e:	51 10       	cpse	r5, r1
    1c10:	f8 cf       	rjmp	.-16     	; 0x1c02 <vfprintf+0x6ac>
    1c12:	d8 cf       	rjmp	.-80     	; 0x1bc4 <vfprintf+0x66e>
    1c14:	51 2c       	mov	r5, r1
    1c16:	b7 01       	movw	r22, r14
    1c18:	80 2f       	mov	r24, r16
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1c20:	d3 cf       	rjmp	.-90     	; 0x1bc8 <vfprintf+0x672>
    1c22:	08 e5       	ldi	r16, 0x58	; 88
    1c24:	10 e0       	ldi	r17, 0x00	; 0
    1c26:	d5 cf       	rjmp	.-86     	; 0x1bd2 <vfprintf+0x67c>
    1c28:	91 10       	cpse	r9, r1
    1c2a:	80 52       	subi	r24, 0x20	; 32
    1c2c:	b7 01       	movw	r22, r14
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <fputc>
    1c34:	0f 5f       	subi	r16, 0xFF	; 255
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	cf cf       	rjmp	.-98     	; 0x1bd8 <vfprintf+0x682>
    1c3a:	23 e0       	ldi	r18, 0x03	; 3
    1c3c:	25 15       	cp	r18, r5
    1c3e:	10 f4       	brcc	.+4      	; 0x1c44 <vfprintf+0x6ee>
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	bd cf       	rjmp	.-134    	; 0x1bbe <vfprintf+0x668>
    1c44:	51 2c       	mov	r5, r1
    1c46:	c0 cf       	rjmp	.-128    	; 0x1bc8 <vfprintf+0x672>
    1c48:	60 96       	adiw	r28, 0x10	; 16
    1c4a:	e2 e1       	ldi	r30, 0x12	; 18
    1c4c:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__epilogue_restores__>

00001c50 <__prologue_saves__>:
    1c50:	2f 92       	push	r2
    1c52:	3f 92       	push	r3
    1c54:	4f 92       	push	r4
    1c56:	5f 92       	push	r5
    1c58:	6f 92       	push	r6
    1c5a:	7f 92       	push	r7
    1c5c:	8f 92       	push	r8
    1c5e:	9f 92       	push	r9
    1c60:	af 92       	push	r10
    1c62:	bf 92       	push	r11
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	ca 1b       	sub	r28, r26
    1c7a:	db 0b       	sbc	r29, r27
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	09 94       	ijmp

00001c88 <__epilogue_restores__>:
    1c88:	2a 88       	ldd	r2, Y+18	; 0x12
    1c8a:	39 88       	ldd	r3, Y+17	; 0x11
    1c8c:	48 88       	ldd	r4, Y+16	; 0x10
    1c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c90:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c92:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c94:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c96:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c98:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c9a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c9c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c9e:	df 80       	ldd	r13, Y+7	; 0x07
    1ca0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ca4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ca6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ca8:	aa 81       	ldd	r26, Y+2	; 0x02
    1caa:	b9 81       	ldd	r27, Y+1	; 0x01
    1cac:	ce 0f       	add	r28, r30
    1cae:	d1 1d       	adc	r29, r1
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	ed 01       	movw	r28, r26
    1cbc:	08 95       	ret

00001cbe <__ftoa_engine>:
    1cbe:	28 30       	cpi	r18, 0x08	; 8
    1cc0:	08 f0       	brcs	.+2      	; 0x1cc4 <__ftoa_engine+0x6>
    1cc2:	27 e0       	ldi	r18, 0x07	; 7
    1cc4:	33 27       	eor	r19, r19
    1cc6:	da 01       	movw	r26, r20
    1cc8:	99 0f       	add	r25, r25
    1cca:	31 1d       	adc	r19, r1
    1ccc:	87 fd       	sbrc	r24, 7
    1cce:	91 60       	ori	r25, 0x01	; 1
    1cd0:	00 96       	adiw	r24, 0x00	; 0
    1cd2:	61 05       	cpc	r22, r1
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	39 f4       	brne	.+14     	; 0x1ce6 <__ftoa_engine+0x28>
    1cd8:	32 60       	ori	r19, 0x02	; 2
    1cda:	2e 5f       	subi	r18, 0xFE	; 254
    1cdc:	3d 93       	st	X+, r19
    1cde:	30 e3       	ldi	r19, 0x30	; 48
    1ce0:	2a 95       	dec	r18
    1ce2:	e1 f7       	brne	.-8      	; 0x1cdc <__ftoa_engine+0x1e>
    1ce4:	08 95       	ret
    1ce6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce8:	30 f0       	brcs	.+12     	; 0x1cf6 <__ftoa_engine+0x38>
    1cea:	80 38       	cpi	r24, 0x80	; 128
    1cec:	71 05       	cpc	r23, r1
    1cee:	61 05       	cpc	r22, r1
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <__ftoa_engine+0x36>
    1cf2:	3c 5f       	subi	r19, 0xFC	; 252
    1cf4:	3c 5f       	subi	r19, 0xFC	; 252
    1cf6:	3d 93       	st	X+, r19
    1cf8:	91 30       	cpi	r25, 0x01	; 1
    1cfa:	08 f0       	brcs	.+2      	; 0x1cfe <__ftoa_engine+0x40>
    1cfc:	80 68       	ori	r24, 0x80	; 128
    1cfe:	91 1d       	adc	r25, r1
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	1f 93       	push	r17
    1d06:	0f 93       	push	r16
    1d08:	ff 92       	push	r15
    1d0a:	ef 92       	push	r14
    1d0c:	19 2f       	mov	r17, r25
    1d0e:	98 7f       	andi	r25, 0xF8	; 248
    1d10:	96 95       	lsr	r25
    1d12:	e9 2f       	mov	r30, r25
    1d14:	96 95       	lsr	r25
    1d16:	96 95       	lsr	r25
    1d18:	e9 0f       	add	r30, r25
    1d1a:	ff 27       	eor	r31, r31
    1d1c:	ea 54       	subi	r30, 0x4A	; 74
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	99 27       	eor	r25, r25
    1d22:	33 27       	eor	r19, r19
    1d24:	ee 24       	eor	r14, r14
    1d26:	ff 24       	eor	r15, r15
    1d28:	a7 01       	movw	r20, r14
    1d2a:	e7 01       	movw	r28, r14
    1d2c:	05 90       	lpm	r0, Z+
    1d2e:	08 94       	sec
    1d30:	07 94       	ror	r0
    1d32:	28 f4       	brcc	.+10     	; 0x1d3e <__ftoa_engine+0x80>
    1d34:	36 0f       	add	r19, r22
    1d36:	e7 1e       	adc	r14, r23
    1d38:	f8 1e       	adc	r15, r24
    1d3a:	49 1f       	adc	r20, r25
    1d3c:	51 1d       	adc	r21, r1
    1d3e:	66 0f       	add	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	88 1f       	adc	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	06 94       	lsr	r0
    1d48:	a1 f7       	brne	.-24     	; 0x1d32 <__ftoa_engine+0x74>
    1d4a:	05 90       	lpm	r0, Z+
    1d4c:	07 94       	ror	r0
    1d4e:	28 f4       	brcc	.+10     	; 0x1d5a <__ftoa_engine+0x9c>
    1d50:	e7 0e       	add	r14, r23
    1d52:	f8 1e       	adc	r15, r24
    1d54:	49 1f       	adc	r20, r25
    1d56:	56 1f       	adc	r21, r22
    1d58:	c1 1d       	adc	r28, r1
    1d5a:	77 0f       	add	r23, r23
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	66 1f       	adc	r22, r22
    1d62:	06 94       	lsr	r0
    1d64:	a1 f7       	brne	.-24     	; 0x1d4e <__ftoa_engine+0x90>
    1d66:	05 90       	lpm	r0, Z+
    1d68:	07 94       	ror	r0
    1d6a:	28 f4       	brcc	.+10     	; 0x1d76 <__ftoa_engine+0xb8>
    1d6c:	f8 0e       	add	r15, r24
    1d6e:	49 1f       	adc	r20, r25
    1d70:	56 1f       	adc	r21, r22
    1d72:	c7 1f       	adc	r28, r23
    1d74:	d1 1d       	adc	r29, r1
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	66 1f       	adc	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	06 94       	lsr	r0
    1d80:	a1 f7       	brne	.-24     	; 0x1d6a <__ftoa_engine+0xac>
    1d82:	05 90       	lpm	r0, Z+
    1d84:	07 94       	ror	r0
    1d86:	20 f4       	brcc	.+8      	; 0x1d90 <__ftoa_engine+0xd2>
    1d88:	49 0f       	add	r20, r25
    1d8a:	56 1f       	adc	r21, r22
    1d8c:	c7 1f       	adc	r28, r23
    1d8e:	d8 1f       	adc	r29, r24
    1d90:	99 0f       	add	r25, r25
    1d92:	66 1f       	adc	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	88 1f       	adc	r24, r24
    1d98:	06 94       	lsr	r0
    1d9a:	a9 f7       	brne	.-22     	; 0x1d86 <__ftoa_engine+0xc8>
    1d9c:	84 91       	lpm	r24, Z
    1d9e:	10 95       	com	r17
    1da0:	17 70       	andi	r17, 0x07	; 7
    1da2:	41 f0       	breq	.+16     	; 0x1db4 <__ftoa_engine+0xf6>
    1da4:	d6 95       	lsr	r29
    1da6:	c7 95       	ror	r28
    1da8:	57 95       	ror	r21
    1daa:	47 95       	ror	r20
    1dac:	f7 94       	ror	r15
    1dae:	e7 94       	ror	r14
    1db0:	1a 95       	dec	r17
    1db2:	c1 f7       	brne	.-16     	; 0x1da4 <__ftoa_engine+0xe6>
    1db4:	ec e5       	ldi	r30, 0x5C	; 92
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	68 94       	set
    1dba:	15 90       	lpm	r1, Z+
    1dbc:	15 91       	lpm	r17, Z+
    1dbe:	35 91       	lpm	r19, Z+
    1dc0:	65 91       	lpm	r22, Z+
    1dc2:	95 91       	lpm	r25, Z+
    1dc4:	05 90       	lpm	r0, Z+
    1dc6:	7f e2       	ldi	r23, 0x2F	; 47
    1dc8:	73 95       	inc	r23
    1dca:	e1 18       	sub	r14, r1
    1dcc:	f1 0a       	sbc	r15, r17
    1dce:	43 0b       	sbc	r20, r19
    1dd0:	56 0b       	sbc	r21, r22
    1dd2:	c9 0b       	sbc	r28, r25
    1dd4:	d0 09       	sbc	r29, r0
    1dd6:	c0 f7       	brcc	.-16     	; 0x1dc8 <__ftoa_engine+0x10a>
    1dd8:	e1 0c       	add	r14, r1
    1dda:	f1 1e       	adc	r15, r17
    1ddc:	43 1f       	adc	r20, r19
    1dde:	56 1f       	adc	r21, r22
    1de0:	c9 1f       	adc	r28, r25
    1de2:	d0 1d       	adc	r29, r0
    1de4:	7e f4       	brtc	.+30     	; 0x1e04 <__ftoa_engine+0x146>
    1de6:	70 33       	cpi	r23, 0x30	; 48
    1de8:	11 f4       	brne	.+4      	; 0x1dee <__ftoa_engine+0x130>
    1dea:	8a 95       	dec	r24
    1dec:	e6 cf       	rjmp	.-52     	; 0x1dba <__ftoa_engine+0xfc>
    1dee:	e8 94       	clt
    1df0:	01 50       	subi	r16, 0x01	; 1
    1df2:	30 f0       	brcs	.+12     	; 0x1e00 <__ftoa_engine+0x142>
    1df4:	08 0f       	add	r16, r24
    1df6:	0a f4       	brpl	.+2      	; 0x1dfa <__ftoa_engine+0x13c>
    1df8:	00 27       	eor	r16, r16
    1dfa:	02 17       	cp	r16, r18
    1dfc:	08 f4       	brcc	.+2      	; 0x1e00 <__ftoa_engine+0x142>
    1dfe:	20 2f       	mov	r18, r16
    1e00:	23 95       	inc	r18
    1e02:	02 2f       	mov	r16, r18
    1e04:	7a 33       	cpi	r23, 0x3A	; 58
    1e06:	28 f0       	brcs	.+10     	; 0x1e12 <__ftoa_engine+0x154>
    1e08:	79 e3       	ldi	r23, 0x39	; 57
    1e0a:	7d 93       	st	X+, r23
    1e0c:	2a 95       	dec	r18
    1e0e:	e9 f7       	brne	.-6      	; 0x1e0a <__ftoa_engine+0x14c>
    1e10:	10 c0       	rjmp	.+32     	; 0x1e32 <__ftoa_engine+0x174>
    1e12:	7d 93       	st	X+, r23
    1e14:	2a 95       	dec	r18
    1e16:	89 f6       	brne	.-94     	; 0x1dba <__ftoa_engine+0xfc>
    1e18:	06 94       	lsr	r0
    1e1a:	97 95       	ror	r25
    1e1c:	67 95       	ror	r22
    1e1e:	37 95       	ror	r19
    1e20:	17 95       	ror	r17
    1e22:	17 94       	ror	r1
    1e24:	e1 18       	sub	r14, r1
    1e26:	f1 0a       	sbc	r15, r17
    1e28:	43 0b       	sbc	r20, r19
    1e2a:	56 0b       	sbc	r21, r22
    1e2c:	c9 0b       	sbc	r28, r25
    1e2e:	d0 09       	sbc	r29, r0
    1e30:	98 f0       	brcs	.+38     	; 0x1e58 <__ftoa_engine+0x19a>
    1e32:	23 95       	inc	r18
    1e34:	7e 91       	ld	r23, -X
    1e36:	73 95       	inc	r23
    1e38:	7a 33       	cpi	r23, 0x3A	; 58
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <__ftoa_engine+0x180>
    1e3c:	70 e3       	ldi	r23, 0x30	; 48
    1e3e:	7c 93       	st	X, r23
    1e40:	20 13       	cpse	r18, r16
    1e42:	b8 f7       	brcc	.-18     	; 0x1e32 <__ftoa_engine+0x174>
    1e44:	7e 91       	ld	r23, -X
    1e46:	70 61       	ori	r23, 0x10	; 16
    1e48:	7d 93       	st	X+, r23
    1e4a:	30 f0       	brcs	.+12     	; 0x1e58 <__ftoa_engine+0x19a>
    1e4c:	83 95       	inc	r24
    1e4e:	71 e3       	ldi	r23, 0x31	; 49
    1e50:	7d 93       	st	X+, r23
    1e52:	70 e3       	ldi	r23, 0x30	; 48
    1e54:	2a 95       	dec	r18
    1e56:	e1 f7       	brne	.-8      	; 0x1e50 <__ftoa_engine+0x192>
    1e58:	11 24       	eor	r1, r1
    1e5a:	ef 90       	pop	r14
    1e5c:	ff 90       	pop	r15
    1e5e:	0f 91       	pop	r16
    1e60:	1f 91       	pop	r17
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	99 27       	eor	r25, r25
    1e68:	87 fd       	sbrc	r24, 7
    1e6a:	90 95       	com	r25
    1e6c:	08 95       	ret

00001e6e <strnlen_P>:
    1e6e:	fc 01       	movw	r30, r24
    1e70:	05 90       	lpm	r0, Z+
    1e72:	61 50       	subi	r22, 0x01	; 1
    1e74:	70 40       	sbci	r23, 0x00	; 0
    1e76:	01 10       	cpse	r0, r1
    1e78:	d8 f7       	brcc	.-10     	; 0x1e70 <strnlen_P+0x2>
    1e7a:	80 95       	com	r24
    1e7c:	90 95       	com	r25
    1e7e:	8e 0f       	add	r24, r30
    1e80:	9f 1f       	adc	r25, r31
    1e82:	08 95       	ret

00001e84 <strnlen>:
    1e84:	fc 01       	movw	r30, r24
    1e86:	61 50       	subi	r22, 0x01	; 1
    1e88:	70 40       	sbci	r23, 0x00	; 0
    1e8a:	01 90       	ld	r0, Z+
    1e8c:	01 10       	cpse	r0, r1
    1e8e:	d8 f7       	brcc	.-10     	; 0x1e86 <strnlen+0x2>
    1e90:	80 95       	com	r24
    1e92:	90 95       	com	r25
    1e94:	8e 0f       	add	r24, r30
    1e96:	9f 1f       	adc	r25, r31
    1e98:	08 95       	ret

00001e9a <fputc>:
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	fb 01       	movw	r30, r22
    1ea4:	23 81       	ldd	r18, Z+3	; 0x03
    1ea6:	21 fd       	sbrc	r18, 1
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <fputc+0x16>
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	9f ef       	ldi	r25, 0xFF	; 255
    1eae:	2c c0       	rjmp	.+88     	; 0x1f08 <fputc+0x6e>
    1eb0:	22 ff       	sbrs	r18, 2
    1eb2:	16 c0       	rjmp	.+44     	; 0x1ee0 <fputc+0x46>
    1eb4:	46 81       	ldd	r20, Z+6	; 0x06
    1eb6:	57 81       	ldd	r21, Z+7	; 0x07
    1eb8:	24 81       	ldd	r18, Z+4	; 0x04
    1eba:	35 81       	ldd	r19, Z+5	; 0x05
    1ebc:	42 17       	cp	r20, r18
    1ebe:	53 07       	cpc	r21, r19
    1ec0:	44 f4       	brge	.+16     	; 0x1ed2 <fputc+0x38>
    1ec2:	a0 81       	ld	r26, Z
    1ec4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ec6:	9d 01       	movw	r18, r26
    1ec8:	2f 5f       	subi	r18, 0xFF	; 255
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	31 83       	std	Z+1, r19	; 0x01
    1ece:	20 83       	st	Z, r18
    1ed0:	8c 93       	st	X, r24
    1ed2:	26 81       	ldd	r18, Z+6	; 0x06
    1ed4:	37 81       	ldd	r19, Z+7	; 0x07
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	37 83       	std	Z+7, r19	; 0x07
    1edc:	26 83       	std	Z+6, r18	; 0x06
    1ede:	14 c0       	rjmp	.+40     	; 0x1f08 <fputc+0x6e>
    1ee0:	8b 01       	movw	r16, r22
    1ee2:	ec 01       	movw	r28, r24
    1ee4:	fb 01       	movw	r30, r22
    1ee6:	00 84       	ldd	r0, Z+8	; 0x08
    1ee8:	f1 85       	ldd	r31, Z+9	; 0x09
    1eea:	e0 2d       	mov	r30, r0
    1eec:	09 95       	icall
    1eee:	89 2b       	or	r24, r25
    1ef0:	e1 f6       	brne	.-72     	; 0x1eaa <fputc+0x10>
    1ef2:	d8 01       	movw	r26, r16
    1ef4:	16 96       	adiw	r26, 0x06	; 6
    1ef6:	8d 91       	ld	r24, X+
    1ef8:	9c 91       	ld	r25, X
    1efa:	17 97       	sbiw	r26, 0x07	; 7
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	17 96       	adiw	r26, 0x07	; 7
    1f00:	9c 93       	st	X, r25
    1f02:	8e 93       	st	-X, r24
    1f04:	16 97       	sbiw	r26, 0x06	; 6
    1f06:	ce 01       	movw	r24, r28
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	08 95       	ret

00001f12 <snprintf>:
    1f12:	ae e0       	ldi	r26, 0x0E	; 14
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ef e8       	ldi	r30, 0x8F	; 143
    1f18:	ff e0       	ldi	r31, 0x0F	; 15
    1f1a:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__prologue_saves__+0x1c>
    1f1e:	0d 89       	ldd	r16, Y+21	; 0x15
    1f20:	1e 89       	ldd	r17, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	26 e0       	ldi	r18, 0x06	; 6
    1f28:	2c 83       	std	Y+4, r18	; 0x04
    1f2a:	1a 83       	std	Y+2, r17	; 0x02
    1f2c:	09 83       	std	Y+1, r16	; 0x01
    1f2e:	97 ff       	sbrs	r25, 7
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <snprintf+0x24>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e8       	ldi	r25, 0x80	; 128
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	ae 01       	movw	r20, r28
    1f3e:	45 5e       	subi	r20, 0xE5	; 229
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	69 8d       	ldd	r22, Y+25	; 0x19
    1f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f46:	ce 01       	movw	r24, r28
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vfprintf>
    1f4e:	4d 81       	ldd	r20, Y+5	; 0x05
    1f50:	5e 81       	ldd	r21, Y+6	; 0x06
    1f52:	57 fd       	sbrc	r21, 7
    1f54:	0a c0       	rjmp	.+20     	; 0x1f6a <snprintf+0x58>
    1f56:	2f 81       	ldd	r18, Y+7	; 0x07
    1f58:	38 85       	ldd	r19, Y+8	; 0x08
    1f5a:	42 17       	cp	r20, r18
    1f5c:	53 07       	cpc	r21, r19
    1f5e:	0c f4       	brge	.+2      	; 0x1f62 <snprintf+0x50>
    1f60:	9a 01       	movw	r18, r20
    1f62:	f8 01       	movw	r30, r16
    1f64:	e2 0f       	add	r30, r18
    1f66:	f3 1f       	adc	r31, r19
    1f68:	10 82       	st	Z, r1
    1f6a:	2e 96       	adiw	r28, 0x0e	; 14
    1f6c:	e4 e0       	ldi	r30, 0x04	; 4
    1f6e:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__epilogue_restores__+0x1c>

00001f72 <sprintf>:
    1f72:	ae e0       	ldi	r26, 0x0E	; 14
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	ef eb       	ldi	r30, 0xBF	; 191
    1f78:	ff e0       	ldi	r31, 0x0F	; 15
    1f7a:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__prologue_saves__+0x1c>
    1f7e:	0d 89       	ldd	r16, Y+21	; 0x15
    1f80:	1e 89       	ldd	r17, Y+22	; 0x16
    1f82:	86 e0       	ldi	r24, 0x06	; 6
    1f84:	8c 83       	std	Y+4, r24	; 0x04
    1f86:	1a 83       	std	Y+2, r17	; 0x02
    1f88:	09 83       	std	Y+1, r16	; 0x01
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	9f e7       	ldi	r25, 0x7F	; 127
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	ae 01       	movw	r20, r28
    1f94:	47 5e       	subi	r20, 0xE7	; 231
    1f96:	5f 4f       	sbci	r21, 0xFF	; 255
    1f98:	6f 89       	ldd	r22, Y+23	; 0x17
    1f9a:	78 8d       	ldd	r23, Y+24	; 0x18
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <vfprintf>
    1fa4:	ef 81       	ldd	r30, Y+7	; 0x07
    1fa6:	f8 85       	ldd	r31, Y+8	; 0x08
    1fa8:	e0 0f       	add	r30, r16
    1faa:	f1 1f       	adc	r31, r17
    1fac:	10 82       	st	Z, r1
    1fae:	2e 96       	adiw	r28, 0x0e	; 14
    1fb0:	e4 e0       	ldi	r30, 0x04	; 4
    1fb2:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__epilogue_restores__+0x1c>

00001fb6 <__ultoa_invert>:
    1fb6:	fa 01       	movw	r30, r20
    1fb8:	aa 27       	eor	r26, r26
    1fba:	28 30       	cpi	r18, 0x08	; 8
    1fbc:	51 f1       	breq	.+84     	; 0x2012 <__ultoa_invert+0x5c>
    1fbe:	20 31       	cpi	r18, 0x10	; 16
    1fc0:	81 f1       	breq	.+96     	; 0x2022 <__ultoa_invert+0x6c>
    1fc2:	e8 94       	clt
    1fc4:	6f 93       	push	r22
    1fc6:	6e 7f       	andi	r22, 0xFE	; 254
    1fc8:	6e 5f       	subi	r22, 0xFE	; 254
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	af 4f       	sbci	r26, 0xFF	; 255
    1fd2:	b1 e0       	ldi	r27, 0x01	; 1
    1fd4:	3e d0       	rcall	.+124    	; 0x2052 <__ultoa_invert+0x9c>
    1fd6:	b4 e0       	ldi	r27, 0x04	; 4
    1fd8:	3c d0       	rcall	.+120    	; 0x2052 <__ultoa_invert+0x9c>
    1fda:	67 0f       	add	r22, r23
    1fdc:	78 1f       	adc	r23, r24
    1fde:	89 1f       	adc	r24, r25
    1fe0:	9a 1f       	adc	r25, r26
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	68 0f       	add	r22, r24
    1fe6:	79 1f       	adc	r23, r25
    1fe8:	8a 1f       	adc	r24, r26
    1fea:	91 1d       	adc	r25, r1
    1fec:	a1 1d       	adc	r26, r1
    1fee:	6a 0f       	add	r22, r26
    1ff0:	71 1d       	adc	r23, r1
    1ff2:	81 1d       	adc	r24, r1
    1ff4:	91 1d       	adc	r25, r1
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	20 d0       	rcall	.+64     	; 0x203a <__ultoa_invert+0x84>
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <__ultoa_invert+0x48>
    1ffc:	68 94       	set
    1ffe:	3f 91       	pop	r19
    2000:	2a e0       	ldi	r18, 0x0A	; 10
    2002:	26 9f       	mul	r18, r22
    2004:	11 24       	eor	r1, r1
    2006:	30 19       	sub	r19, r0
    2008:	30 5d       	subi	r19, 0xD0	; 208
    200a:	31 93       	st	Z+, r19
    200c:	de f6       	brtc	.-74     	; 0x1fc4 <__ultoa_invert+0xe>
    200e:	cf 01       	movw	r24, r30
    2010:	08 95       	ret
    2012:	46 2f       	mov	r20, r22
    2014:	47 70       	andi	r20, 0x07	; 7
    2016:	40 5d       	subi	r20, 0xD0	; 208
    2018:	41 93       	st	Z+, r20
    201a:	b3 e0       	ldi	r27, 0x03	; 3
    201c:	0f d0       	rcall	.+30     	; 0x203c <__ultoa_invert+0x86>
    201e:	c9 f7       	brne	.-14     	; 0x2012 <__ultoa_invert+0x5c>
    2020:	f6 cf       	rjmp	.-20     	; 0x200e <__ultoa_invert+0x58>
    2022:	46 2f       	mov	r20, r22
    2024:	4f 70       	andi	r20, 0x0F	; 15
    2026:	40 5d       	subi	r20, 0xD0	; 208
    2028:	4a 33       	cpi	r20, 0x3A	; 58
    202a:	18 f0       	brcs	.+6      	; 0x2032 <__ultoa_invert+0x7c>
    202c:	49 5d       	subi	r20, 0xD9	; 217
    202e:	31 fd       	sbrc	r19, 1
    2030:	40 52       	subi	r20, 0x20	; 32
    2032:	41 93       	st	Z+, r20
    2034:	02 d0       	rcall	.+4      	; 0x203a <__ultoa_invert+0x84>
    2036:	a9 f7       	brne	.-22     	; 0x2022 <__ultoa_invert+0x6c>
    2038:	ea cf       	rjmp	.-44     	; 0x200e <__ultoa_invert+0x58>
    203a:	b4 e0       	ldi	r27, 0x04	; 4
    203c:	a6 95       	lsr	r26
    203e:	97 95       	ror	r25
    2040:	87 95       	ror	r24
    2042:	77 95       	ror	r23
    2044:	67 95       	ror	r22
    2046:	ba 95       	dec	r27
    2048:	c9 f7       	brne	.-14     	; 0x203c <__ultoa_invert+0x86>
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	61 05       	cpc	r22, r1
    204e:	71 05       	cpc	r23, r1
    2050:	08 95       	ret
    2052:	9b 01       	movw	r18, r22
    2054:	ac 01       	movw	r20, r24
    2056:	0a 2e       	mov	r0, r26
    2058:	06 94       	lsr	r0
    205a:	57 95       	ror	r21
    205c:	47 95       	ror	r20
    205e:	37 95       	ror	r19
    2060:	27 95       	ror	r18
    2062:	ba 95       	dec	r27
    2064:	c9 f7       	brne	.-14     	; 0x2058 <__ultoa_invert+0xa2>
    2066:	62 0f       	add	r22, r18
    2068:	73 1f       	adc	r23, r19
    206a:	84 1f       	adc	r24, r20
    206c:	95 1f       	adc	r25, r21
    206e:	a0 1d       	adc	r26, r0
    2070:	08 95       	ret

00002072 <_exit>:
    2072:	f8 94       	cli

00002074 <__stop_program>:
    2074:	ff cf       	rjmp	.-2      	; 0x2074 <__stop_program>
