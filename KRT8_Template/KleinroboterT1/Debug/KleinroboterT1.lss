
KleinroboterT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00001b4c  00001be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000221  008000aa  008000aa  00001c2a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000245a  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fff  00000000  00000000  00004386  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ee  00000000  00000000  00005385  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000630  00000000  00000000  00006674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000994  00000000  00000000  00006ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001410  00000000  00000000  00007638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008a48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__vector_13>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__vector_15>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	ec e4       	ldi	r30, 0x4C	; 76
     16a:	fb e1       	ldi	r31, 0x1B	; 27
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	aa 3a       	cpi	r26, 0xAA	; 170
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	22 e0       	ldi	r18, 0x02	; 2
     17a:	aa ea       	ldi	r26, 0xAA	; 170
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ab 3c       	cpi	r26, 0xCB	; 203
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 cc 00 	call	0x198	; 0x198 <main>
     18c:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <reglerBalancieren_init>:
	}
}

/* Initialiserung des Reglers und der verwendet Filter */
void reglerBalancieren_init(void) 
{	
     194:	08 95       	ret

00000196 <reglerBalancieren_regelung>:
/* Ausführung des Reglers zum Balancieren 
	- Sensordaten lesen 
	- Komplementärfilter ausführen
	- Regler ausführen */
void reglerBalancieren_regelung(void) 
{
     196:	08 95       	ret

00000198 <main>:
						- TESTING */
uint8_t activeController = MANUELLE_STEUERUNG;

/* Hauptfunktion */
int main(void)
{	
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	67 97       	sbiw	r28, 0x17	; 23
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	cd bf       	out	0x3d, r28	; 61
	/* LEDs als Ausgï¿½nge setzen */
	DDRA |= (1<<LED_GRUEN);
     1ac:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA |= (1<<LED_GELB);
     1ae:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA |= (1<<LED_ROT);
     1b0:	d0 9a       	sbi	0x1a, 0	; 26
	DDRB |= (1<<LED_GRUENB);
     1b2:	b9 9a       	sbi	0x17, 1	; 23
	
	/* Initialisierung starten */
	// LED auf rot --> Kleinroboter nicht anfassen wï¿½hren Initialisierung
	PORTA |= (1<<LED_ROT);
     1b4:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b6:	2f ef       	ldi	r18, 0xFF	; 255
     1b8:	89 e6       	ldi	r24, 0x69	; 105
     1ba:	98 e1       	ldi	r25, 0x18	; 24
     1bc:	21 50       	subi	r18, 0x01	; 1
     1be:	80 40       	sbci	r24, 0x00	; 0
     1c0:	90 40       	sbci	r25, 0x00	; 0
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x24>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x2e>
     1c6:	00 00       	nop
	_delay_ms(1000);
	
	/*	Initialisiere Timer 0 zur Erzeugung der Samplezeit
		Samplezeit wird in als T_SAMPLE gesetzt */
	TIMSK |= (1<<OCIE0);									//enable output compare interrupt
     1c8:	89 b7       	in	r24, 0x39	; 57
     1ca:	82 60       	ori	r24, 0x02	; 2
     1cc:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS00);					// non PWM, normal operation OC0 disconnected, Clk = clk-IO / 1024
     1ce:	8d e0       	ldi	r24, 0x0D	; 13
     1d0:	83 bf       	out	0x33, r24	; 51
	OCR0 = (uint8_t)((float)F_CPU/1024 * T_SAMPLE);			// setze output compare register entsprechend
     1d2:	8e e4       	ldi	r24, 0x4E	; 78
     1d4:	8c bf       	out	0x3c, r24	; 60
	
	/* Alle Module initialisieren */
	// UART/Bluetooth aktivieren und initialisieren
	uart_init();	
     1d6:	0e 94 24 05 	call	0xa48	; 0xa48 <uart_init>
	// Akkuspanungsmessung initialisieren
	akku_init();	
     1da:	0e 94 3a 03 	call	0x674	; 0x674 <akku_init>
	// Motoransteurung initialisieren
	motor_init();
     1de:	0e 94 cd 01 	call	0x39a	; 0x39a <motor_init>
	// SPI und die Sensoren am SPI Bus (Decoder und Accelerometer) initialisieren
	spi_init();
     1e2:	0e 94 08 06 	call	0xc10	; 0xc10 <spi_init>
	qdec_init();
     1e6:	0e 94 09 06 	call	0xc12	; 0xc12 <qdec_init>
	acc_init();
     1ea:	0e 94 0a 06 	call	0xc14	; 0xc14 <acc_init>
	// I2C und die Sensoren am I2C Bus (Gyro) initialisieren
	gyro_init();
     1ee:	0e 94 06 05 	call	0xa0c	; 0xa0c <gyro_init>
	// Regler initialisieren
	reglerTrajektorienfolge_init();
     1f2:	0e 94 2f 03 	call	0x65e	; 0x65e <reglerTrajektorienfolge_init>
	reglerBalancieren_init();			
     1f6:	0e 94 ca 00 	call	0x194	; 0x194 <reglerBalancieren_init>
	
	/* Initialisierung abschlieï¿½en */
	// Akku Notabschaltung
	akku_check();
     1fa:	0e 94 63 03 	call	0x6c6	; 0x6c6 <akku_check>
	// Interrupts einschalten
	sei();
     1fe:	78 94       	sei
	// ï¿½ber UART mitteilen, dass die Initialisierung abgeschlossen ist
	uart_puts((uint8_t*)"FINISHED INITIALIZATION\r\n");
     200:	87 e6       	ldi	r24, 0x67	; 103
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 83 05 	call	0xb06	; 0xb06 <uart_puts>
	// Rote LED aus --> Kleinroboter darf wieder bewegt werden
	PORTA &= ~(1<<LED_ROT);
     208:	d8 98       	cbi	0x1b, 0	; 27
	
	/* Programstart */
	PORTA |= (1<<LED_GELB);
     20a:	d9 9a       	sbi	0x1b, 1	; 27
	// Warten bis der Taster gedrï¿½ckt wird
	while((PINB & (1<<PB2)));
     20c:	b2 99       	sbic	0x16, 2	; 22
     20e:	fe cf       	rjmp	.-4      	; 0x20c <main+0x74>
     210:	2f ef       	ldi	r18, 0xFF	; 255
     212:	89 e6       	ldi	r24, 0x69	; 105
     214:	98 e1       	ldi	r25, 0x18	; 24
     216:	21 50       	subi	r18, 0x01	; 1
     218:	80 40       	sbci	r24, 0x00	; 0
     21a:	90 40       	sbci	r25, 0x00	; 0
     21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x7e>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x88>
     220:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~(1<<LED_GELB);
     222:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |= (1<<LED_GRUEN);
     224:	da 9a       	sbi	0x1b, 2	; 27
		
	/* Hauptprogramm */
	while(1)
    {		
		/* Regler ausfï¿½hren wenn das Sampleflag gesetzt wurde */
		if(sampleFlag)
     226:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <sampleFlag>
     22a:	88 23       	and	r24, r24
     22c:	e1 f3       	breq	.-8      	; 0x226 <main+0x8e>
		{					
			// Sampleflag zurï¿½cksetzen
			sampleFlag = 0;
     22e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <sampleFlag>
				
			if(activeController == MANUELLE_STEUERUNG) {
     232:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     236:	81 11       	cpse	r24, r1
     238:	03 c0       	rjmp	.+6      	; 0x240 <main+0xa8>
				/* Manual Control Mode */
				motor_manualCtrl();
     23a:	0e 94 37 02 	call	0x46e	; 0x46e <motor_manualCtrl>
     23e:	85 c0       	rjmp	.+266    	; 0x34a <main+0x1b2>
			} else if(activeController == BALANCIERREGLER) {
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	19 f4       	brne	.+6      	; 0x24a <main+0xb2>
				/* Balancierregler */
				reglerBalancieren_regelung();
     244:	0e 94 cb 00 	call	0x196	; 0x196 <reglerBalancieren_regelung>
     248:	80 c0       	rjmp	.+256    	; 0x34a <main+0x1b2>
			} else if(activeController == TRAJEKTORIENREGLER) {
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	79 f5       	brne	.+94     	; 0x2ac <main+0x114>
				/* Vorsteuerung und Regelung
					Bitte die zum jeweils benï¿½tigten Funktionen einkommentieren */
				float u1_B, u2_B, x1_B, x2_B, x3_B;
				reglerTrajektorienfolge_beobachter(&u1_B, &u2_B, &x1_B, &x2_B, &x3_B);
     24e:	8e 01       	movw	r16, r28
     250:	0f 5f       	subi	r16, 0xFF	; 255
     252:	1f 4f       	sbci	r17, 0xFF	; 255
     254:	9e 01       	movw	r18, r28
     256:	28 5f       	subi	r18, 0xF8	; 248
     258:	3f 4f       	sbci	r19, 0xFF	; 255
     25a:	ae 01       	movw	r20, r28
     25c:	44 5f       	subi	r20, 0xF4	; 244
     25e:	5f 4f       	sbci	r21, 0xFF	; 255
     260:	be 01       	movw	r22, r28
     262:	60 5f       	subi	r22, 0xF0	; 240
     264:	7f 4f       	sbci	r23, 0xFF	; 255
     266:	ce 01       	movw	r24, r28
     268:	44 96       	adiw	r24, 0x14	; 20
     26a:	0e 94 32 03 	call	0x664	; 0x664 <reglerTrajektorienfolge_beobachter>
				// reglerTrajektorienfolge_steuerung();
				reglerTrajektorienfolge_regelung(u1_B, u2_B, x1_B, x2_B, x3_B);
     26e:	a8 84       	ldd	r10, Y+8	; 0x08
     270:	b9 84       	ldd	r11, Y+9	; 0x09
     272:	ca 84       	ldd	r12, Y+10	; 0x0a
     274:	db 84       	ldd	r13, Y+11	; 0x0b
     276:	ec 84       	ldd	r14, Y+12	; 0x0c
     278:	fd 84       	ldd	r15, Y+13	; 0x0d
     27a:	0e 85       	ldd	r16, Y+14	; 0x0e
     27c:	1f 85       	ldd	r17, Y+15	; 0x0f
     27e:	28 89       	ldd	r18, Y+16	; 0x10
     280:	39 89       	ldd	r19, Y+17	; 0x11
     282:	4a 89       	ldd	r20, Y+18	; 0x12
     284:	5b 89       	ldd	r21, Y+19	; 0x13
     286:	6c 89       	ldd	r22, Y+20	; 0x14
     288:	7d 89       	ldd	r23, Y+21	; 0x15
     28a:	8e 89       	ldd	r24, Y+22	; 0x16
     28c:	9f 89       	ldd	r25, Y+23	; 0x17
     28e:	ec 81       	ldd	r30, Y+4	; 0x04
     290:	ef 93       	push	r30
     292:	eb 81       	ldd	r30, Y+3	; 0x03
     294:	ef 93       	push	r30
     296:	ea 81       	ldd	r30, Y+2	; 0x02
     298:	ef 93       	push	r30
     29a:	e9 81       	ldd	r30, Y+1	; 0x01
     29c:	ef 93       	push	r30
     29e:	0e 94 33 03 	call	0x666	; 0x666 <reglerTrajektorienfolge_regelung>
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	4f c0       	rjmp	.+158    	; 0x34a <main+0x1b2>
			} else if(activeController == TESTING) {
     2ac:	83 30       	cpi	r24, 0x03	; 3
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <main+0x11a>
     2b0:	4c c0       	rjmp	.+152    	; 0x34a <main+0x1b2>
				/* CODE START */
				motor_pwm (1, 0.5);
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	7f e3       	ldi	r23, 0x3F	; 63
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <motor_pwm>
     2c0:	2f ef       	ldi	r18, 0xFF	; 255
     2c2:	89 e6       	ldi	r24, 0x69	; 105
     2c4:	98 e1       	ldi	r25, 0x18	; 24
     2c6:	21 50       	subi	r18, 0x01	; 1
     2c8:	80 40       	sbci	r24, 0x00	; 0
     2ca:	90 40       	sbci	r25, 0x00	; 0
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x12e>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x138>
     2d0:	00 00       	nop
				_delay_ms(1000);
				motor_pwm (1, -0.2);
     2d2:	4d ec       	ldi	r20, 0xCD	; 205
     2d4:	5c ec       	ldi	r21, 0xCC	; 204
     2d6:	6c e4       	ldi	r22, 0x4C	; 76
     2d8:	7e eb       	ldi	r23, 0xBE	; 190
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <motor_pwm>
     2e0:	2f ef       	ldi	r18, 0xFF	; 255
     2e2:	89 e6       	ldi	r24, 0x69	; 105
     2e4:	98 e1       	ldi	r25, 0x18	; 24
     2e6:	21 50       	subi	r18, 0x01	; 1
     2e8:	80 40       	sbci	r24, 0x00	; 0
     2ea:	90 40       	sbci	r25, 0x00	; 0
     2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x14e>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x158>
     2f0:	00 00       	nop
				_delay_ms(1000);
				motor_pwm (1, 0);
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	ba 01       	movw	r22, r20
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <motor_pwm>
				motor_pwm (0, 1);
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	60 e8       	ldi	r22, 0x80	; 128
     304:	7f e3       	ldi	r23, 0x3F	; 63
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	0e 94 dd 01 	call	0x3ba	; 0x3ba <motor_pwm>
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	89 e6       	ldi	r24, 0x69	; 105
     310:	98 e1       	ldi	r25, 0x18	; 24
     312:	21 50       	subi	r18, 0x01	; 1
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <main+0x17a>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <main+0x184>
     31c:	00 00       	nop
				_delay_ms(1000);
				motor_pwm (0, -1);
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	60 e8       	ldi	r22, 0x80	; 128
     324:	7f eb       	ldi	r23, 0xBF	; 191
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 dd 01 	call	0x3ba	; 0x3ba <motor_pwm>
     32c:	2f ef       	ldi	r18, 0xFF	; 255
     32e:	89 e6       	ldi	r24, 0x69	; 105
     330:	98 e1       	ldi	r25, 0x18	; 24
     332:	21 50       	subi	r18, 0x01	; 1
     334:	80 40       	sbci	r24, 0x00	; 0
     336:	90 40       	sbci	r25, 0x00	; 0
     338:	e1 f7       	brne	.-8      	; 0x332 <main+0x19a>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x1a4>
     33c:	00 00       	nop
				_delay_ms(1000);
				motor_pwm (0, 0);
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	ba 01       	movw	r22, r20
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	0e 94 dd 01 	call	0x3ba	; 0x3ba <motor_pwm>
				/* CODE END */
			}
			
			/* Warnung bei Nichteinhalten der Samplezeit */
			if(sampleFlag) {
     34a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <sampleFlag>
     34e:	88 23       	and	r24, r24
     350:	09 f4       	brne	.+2      	; 0x354 <main+0x1bc>
     352:	69 cf       	rjmp	.-302    	; 0x226 <main+0x8e>
				char buff[7] = { 'm', 'i', 's', 's', '\r', '\n', '\0' };
     354:	87 e0       	ldi	r24, 0x07	; 7
     356:	e0 e6       	ldi	r30, 0x60	; 96
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	de 01       	movw	r26, r28
     35c:	11 96       	adiw	r26, 0x01	; 1
     35e:	01 90       	ld	r0, Z+
     360:	0d 92       	st	X+, r0
     362:	8a 95       	dec	r24
     364:	e1 f7       	brne	.-8      	; 0x35e <main+0x1c6>
				uart_puts((uint8_t*)buff);				
     366:	ce 01       	movw	r24, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	0e 94 83 05 	call	0xb06	; 0xb06 <uart_puts>
     36e:	5b cf       	rjmp	.-330    	; 0x226 <main+0x8e>

00000370 <__vector_10>:
		}
	}
}

/* Timer-Interrupt */
ISR(TIMER0_COMP_vect) {
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
	// Setzen der Sample-Flag
	sampleFlag = 1;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <sampleFlag>
	// Toggle der roten LED um sehen zu kï¿½nnen ob der Interrupt ausgefï¿½hrt wird
	PORTB ^= (1<<LED_GRUENB);
     384:	98 b3       	in	r25, 0x18	; 24
     386:	82 e0       	ldi	r24, 0x02	; 2
     388:	89 27       	eor	r24, r25
     38a:	88 bb       	out	0x18, r24	; 24
}
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <motor_init>:
	/* CODE END */
}

/* Routine zur Ansteuerung der Motoren mit Kennlinienkorrektur */
void motor_setVel(float vSollLinks, float vSollRechts)		// vSollLinks und vSollRechts in cm/s
{
     39a:	a7 9a       	sbi	0x14, 7	; 20
     39c:	a6 9a       	sbi	0x14, 6	; 20
     39e:	8d 9a       	sbi	0x11, 5	; 17
     3a0:	8c 9a       	sbi	0x11, 4	; 17
     3a2:	82 ea       	ldi	r24, 0xA2	; 162
     3a4:	8f bd       	out	0x2f, r24	; 47
     3a6:	88 e1       	ldi	r24, 0x18	; 24
     3a8:	8e bd       	out	0x2e, r24	; 46
     3aa:	8e b5       	in	r24, 0x2e	; 46
     3ac:	82 60       	ori	r24, 0x02	; 2
     3ae:	8e bd       	out	0x2e, r24	; 46
     3b0:	83 e6       	ldi	r24, 0x63	; 99
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	97 bd       	out	0x27, r25	; 39
     3b6:	86 bd       	out	0x26, r24	; 38
     3b8:	08 95       	ret

000003ba <motor_pwm>:

/* Routine zur Ansteuerung der Motoren per %DutyCycle 
	INPUT:  motorId -	Flag, welche das anzusteuerende Rad angibt
			pwm_duty -	Vorzeichenbehafteter Dutycycle (-1 voll zurï¿½ck, +1 voll vorwï¿½rts) */
void motor_pwm(uint8_t motorId, float pwm_duty)
{
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	6a 01       	movw	r12, r20
     3c4:	7b 01       	movw	r14, r22
angesprochen werden kÃ¶nnen. Das Argument sideId ist hierbei ein unsigned integer, der
die anzusprechende Seite identifiziert, z. B. 0 fÃ¼r links und 1 fÃ¼r rechts. Das Argument
pwm_duty gibt den kommandierten PWM-duty-cycle an und hat einen Wertebreich von
-1 (volle RÃ¼ckwÃ¤rtsfahrt) bis +1 (volle VorwÃ¤rtsfahrt).*/

	if(motorId == FLAG_L)
     3c6:	81 11       	cpse	r24, r1
     3c8:	26 c0       	rjmp	.+76     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		if(pwm_duty < 0)
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	a9 01       	movw	r20, r18
     3d0:	c7 01       	movw	r24, r14
     3d2:	b6 01       	movw	r22, r12
     3d4:	0e 94 81 06 	call	0xd02	; 0xd02 <__cmpsf2>
     3d8:	88 23       	and	r24, r24
     3da:	7c f4       	brge	.+30     	; 0x3fa <motor_pwm+0x40>
		{
			PORTC |= (1<<PC7); // Set the direction to backward
     3dc:	af 9a       	sbi	0x15, 7	; 21
			OCR1A = -pwm_duty*MAX_PWM; // Set the duty cycle
     3de:	c7 01       	movw	r24, r14
     3e0:	b6 01       	movw	r22, r12
     3e2:	90 58       	subi	r25, 0x80	; 128
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	46 ec       	ldi	r20, 0xC6	; 198
     3ea:	52 e4       	ldi	r21, 0x42	; 66
     3ec:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__mulsf3>
     3f0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fixunssfsi>
     3f4:	7b bd       	out	0x2b, r23	; 43
     3f6:	6a bd       	out	0x2a, r22	; 42
     3f8:	35 c0       	rjmp	.+106    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		}
		else
		{
			PORTC &= ~(1<<PC7); // Set the direction to forward
     3fa:	af 98       	cbi	0x15, 7	; 21
			OCR1A = pwm_duty*MAX_PWM; // Set the duty cycle
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	46 ec       	ldi	r20, 0xC6	; 198
     402:	52 e4       	ldi	r21, 0x42	; 66
     404:	c7 01       	movw	r24, r14
     406:	b6 01       	movw	r22, r12
     408:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__mulsf3>
     40c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fixunssfsi>
     410:	7b bd       	out	0x2b, r23	; 43
     412:	6a bd       	out	0x2a, r22	; 42
     414:	27 c0       	rjmp	.+78     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		}
	}
	else if(motorId == FLAG_R)
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	29 f5       	brne	.+74     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	{
		if(pwm_duty < 0)
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	a9 01       	movw	r20, r18
     420:	c7 01       	movw	r24, r14
     422:	b6 01       	movw	r22, r12
     424:	0e 94 81 06 	call	0xd02	; 0xd02 <__cmpsf2>
     428:	88 23       	and	r24, r24
     42a:	7c f4       	brge	.+30     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			PORTC |= (1<<PC6); // Set the direction to backward
     42c:	ae 9a       	sbi	0x15, 6	; 21
			OCR1B = -pwm_duty*MAX_PWM; // Set the duty cycle
     42e:	c7 01       	movw	r24, r14
     430:	b6 01       	movw	r22, r12
     432:	90 58       	subi	r25, 0x80	; 128
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	46 ec       	ldi	r20, 0xC6	; 198
     43a:	52 e4       	ldi	r21, 0x42	; 66
     43c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__mulsf3>
     440:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fixunssfsi>
     444:	79 bd       	out	0x29, r23	; 41
     446:	68 bd       	out	0x28, r22	; 40
     448:	0d c0       	rjmp	.+26     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		}
		else
		{
			PORTC &= ~(1<<PC6); // Set the direction to forward
     44a:	ae 98       	cbi	0x15, 6	; 21
			OCR1B = pwm_duty*MAX_PWM; // Set the duty cycle
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	46 ec       	ldi	r20, 0xC6	; 198
     452:	52 e4       	ldi	r21, 0x42	; 66
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__mulsf3>
     45c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fixunssfsi>
     460:	79 bd       	out	0x29, r23	; 41
     462:	68 bd       	out	0x28, r22	; 40
		}
	}
	/* CODE END */
}
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	08 95       	ret

0000046e <motor_manualCtrl>:
	/* CODE END */		
}

/* Routine zur manuellen Steuerung per UART */
void motor_manualCtrl(void) 
{
     46e:	4f 92       	push	r4
     470:	5f 92       	push	r5
     472:	6f 92       	push	r6
     474:	7f 92       	push	r7
     476:	8f 92       	push	r8
     478:	9f 92       	push	r9
     47a:	af 92       	push	r10
     47c:	bf 92       	push	r11
     47e:	cf 92       	push	r12
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	00 d0       	rcall	.+0      	; 0x48c <motor_manualCtrl+0x1e>
     48c:	00 d0       	rcall	.+0      	; 0x48e <motor_manualCtrl+0x20>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
	

	//uint8_t stop = 0;

	// werte Ã¼ber UART empfangen und in variable speichern
	uint8_t data = uart_getch();
     492:	0e 94 3d 05 	call	0xa7a	; 0xa7a <uart_getch>

	switch (data)
     496:	84 36       	cpi	r24, 0x64	; 100
     498:	69 f0       	breq	.+26     	; 0x4b4 <motor_manualCtrl+0x46>
     49a:	30 f4       	brcc	.+12     	; 0x4a8 <motor_manualCtrl+0x3a>
     49c:	80 32       	cpi	r24, 0x20	; 32
     49e:	09 f4       	brne	.+2      	; 0x4a2 <motor_manualCtrl+0x34>
     4a0:	65 c0       	rjmp	.+202    	; 0x56c <motor_manualCtrl+0xfe>
     4a2:	81 36       	cpi	r24, 0x61	; 97
     4a4:	f1 f0       	breq	.+60     	; 0x4e2 <motor_manualCtrl+0x74>
     4a6:	82 c0       	rjmp	.+260    	; 0x5ac <motor_manualCtrl+0x13e>
     4a8:	83 37       	cpi	r24, 0x73	; 115
     4aa:	09 f4       	brne	.+2      	; 0x4ae <motor_manualCtrl+0x40>
     4ac:	48 c0       	rjmp	.+144    	; 0x53e <motor_manualCtrl+0xd0>
     4ae:	87 37       	cpi	r24, 0x77	; 119
     4b0:	79 f1       	breq	.+94     	; 0x510 <motor_manualCtrl+0xa2>
     4b2:	7c c0       	rjmp	.+248    	; 0x5ac <motor_manualCtrl+0x13e>
	{
	case 'd':
		forward += 0.01;
     4b4:	2a e0       	ldi	r18, 0x0A	; 10
     4b6:	37 ed       	ldi	r19, 0xD7	; 215
     4b8:	43 e2       	ldi	r20, 0x23	; 35
     4ba:	5c e3       	ldi	r21, 0x3C	; 60
     4bc:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <forward>
     4c0:	70 91 bc 02 	lds	r23, 0x02BC	; 0x8002bc <forward+0x1>
     4c4:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <forward+0x2>
     4c8:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <forward+0x3>
     4cc:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3>
     4d0:	60 93 bb 02 	sts	0x02BB, r22	; 0x8002bb <forward>
     4d4:	70 93 bc 02 	sts	0x02BC, r23	; 0x8002bc <forward+0x1>
     4d8:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <forward+0x2>
     4dc:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <forward+0x3>
		break;
     4e0:	65 c0       	rjmp	.+202    	; 0x5ac <motor_manualCtrl+0x13e>
	case 'a':
		backward += 0.01;
     4e2:	2a e0       	ldi	r18, 0x0A	; 10
     4e4:	37 ed       	ldi	r19, 0xD7	; 215
     4e6:	43 e2       	ldi	r20, 0x23	; 35
     4e8:	5c e3       	ldi	r21, 0x3C	; 60
     4ea:	60 91 bf 02 	lds	r22, 0x02BF	; 0x8002bf <backward>
     4ee:	70 91 c0 02 	lds	r23, 0x02C0	; 0x8002c0 <backward+0x1>
     4f2:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <backward+0x2>
     4f6:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <backward+0x3>
     4fa:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3>
     4fe:	60 93 bf 02 	sts	0x02BF, r22	; 0x8002bf <backward>
     502:	70 93 c0 02 	sts	0x02C0, r23	; 0x8002c0 <backward+0x1>
     506:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <backward+0x2>
     50a:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <backward+0x3>
		break;
     50e:	4e c0       	rjmp	.+156    	; 0x5ac <motor_manualCtrl+0x13e>
	case 'w':
		left += 0.01;
     510:	2a e0       	ldi	r18, 0x0A	; 10
     512:	37 ed       	ldi	r19, 0xD7	; 215
     514:	43 e2       	ldi	r20, 0x23	; 35
     516:	5c e3       	ldi	r21, 0x3C	; 60
     518:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <left>
     51c:	70 91 b9 01 	lds	r23, 0x01B9	; 0x8001b9 <left+0x1>
     520:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <left+0x2>
     524:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <left+0x3>
     528:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3>
     52c:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <left>
     530:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <left+0x1>
     534:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <left+0x2>
     538:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <left+0x3>
		break;
     53c:	37 c0       	rjmp	.+110    	; 0x5ac <motor_manualCtrl+0x13e>
	case 's':
		right += 0.01;
     53e:	2a e0       	ldi	r18, 0x0A	; 10
     540:	37 ed       	ldi	r19, 0xD7	; 215
     542:	43 e2       	ldi	r20, 0x23	; 35
     544:	5c e3       	ldi	r21, 0x3C	; 60
     546:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <right>
     54a:	70 91 b5 00 	lds	r23, 0x00B5	; 0x8000b5 <right+0x1>
     54e:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <right+0x2>
     552:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <right+0x3>
     556:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3>
     55a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <right>
     55e:	70 93 b5 00 	sts	0x00B5, r23	; 0x8000b5 <right+0x1>
     562:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <right+0x2>
     566:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <right+0x3>
		break;
     56a:	20 c0       	rjmp	.+64     	; 0x5ac <motor_manualCtrl+0x13e>
	case ' ':
		forward = 0;
     56c:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <forward>
     570:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <forward+0x1>
     574:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <forward+0x2>
     578:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <forward+0x3>
		backward = 0;
     57c:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <backward>
     580:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <backward+0x1>
     584:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <backward+0x2>
     588:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <backward+0x3>
		left = 0;
     58c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <left>
     590:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <left+0x1>
     594:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <left+0x2>
     598:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <left+0x3>
		right = 0;
     59c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <right>
     5a0:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <right+0x1>
     5a4:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <right+0x2>
     5a8:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <right+0x3>
	default:
		break;
	}

	// Berechnung der PWM Werte
	pwm_duty_R = forward - backward + left - right;
     5ac:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <backward>
     5b0:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <backward+0x1>
     5b4:	40 91 c1 02 	lds	r20, 0x02C1	; 0x8002c1 <backward+0x2>
     5b8:	50 91 c2 02 	lds	r21, 0x02C2	; 0x8002c2 <backward+0x3>
     5bc:	60 91 bb 02 	lds	r22, 0x02BB	; 0x8002bb <forward>
     5c0:	70 91 bc 02 	lds	r23, 0x02BC	; 0x8002bc <forward+0x1>
     5c4:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <forward+0x2>
     5c8:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <forward+0x3>
     5cc:	0e 94 14 06 	call	0xc28	; 0xc28 <__subsf3>
     5d0:	4b 01       	movw	r8, r22
     5d2:	5c 01       	movw	r10, r24
     5d4:	40 90 b8 01 	lds	r4, 0x01B8	; 0x8001b8 <left>
     5d8:	50 90 b9 01 	lds	r5, 0x01B9	; 0x8001b9 <left+0x1>
     5dc:	60 90 ba 01 	lds	r6, 0x01BA	; 0x8001ba <left+0x2>
     5e0:	70 90 bb 01 	lds	r7, 0x01BB	; 0x8001bb <left+0x3>
     5e4:	c0 90 b4 00 	lds	r12, 0x00B4	; 0x8000b4 <right>
     5e8:	d0 90 b5 00 	lds	r13, 0x00B5	; 0x8000b5 <right+0x1>
     5ec:	e0 90 b6 00 	lds	r14, 0x00B6	; 0x8000b6 <right+0x2>
     5f0:	f0 90 b7 00 	lds	r15, 0x00B7	; 0x8000b7 <right+0x3>
     5f4:	a3 01       	movw	r20, r6
     5f6:	92 01       	movw	r18, r4
     5f8:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3>
     5fc:	a7 01       	movw	r20, r14
     5fe:	96 01       	movw	r18, r12
     600:	0e 94 14 06 	call	0xc28	; 0xc28 <__subsf3>
     604:	69 83       	std	Y+1, r22	; 0x01
     606:	7a 83       	std	Y+2, r23	; 0x02
     608:	8b 83       	std	Y+3, r24	; 0x03
     60a:	9c 83       	std	Y+4, r25	; 0x04
    //sprintf(buffer, "%f", pwm_duty_R);
    //uart_puts((uint8_t *)buffer);
    //uart_puts((uint8_t *)"\n\r"); // New line and carriage return

	// Werte an die Motoren Ã¼bergeben
	motor_pwm(FLAG_L, pwm_duty_L);
     60c:	a3 01       	movw	r20, r6
     60e:	92 01       	movw	r18, r4
     610:	c5 01       	movw	r24, r10
     612:	b4 01       	movw	r22, r8
     614:	0e 94 14 06 	call	0xc28	; 0xc28 <__subsf3>
     618:	a7 01       	movw	r20, r14
     61a:	96 01       	movw	r18, r12
     61c:	0e 94 15 06 	call	0xc2a	; 0xc2a <__addsf3>
     620:	ab 01       	movw	r20, r22
     622:	bc 01       	movw	r22, r24
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 dd 01 	call	0x3ba	; 0x3ba <motor_pwm>
	motor_pwm(FLAG_R, pwm_duty_R);
     62a:	49 81       	ldd	r20, Y+1	; 0x01
     62c:	5a 81       	ldd	r21, Y+2	; 0x02
     62e:	6b 81       	ldd	r22, Y+3	; 0x03
     630:	7c 81       	ldd	r23, Y+4	; 0x04
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 dd 01 	call	0x3ba	; 0x3ba <motor_pwm>

	/* CODE END */
}
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	5f 90       	pop	r5
     65a:	4f 90       	pop	r4
     65c:	08 95       	ret

0000065e <reglerTrajektorienfolge_init>:
	/* CODE END */
}

/*Ausführung der flachheitsbasierten Steuerung */
void reglerTrajektorienfolge_steuerung(void)
{
     65e:	0e 94 13 05 	call	0xa26	; 0xa26 <trajektorie_init>
     662:	08 95       	ret

00000664 <reglerTrajektorienfolge_beobachter>:
     664:	08 95       	ret

00000666 <reglerTrajektorienfolge_regelung>:
			u2_B - Beobachteter Eingang 2
			x1_B - Beobachteter Zustand 1
			X2_B - Beobachteter Zustand 2
			x3_B - Beobachteter Zustand 3 */
void reglerTrajektorienfolge_regelung(float u1_B, float u2_B, float x1_B, float x2_B, float x3_B)
{
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
	/* CODE START */
	/* CODE END */	
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <akku_init>:

/* Initialisierungsroutine für das Auslesen der Akkuspannung */
void akku_init()
{
	/* ADC auf Kannal ADC3 setzen und lediglich ADCH Register verwenden */
	ADMUX |= ((1<<MUX0) | (1<<MUX1) | (1<<ADLAR));
     674:	87 b1       	in	r24, 0x07	; 7
     676:	83 62       	ori	r24, 0x23	; 35
     678:	87 b9       	out	0x07, r24	; 7
	
	/* ADC aktivieren und Prescale auf 128 setzten */
	ADCSRA |= ((1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2));
     67a:	86 b1       	in	r24, 0x06	; 6
     67c:	87 68       	ori	r24, 0x87	; 135
     67e:	86 b9       	out	0x06, r24	; 6
	
	/* Erste ADC-Wandlung starten */
	ADCSRA |= (1<<ADSC);
     680:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     682:	36 99       	sbic	0x06, 6	; 6
     684:	fe cf       	rjmp	.-4      	; 0x682 <akku_init+0xe>
}
     686:	08 95       	ret

00000688 <akku_voltage>:

/* Routine zum  Abfragen der aktuellen Akkuspannung */
float akku_voltage()
{
	/* ADC auf Kannal ADC3 setzen und lediglich ADCH Register verwenden */
	ADMUX |= ((1<<MUX0) | (1<<MUX1) | (1<<ADLAR));
     688:	87 b1       	in	r24, 0x07	; 7
     68a:	83 62       	ori	r24, 0x23	; 35
     68c:	87 b9       	out	0x07, r24	; 7
	
	/* ADC-Wandlung starten */
	ADCSRA |= (1<<ADSC);
     68e:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     690:	36 99       	sbic	0x06, 6	; 6
     692:	fe cf       	rjmp	.-4      	; 0x690 <akku_voltage+0x8>
	uint8_t voltage8 = ADCH;
     694:	65 b1       	in	r22, 0x05	; 5
	
	/* Wandlungsergebnis vom ADC3 in einen Spannungswert umrechnen */
	return ((float)voltage8/255.0*SPANNUNGSTEILER*VREF);
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 27 07 	call	0xe4e	; 0xe4e <__floatunsisf>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	4f e7       	ldi	r20, 0x7F	; 127
     6a6:	53 e4       	ldi	r21, 0x43	; 67
     6a8:	0e 94 86 06 	call	0xd0c	; 0xd0c <__divsf3>
     6ac:	28 e4       	ldi	r18, 0x48	; 72
     6ae:	31 ee       	ldi	r19, 0xE1	; 225
     6b0:	42 e1       	ldi	r20, 0x12	; 18
     6b2:	51 e4       	ldi	r21, 0x41	; 65
     6b4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__mulsf3>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e5       	ldi	r20, 0x50	; 80
     6be:	50 e4       	ldi	r21, 0x40	; 64
     6c0:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__mulsf3>
}
     6c4:	08 95       	ret

000006c6 <akku_check>:

/* Routine zur Überpüfung, ob die Akkuspannung nicht unterhalb des kritischen Wertes liegt */
void akku_check()
{
     6c6:	9f 92       	push	r9
     6c8:	af 92       	push	r10
     6ca:	bf 92       	push	r11
     6cc:	cf 92       	push	r12
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	6e 97       	sbiw	r28, 0x1e	; 30
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
	/* Wenn der Akku leer ist wird in eine Endlosschleife gesprungen,
	 so dass das User-Programm nicht gestartet wird */
		
	/* Abfragen der aktuellen Akkuspannung */
	float voltage = akku_voltage();
     6ec:	0e 94 44 03 	call	0x688	; 0x688 <akku_voltage>
     6f0:	d6 2e       	mov	r13, r22
     6f2:	c7 2e       	mov	r12, r23
     6f4:	b8 2e       	mov	r11, r24
     6f6:	a9 2e       	mov	r10, r25
	
	/* Überprüfen ob die aktuelle Akkuspannung innerhalb des zulässigen Bereichs ist */
	if (voltage < V_LOW)
     6f8:	26 e6       	ldi	r18, 0x66	; 102
     6fa:	36 e6       	ldi	r19, 0x66	; 102
     6fc:	46 ee       	ldi	r20, 0xE6	; 230
     6fe:	50 e4       	ldi	r21, 0x40	; 64
     700:	0e 94 81 06 	call	0xd02	; 0xd02 <__cmpsf2>
     704:	88 23       	and	r24, r24
     706:	0c f0       	brlt	.+2      	; 0x70a <akku_check+0x44>
     708:	41 c0       	rjmp	.+130    	; 0x78c <akku_check+0xc6>
	{
		sei();	// Sei() einschalten, um eine Meldung per UART versenden zu können
     70a:	78 94       	sei
		
		char send[30] = ""; // Char-Buffer von 30 Zeichen für Meldung
     70c:	1a 82       	std	Y+2, r1	; 0x02
     70e:	19 82       	std	Y+1, r1	; 0x01
     710:	fe 01       	movw	r30, r28
     712:	33 96       	adiw	r30, 0x03	; 3
     714:	8c e1       	ldi	r24, 0x1C	; 28
     716:	df 01       	movw	r26, r30
     718:	1d 92       	st	X+, r1
     71a:	8a 95       	dec	r24
     71c:	e9 f7       	brne	.-6      	; 0x718 <akku_check+0x52>
		
		/* Endlosschleife mit Warnung --> Akku leer --> gelbe LED Blinkt*/
		while (1)
		{
			/* Warnmeldung verschicken */
			sprintf(send, "Akku leer! U_Akku = %.1fV \n\r", voltage);
     71e:	0f 2e       	mov	r0, r31
     720:	f1 e8       	ldi	r31, 0x81	; 129
     722:	ef 2e       	mov	r14, r31
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	ff 2e       	mov	r15, r31
     728:	f0 2d       	mov	r31, r0
     72a:	8e 01       	movw	r16, r28
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_puts((uint8_t*)send);
			
			/* gelbe LED an PA1 blinken lassen */
			PORTA ^= (1<<PA1);
     730:	68 94       	set
     732:	99 24       	eor	r9, r9
     734:	91 f8       	bld	r9, 1
		
		/* Endlosschleife mit Warnung --> Akku leer --> gelbe LED Blinkt*/
		while (1)
		{
			/* Warnmeldung verschicken */
			sprintf(send, "Akku leer! U_Akku = %.1fV \n\r", voltage);
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ff 92       	push	r15
     740:	ef 92       	push	r14
     742:	1f 93       	push	r17
     744:	0f 93       	push	r16
     746:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <sprintf>
			uart_puts((uint8_t*)send);
     74a:	c8 01       	movw	r24, r16
     74c:	0e 94 83 05 	call	0xb06	; 0xb06 <uart_puts>
			
			/* gelbe LED an PA1 blinken lassen */
			PORTA ^= (1<<PA1);
     750:	8b b3       	in	r24, 0x1b	; 27
     752:	89 25       	eor	r24, r9
     754:	8b bb       	out	0x1b, r24	; 27
     756:	bf ef       	ldi	r27, 0xFF	; 255
     758:	29 e6       	ldi	r18, 0x69	; 105
     75a:	88 e1       	ldi	r24, 0x18	; 24
     75c:	b1 50       	subi	r27, 0x01	; 1
     75e:	20 40       	sbci	r18, 0x00	; 0
     760:	80 40       	sbci	r24, 0x00	; 0
     762:	e1 f7       	brne	.-8      	; 0x75c <akku_check+0x96>
     764:	00 c0       	rjmp	.+0      	; 0x766 <akku_check+0xa0>
     766:	00 00       	nop
			_delay_ms(1000);
			PORTA ^= (1<<PA1);
     768:	8b b3       	in	r24, 0x1b	; 27
     76a:	89 25       	eor	r24, r9
     76c:	8b bb       	out	0x1b, r24	; 27
     76e:	9f ef       	ldi	r25, 0xFF	; 255
     770:	a9 e6       	ldi	r26, 0x69	; 105
     772:	b8 e1       	ldi	r27, 0x18	; 24
     774:	91 50       	subi	r25, 0x01	; 1
     776:	a0 40       	sbci	r26, 0x00	; 0
     778:	b0 40       	sbci	r27, 0x00	; 0
     77a:	e1 f7       	brne	.-8      	; 0x774 <akku_check+0xae>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <akku_check+0xb8>
     77e:	00 00       	nop
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	d5 cf       	rjmp	.-86     	; 0x736 <akku_check+0x70>
			_delay_ms(1000);
		}
	}
     78c:	6e 96       	adiw	r28, 0x1e	; 30
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	08 95       	ret

000007b0 <gyro_sendStop>:
}

/* Stelle die Stopkondition her */
void gyro_sendStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     7b0:	84 e9       	ldi	r24, 0x94	; 148
     7b2:	86 bf       	out	0x36, r24	; 54
	/* Warten */
	while(TWCR & (1<<TWSTO));
     7b4:	06 b6       	in	r0, 0x36	; 54
     7b6:	04 fc       	sbrc	r0, 4
     7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <gyro_sendStop+0x4>
}
     7ba:	08 95       	ret

000007bc <gyro_sendStart>:
{
	/* RW_bit = 0: Write Master -> Slave
	* RW_bit = 1: Read  Master <- Slave
	*/
		/* Sende Start-Kondition */
		TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     7bc:	94 ea       	ldi	r25, 0xA4	; 164
     7be:	96 bf       	out	0x36, r25	; 54
		
		/* Warten bis das TWINT Flag gesetzt wurde, dies zeigt, dass der "START" verschickt wurde. */
		while (!(TWCR & (1<<TWINT)));
     7c0:	06 b6       	in	r0, 0x36	; 54
     7c2:	07 fe       	sbrs	r0, 7
     7c4:	fd cf       	rjmp	.-6      	; 0x7c0 <gyro_sendStart+0x4>
		
		/* Sende Adresse + WRITE bit = 0 */
		TWDR = ITG_I2C_ADR<<1|RW_bit;
     7c6:	80 6d       	ori	r24, 0xD0	; 208
     7c8:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
     7ca:	84 e8       	ldi	r24, 0x84	; 132
     7cc:	86 bf       	out	0x36, r24	; 54
		
		/* Warten auf Acknowledge */
		while (!(TWCR & (1<<TWINT)));
     7ce:	06 b6       	in	r0, 0x36	; 54
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <gyro_sendStart+0x12>
}
     7d4:	08 95       	ret

000007d6 <gyro_write>:
	gyro_calibrate();
}

/* Routine um ein Datenbyte über I2C in ein Sensorregister zu schreiben */
void gyro_write(uint8_t Register, uint8_t data)
{
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	d8 2f       	mov	r29, r24
     7dc:	c6 2f       	mov	r28, r22
	/* Sende Start-Kondition (Datenrichtung Master->Slave) */
	gyro_sendStart(0);
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0e 94 de 03 	call	0x7bc	; 0x7bc <gyro_sendStart>
	
	/* Sende Addresse des Registers */
	TWDR = Register;
     7e4:	d3 b9       	out	0x03, r29	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	
     7e6:	84 e8       	ldi	r24, 0x84	; 132
     7e8:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     7ea:	06 b6       	in	r0, 0x36	; 54
     7ec:	07 fe       	sbrs	r0, 7
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <gyro_write+0x14>
		
	/* Sende die Daten */
	TWDR = data;
     7f0:	c3 b9       	out	0x03, r28	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	
     7f2:	84 e8       	ldi	r24, 0x84	; 132
     7f4:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     7f6:	06 b6       	in	r0, 0x36	; 54
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <gyro_write+0x20>
	
	/* Sende Stop-Kondition */
	gyro_sendStop();
     7fc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <gyro_sendStop>
	
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <gyro_read>:

/* Routine zum Auslesen von n-Datenbytes aus einem Sensorregister */
void gyro_read(uint8_t Register, uint8_t *data, uint8_t n_bytes)
{	
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	08 2f       	mov	r16, r24
     810:	16 2f       	mov	r17, r22
     812:	d7 2f       	mov	r29, r23
     814:	c4 2f       	mov	r28, r20
	/* Sende Start-Kondition (Datenrichtung Master->Slave) */
	gyro_sendStart(0);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 de 03 	call	0x7bc	; 0x7bc <gyro_sendStart>
	
	/* Sende Addresse des Registers */
	TWDR = Register;
     81c:	03 b9       	out	0x03, r16	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     81e:	84 e8       	ldi	r24, 0x84	; 132
     820:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     822:	06 b6       	in	r0, 0x36	; 54
     824:	07 fe       	sbrs	r0, 7
     826:	fd cf       	rjmp	.-6      	; 0x822 <gyro_read+0x1c>
	
	/* Sende Start-Kondition (Datenrichtung Slave->Master) */
	gyro_sendStart(1);
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	0e 94 de 03 	call	0x7bc	; 0x7bc <gyro_sendStart>
	
	/* Lese die Daten */
	for(int16_t i=0;i<n_bytes;i++)
     82e:	4c 2f       	mov	r20, r28
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	14 16       	cp	r1, r20
     834:	15 06       	cpc	r1, r21
     836:	cc f4       	brge	.+50     	; 0x86a <__stack+0xb>
     838:	e1 2f       	mov	r30, r17
     83a:	fd 2f       	mov	r31, r29
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
	{
		/* Sende Acknowledge an den Gyro */
		TWCR = (1<<TWINT)|(1<<TWEN)|((i==n_bytes-1) ? 0 : (1<<TWEA));
     840:	ba 01       	movw	r22, r20
     842:	61 50       	subi	r22, 0x01	; 1
     844:	71 09       	sbc	r23, r1
     846:	a4 e8       	ldi	r26, 0x84	; 132
     848:	34 ec       	ldi	r19, 0xC4	; 196
     84a:	68 17       	cp	r22, r24
     84c:	79 07       	cpc	r23, r25
     84e:	11 f0       	breq	.+4      	; 0x854 <gyro_read+0x4e>
     850:	23 2f       	mov	r18, r19
     852:	01 c0       	rjmp	.+2      	; 0x856 <gyro_read+0x50>
     854:	2a 2f       	mov	r18, r26
     856:	26 bf       	out	0x36, r18	; 54
		/* Warte bis die Übertragung komplett ist */
		while (!(TWCR & (1<<TWINT)));
     858:	06 b6       	in	r0, 0x36	; 54
     85a:	07 fe       	sbrs	r0, 7
     85c:	fd cf       	rjmp	.-6      	; 0x858 <gyro_read+0x52>
		data[i] = TWDR;
     85e:	23 b1       	in	r18, 0x03	; 3
     860:	21 93       	st	Z+, r18
	
	/* Sende Start-Kondition (Datenrichtung Slave->Master) */
	gyro_sendStart(1);
	
	/* Lese die Daten */
	for(int16_t i=0;i<n_bytes;i++)
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	84 17       	cp	r24, r20
     866:	95 07       	cpc	r25, r21
     868:	81 f7       	brne	.-32     	; 0x84a <gyro_read+0x44>
		while (!(TWCR & (1<<TWINT)));
		data[i] = TWDR;
	}
	
	/* Sende Stop-Kondition */
	gyro_sendStop();
     86a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <gyro_sendStop>
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <gyro_getData>:
		while (!(TWCR & (1<<TWINT)));
}

/* Routine zum Auslesen der Drehratendaten aus dem Gyro */
void gyro_getData(int16_t *pGyroData)
{
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <gyro_getData+0xa>
     882:	00 d0       	rcall	.+0      	; 0x884 <gyro_getData+0xc>
     884:	00 d0       	rcall	.+0      	; 0x886 <gyro_getData+0xe>
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	8c 01       	movw	r16, r24
	uint8_t Buffer[6];	// Buffer zum Einlesen der Daten
	gyro_read(29, Buffer, 6);	// Daten über I2C einlesen
     88c:	46 e0       	ldi	r20, 0x06	; 6
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	8d e1       	ldi	r24, 0x1D	; 29
     896:	0e 94 03 04 	call	0x806	; 0x806 <gyro_read>

	pGyroData[0] = ((int)((Buffer[0]<<8) | Buffer[1]) - gyroOffset[0]); // Datensatz für für die x-Achse
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	98 2f       	mov	r25, r24
     8a0:	88 27       	eor	r24, r24
     8a2:	2a 81       	ldd	r18, Y+2	; 0x02
     8a4:	82 2b       	or	r24, r18
     8a6:	ec ea       	ldi	r30, 0xAC	; 172
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	20 81       	ld	r18, Z
     8ac:	31 81       	ldd	r19, Z+1	; 0x01
     8ae:	82 1b       	sub	r24, r18
     8b0:	93 0b       	sbc	r25, r19
     8b2:	d8 01       	movw	r26, r16
     8b4:	11 96       	adiw	r26, 0x01	; 1
     8b6:	9c 93       	st	X, r25
     8b8:	8e 93       	st	-X, r24
	pGyroData[1] = ((int)((Buffer[2]<<8) | Buffer[3]) - gyroOffset[1]); // Datensatz für für die y-Achse
     8ba:	8b 81       	ldd	r24, Y+3	; 0x03
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	98 2f       	mov	r25, r24
     8c0:	88 27       	eor	r24, r24
     8c2:	2c 81       	ldd	r18, Y+4	; 0x04
     8c4:	82 2b       	or	r24, r18
     8c6:	22 81       	ldd	r18, Z+2	; 0x02
     8c8:	33 81       	ldd	r19, Z+3	; 0x03
     8ca:	82 1b       	sub	r24, r18
     8cc:	93 0b       	sbc	r25, r19
     8ce:	13 96       	adiw	r26, 0x03	; 3
     8d0:	9c 93       	st	X, r25
     8d2:	8e 93       	st	-X, r24
     8d4:	12 97       	sbiw	r26, 0x02	; 2
	pGyroData[2] = ((int)((Buffer[4]<<8) | Buffer[5]) - gyroOffset[2]); // Datensatz für für die z-Achse
     8d6:	8d 81       	ldd	r24, Y+5	; 0x05
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	98 2f       	mov	r25, r24
     8dc:	88 27       	eor	r24, r24
     8de:	2e 81       	ldd	r18, Y+6	; 0x06
     8e0:	82 2b       	or	r24, r18
     8e2:	24 81       	ldd	r18, Z+4	; 0x04
     8e4:	35 81       	ldd	r19, Z+5	; 0x05
     8e6:	82 1b       	sub	r24, r18
     8e8:	93 0b       	sbc	r25, r19
     8ea:	15 96       	adiw	r26, 0x05	; 5
     8ec:	9c 93       	st	X, r25
     8ee:	8e 93       	st	-X, r24
     8f0:	14 97       	sbiw	r26, 0x04	; 4
}
     8f2:	26 96       	adiw	r28, 0x06	; 6
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <gyro_calibrate>:

/* Routine zum Kalibrieren des Gyro (Bestimmung der Drehratenoffsets der Achsen) */
void gyro_calibrate(void)
{	
     908:	4f 92       	push	r4
     90a:	5f 92       	push	r5
     90c:	6f 92       	push	r6
     90e:	7f 92       	push	r7
     910:	8f 92       	push	r8
     912:	9f 92       	push	r9
     914:	af 92       	push	r10
     916:	bf 92       	push	r11
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	00 d0       	rcall	.+0      	; 0x92a <gyro_calibrate+0x22>
     92a:	00 d0       	rcall	.+0      	; 0x92c <gyro_calibrate+0x24>
     92c:	00 d0       	rcall	.+0      	; 0x92e <gyro_calibrate+0x26>
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	00 e4       	ldi	r16, 0x40	; 64
     934:	10 e0       	ldi	r17, 0x00	; 0
	int16_t i = 0;	// Schleifenzähler
	int16_t gyroData[3];	// Buffervariablen für die Drehraten
	int32_t x=0,y=0,z=0;	// Hilfsvariablen zur Offsetberechnung
     936:	c1 2c       	mov	r12, r1
     938:	d1 2c       	mov	r13, r1
     93a:	76 01       	movw	r14, r12
     93c:	81 2c       	mov	r8, r1
     93e:	91 2c       	mov	r9, r1
     940:	54 01       	movw	r10, r8
     942:	41 2c       	mov	r4, r1
     944:	51 2c       	mov	r5, r1
     946:	32 01       	movw	r6, r4

	/* Auslesen von 64 Datensätzen aus dem Gyro */
	for (i = 0; i < 64; i++)
	{
		gyro_getData(gyroData);
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	0e 94 3c 04 	call	0x878	; 0x878 <gyro_getData>
		x += gyroData[0];
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	09 2e       	mov	r0, r25
     956:	00 0c       	add	r0, r0
     958:	aa 0b       	sbc	r26, r26
     95a:	bb 0b       	sbc	r27, r27
     95c:	48 0e       	add	r4, r24
     95e:	59 1e       	adc	r5, r25
     960:	6a 1e       	adc	r6, r26
     962:	7b 1e       	adc	r7, r27
		y += gyroData[1];
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	9c 81       	ldd	r25, Y+4	; 0x04
     968:	09 2e       	mov	r0, r25
     96a:	00 0c       	add	r0, r0
     96c:	aa 0b       	sbc	r26, r26
     96e:	bb 0b       	sbc	r27, r27
     970:	88 0e       	add	r8, r24
     972:	99 1e       	adc	r9, r25
     974:	aa 1e       	adc	r10, r26
     976:	bb 1e       	adc	r11, r27
		z += gyroData[2];
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	9e 81       	ldd	r25, Y+6	; 0x06
     97c:	09 2e       	mov	r0, r25
     97e:	00 0c       	add	r0, r0
     980:	aa 0b       	sbc	r26, r26
     982:	bb 0b       	sbc	r27, r27
     984:	c8 0e       	add	r12, r24
     986:	d9 1e       	adc	r13, r25
     988:	ea 1e       	adc	r14, r26
     98a:	fb 1e       	adc	r15, r27
     98c:	8f e1       	ldi	r24, 0x1F	; 31
     98e:	9e e4       	ldi	r25, 0x4E	; 78
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	f1 f7       	brne	.-4      	; 0x990 <gyro_calibrate+0x88>
     994:	00 c0       	rjmp	.+0      	; 0x996 <gyro_calibrate+0x8e>
     996:	00 00       	nop
     998:	01 50       	subi	r16, 0x01	; 1
     99a:	11 09       	sbc	r17, r1
	int16_t i = 0;	// Schleifenzähler
	int16_t gyroData[3];	// Buffervariablen für die Drehraten
	int32_t x=0,y=0,z=0;	// Hilfsvariablen zur Offsetberechnung

	/* Auslesen von 64 Datensätzen aus dem Gyro */
	for (i = 0; i < 64; i++)
     99c:	a9 f6       	brne	.-86     	; 0x948 <gyro_calibrate+0x40>
		z += gyroData[2];
		_delay_ms(10);
	}
	
	/* Berechnung des Offsets (Summe / 64) */
	gyroOffset[0] = x >> 6;
     99e:	ec ea       	ldi	r30, 0xAC	; 172
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	68 94       	set
     9a4:	15 f8       	bld	r1, 5
     9a6:	75 94       	asr	r7
     9a8:	67 94       	ror	r6
     9aa:	57 94       	ror	r5
     9ac:	47 94       	ror	r4
     9ae:	16 94       	lsr	r1
     9b0:	d1 f7       	brne	.-12     	; 0x9a6 <gyro_calibrate+0x9e>
     9b2:	51 82       	std	Z+1, r5	; 0x01
     9b4:	40 82       	st	Z, r4
	gyroOffset[1] = y >> 6;
     9b6:	68 94       	set
     9b8:	15 f8       	bld	r1, 5
     9ba:	b5 94       	asr	r11
     9bc:	a7 94       	ror	r10
     9be:	97 94       	ror	r9
     9c0:	87 94       	ror	r8
     9c2:	16 94       	lsr	r1
     9c4:	d1 f7       	brne	.-12     	; 0x9ba <gyro_calibrate+0xb2>
     9c6:	93 82       	std	Z+3, r9	; 0x03
     9c8:	82 82       	std	Z+2, r8	; 0x02
	gyroOffset[2] = z >> 6;
     9ca:	68 94       	set
     9cc:	15 f8       	bld	r1, 5
     9ce:	f5 94       	asr	r15
     9d0:	e7 94       	ror	r14
     9d2:	d7 94       	ror	r13
     9d4:	c7 94       	ror	r12
     9d6:	16 94       	lsr	r1
     9d8:	d1 f7       	brne	.-12     	; 0x9ce <gyro_calibrate+0xc6>
     9da:	d5 82       	std	Z+5, r13	; 0x05
     9dc:	c4 82       	std	Z+4, r12	; 0x04
     9de:	26 96       	adiw	r28, 0x06	; 6
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	bf 90       	pop	r11
     9fc:	af 90       	pop	r10
     9fe:	9f 90       	pop	r9
     a00:	8f 90       	pop	r8
     a02:	7f 90       	pop	r7
     a04:	6f 90       	pop	r6
     a06:	5f 90       	pop	r5
     a08:	4f 90       	pop	r4
     a0a:	08 95       	ret

00000a0c <gyro_init>:

/* Routine zum Initialisieren des Gyros */
void gyro_init(void)
{
	/* Konfiguriere den Gyro */
	TWBR = ((F_CPU/I2C_SPEED) - 16)/2;	// I2C-Register konfigureren
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	80 b9       	out	0x00, r24	; 0
	
	gyro_write(21, 0);				// 1kHz interne Abtastung des Analoggyros
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	85 e1       	ldi	r24, 0x15	; 21
     a14:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <gyro_write>
	gyro_write(22, 0b00010011);		// no sync, 1000 deg/s, 42 Hz Lowpass
     a18:	63 e1       	ldi	r22, 0x13	; 19
     a1a:	86 e1       	ldi	r24, 0x16	; 22
     a1c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <gyro_write>
	
	/* Kalibriere den Gyro (setzt den Gyro-Offset) */
	gyro_calibrate();
     a20:	0e 94 84 04 	call	0x908	; 0x908 <gyro_calibrate>
     a24:	08 95       	ret

00000a26 <trajektorie_init>:

/* Initialisierungsfunktion für die Solltrajektorienfunktion */
void trajektorie_init()
{
	// Länge der Trajektorie ermitteln
	traj_laenge = sizeof(dy1_dt) / sizeof(dy1_dt[0]);
     a26:	8f e7       	ldi	r24, 0x7F	; 127
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <traj_laenge+0x1>
     a2e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <traj_laenge>
	
	// Initialisierung d.h. zuerst Beschleunigungsphase starten
	beschleunigungsphase=1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <beschleunigungsphase+0x1>
     a3a:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <beschleunigungsphase>
	// Trajektorenzähler = 0
	i_trj=0;
     a3e:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <i_trj+0x1>
     a42:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <i_trj>
     a46:	08 95       	ret

00000a48 <uart_init>:
}

void uart_flush()
{
	uart_inbufpos=0;
	uart_inbufeval=0;
     a48:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <uart_outbufpos>
     a4c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <uart_outbufeval>
     a50:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <uart_inbufpos>
     a54:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <uart_inbufeval>
     a58:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <reset_pos>
     a5c:	80 b5       	in	r24, 0x20	; 32
     a5e:	8f 77       	andi	r24, 0x7F	; 127
     a60:	80 bd       	out	0x20, r24	; 32
     a62:	10 bc       	out	0x20, r1	; 32
     a64:	8c e0       	ldi	r24, 0x0C	; 12
     a66:	89 b9       	out	0x09, r24	; 9
     a68:	59 98       	cbi	0x0b, 1	; 11
     a6a:	80 b5       	in	r24, 0x20	; 32
     a6c:	80 68       	ori	r24, 0x80	; 128
     a6e:	80 bd       	out	0x20, r24	; 32
     a70:	86 e8       	ldi	r24, 0x86	; 134
     a72:	80 bd       	out	0x20, r24	; 32
     a74:	88 ed       	ldi	r24, 0xD8	; 216
     a76:	8a b9       	out	0x0a, r24	; 10
     a78:	08 95       	ret

00000a7a <uart_getch>:
     a7a:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <uart_inbufpos>
     a7e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <uart_inbufeval>
     a82:	98 17       	cp	r25, r24
     a84:	89 f0       	breq	.+34     	; 0xaa8 <uart_getch+0x2e>
     a86:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <uart_inbufeval>
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	8e 0f       	add	r24, r30
     a8e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <uart_inbufeval>
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	e4 54       	subi	r30, 0x44	; 68
     a96:	fe 4f       	sbci	r31, 0xFE	; 254
     a98:	80 81       	ld	r24, Z
     a9a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <uart_inbufeval>
     a9e:	9f 3f       	cpi	r25, 0xFF	; 255
     aa0:	21 f4       	brne	.+8      	; 0xaaa <uart_getch+0x30>
     aa2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <uart_inbufeval>
     aa6:	08 95       	ret
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	08 95       	ret

00000aac <uart_send>:
     aac:	5d 9b       	sbis	0x0b, 5	; 11
     aae:	17 c0       	rjmp	.+46     	; 0xade <uart_send+0x32>
     ab0:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <uart_outbufpos>
     ab4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uart_outbufeval>
     ab8:	98 17       	cp	r25, r24
     aba:	89 f0       	breq	.+34     	; 0xade <uart_send+0x32>
     abc:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <uart_outbufeval>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	8e 0f       	add	r24, r30
     ac4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <uart_outbufeval>
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	e8 54       	subi	r30, 0x48	; 72
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	80 81       	ld	r24, Z
     ad0:	8c b9       	out	0x0c, r24	; 12
     ad2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <uart_outbufeval>
     ad6:	8f 3f       	cpi	r24, 0xFF	; 255
     ad8:	11 f4       	brne	.+4      	; 0xade <uart_send+0x32>
     ada:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <uart_outbufeval>
     ade:	08 95       	ret

00000ae0 <uart_putch>:
     ae0:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <uart_outbufpos>
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	9e 0f       	add	r25, r30
     ae8:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <uart_outbufpos>
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	e8 54       	subi	r30, 0x48	; 72
     af0:	ff 4f       	sbci	r31, 0xFF	; 255
     af2:	80 83       	st	Z, r24
     af4:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <uart_outbufpos>
     af8:	8f 3f       	cpi	r24, 0xFF	; 255
     afa:	11 f4       	brne	.+4      	; 0xb00 <uart_putch+0x20>
     afc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <uart_outbufpos>
     b00:	0e 94 56 05 	call	0xaac	; 0xaac <uart_send>
     b04:	08 95       	ret

00000b06 <uart_puts>:
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	ec 01       	movw	r28, r24
     b0c:	88 81       	ld	r24, Y
     b0e:	88 23       	and	r24, r24
     b10:	31 f0       	breq	.+12     	; 0xb1e <uart_puts+0x18>
     b12:	21 96       	adiw	r28, 0x01	; 1
     b14:	0e 94 70 05 	call	0xae0	; 0xae0 <uart_putch>
     b18:	89 91       	ld	r24, Y+
     b1a:	81 11       	cpse	r24, r1
     b1c:	fb cf       	rjmp	.-10     	; 0xb14 <uart_puts+0xe>
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <uart_receive>:
     b24:	9c b1       	in	r25, 0x0c	; 12
     b26:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <uart_inbufpos>
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	8e 0f       	add	r24, r30
     b2e:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <uart_inbufpos>
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	e4 54       	subi	r30, 0x44	; 68
     b36:	fe 4f       	sbci	r31, 0xFE	; 254
     b38:	90 83       	st	Z, r25
     b3a:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <uart_inbufpos>
     b3e:	8f 3f       	cpi	r24, 0xFF	; 255
     b40:	11 f4       	brne	.+4      	; 0xb46 <uart_receive+0x22>
     b42:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <uart_inbufpos>
     b46:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <reset_pos>
     b4a:	e8 2f       	mov	r30, r24
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	e2 56       	subi	r30, 0x62	; 98
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	20 81       	ld	r18, Z
     b54:	92 13       	cpse	r25, r18
     b56:	11 c0       	rjmp	.+34     	; 0xb7a <uart_receive+0x56>
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <reset_pos>
     b5e:	8a 30       	cpi	r24, 0x0A	; 10
     b60:	71 f4       	brne	.+28     	; 0xb7e <uart_receive+0x5a>
     b62:	83 e6       	ldi	r24, 0x63	; 99
     b64:	0e 94 70 05 	call	0xae0	; 0xae0 <uart_putch>
     b68:	99 e0       	ldi	r25, 0x09	; 9
     b6a:	88 e1       	ldi	r24, 0x18	; 24
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	a8 95       	wdr
     b72:	81 bd       	out	0x21, r24	; 33
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	91 bd       	out	0x21, r25	; 33
     b78:	ff cf       	rjmp	.-2      	; 0xb78 <uart_receive+0x54>
     b7a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <reset_pos>
     b7e:	08 95       	ret

00000b80 <__vector_15>:
}


ISR(USART_TXC_vect)
{
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
	// character has been sent. see if there is more data in buffer
	uart_send();
     ba2:	0e 94 56 05 	call	0xaac	; 0xaac <uart_send>
}
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	bf 91       	pop	r27
     bac:	af 91       	pop	r26
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	7f 91       	pop	r23
     bb4:	6f 91       	pop	r22
     bb6:	5f 91       	pop	r21
     bb8:	4f 91       	pop	r20
     bba:	3f 91       	pop	r19
     bbc:	2f 91       	pop	r18
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	0f 90       	pop	r0
     bc4:	1f 90       	pop	r1
     bc6:	18 95       	reti

00000bc8 <__vector_13>:

ISR(USART_RXC_vect)
{
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
	// character received by uart. load it to buffer
	uart_receive();
     bea:	0e 94 92 05 	call	0xb24	; 0xb24 <uart_receive>
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	0f 90       	pop	r0
     c0c:	1f 90       	pop	r1
     c0e:	18 95       	reti

00000c10 <spi_init>:

/* Sende Daten an den aktuell aktiven Slave und lese mepfangene Daten sofort aus */
uint8_t spi_sendAndRead(uint8_t data) {
	/* CODE START */
	/* CODE END */
}
     c10:	08 95       	ret

00000c12 <qdec_init>:
     c12:	08 95       	ret

00000c14 <acc_init>:
     c14:	2f ef       	ldi	r18, 0xFF	; 255
     c16:	80 e7       	ldi	r24, 0x70	; 112
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	21 50       	subi	r18, 0x01	; 1
     c1c:	80 40       	sbci	r24, 0x00	; 0
     c1e:	90 40       	sbci	r25, 0x00	; 0
     c20:	e1 f7       	brne	.-8      	; 0xc1a <acc_init+0x6>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <acc_init+0x10>
     c24:	00 00       	nop
     c26:	08 95       	ret

00000c28 <__subsf3>:
     c28:	50 58       	subi	r21, 0x80	; 128

00000c2a <__addsf3>:
     c2a:	bb 27       	eor	r27, r27
     c2c:	aa 27       	eor	r26, r26
     c2e:	0e 94 2c 06 	call	0xc58	; 0xc58 <__addsf3x>
     c32:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_round>
     c36:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_pscA>
     c3a:	38 f0       	brcs	.+14     	; 0xc4a <__addsf3+0x20>
     c3c:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscB>
     c40:	20 f0       	brcs	.+8      	; 0xc4a <__addsf3+0x20>
     c42:	39 f4       	brne	.+14     	; 0xc52 <__addsf3+0x28>
     c44:	9f 3f       	cpi	r25, 0xFF	; 255
     c46:	19 f4       	brne	.+6      	; 0xc4e <__addsf3+0x24>
     c48:	26 f4       	brtc	.+8      	; 0xc52 <__addsf3+0x28>
     c4a:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_nan>
     c4e:	0e f4       	brtc	.+2      	; 0xc52 <__addsf3+0x28>
     c50:	e0 95       	com	r30
     c52:	e7 fb       	bst	r30, 7
     c54:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_inf>

00000c58 <__addsf3x>:
     c58:	e9 2f       	mov	r30, r25
     c5a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__fp_split3>
     c5e:	58 f3       	brcs	.-42     	; 0xc36 <__addsf3+0xc>
     c60:	ba 17       	cp	r27, r26
     c62:	62 07       	cpc	r22, r18
     c64:	73 07       	cpc	r23, r19
     c66:	84 07       	cpc	r24, r20
     c68:	95 07       	cpc	r25, r21
     c6a:	20 f0       	brcs	.+8      	; 0xc74 <__addsf3x+0x1c>
     c6c:	79 f4       	brne	.+30     	; 0xc8c <__addsf3x+0x34>
     c6e:	a6 f5       	brtc	.+104    	; 0xcd8 <__addsf3x+0x80>
     c70:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_zero>
     c74:	0e f4       	brtc	.+2      	; 0xc78 <__addsf3x+0x20>
     c76:	e0 95       	com	r30
     c78:	0b 2e       	mov	r0, r27
     c7a:	ba 2f       	mov	r27, r26
     c7c:	a0 2d       	mov	r26, r0
     c7e:	0b 01       	movw	r0, r22
     c80:	b9 01       	movw	r22, r18
     c82:	90 01       	movw	r18, r0
     c84:	0c 01       	movw	r0, r24
     c86:	ca 01       	movw	r24, r20
     c88:	a0 01       	movw	r20, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	ff 27       	eor	r31, r31
     c8e:	59 1b       	sub	r21, r25
     c90:	99 f0       	breq	.+38     	; 0xcb8 <__addsf3x+0x60>
     c92:	59 3f       	cpi	r21, 0xF9	; 249
     c94:	50 f4       	brcc	.+20     	; 0xcaa <__addsf3x+0x52>
     c96:	50 3e       	cpi	r21, 0xE0	; 224
     c98:	68 f1       	brcs	.+90     	; 0xcf4 <__addsf3x+0x9c>
     c9a:	1a 16       	cp	r1, r26
     c9c:	f0 40       	sbci	r31, 0x00	; 0
     c9e:	a2 2f       	mov	r26, r18
     ca0:	23 2f       	mov	r18, r19
     ca2:	34 2f       	mov	r19, r20
     ca4:	44 27       	eor	r20, r20
     ca6:	58 5f       	subi	r21, 0xF8	; 248
     ca8:	f3 cf       	rjmp	.-26     	; 0xc90 <__addsf3x+0x38>
     caa:	46 95       	lsr	r20
     cac:	37 95       	ror	r19
     cae:	27 95       	ror	r18
     cb0:	a7 95       	ror	r26
     cb2:	f0 40       	sbci	r31, 0x00	; 0
     cb4:	53 95       	inc	r21
     cb6:	c9 f7       	brne	.-14     	; 0xcaa <__addsf3x+0x52>
     cb8:	7e f4       	brtc	.+30     	; 0xcd8 <__addsf3x+0x80>
     cba:	1f 16       	cp	r1, r31
     cbc:	ba 0b       	sbc	r27, r26
     cbe:	62 0b       	sbc	r22, r18
     cc0:	73 0b       	sbc	r23, r19
     cc2:	84 0b       	sbc	r24, r20
     cc4:	ba f0       	brmi	.+46     	; 0xcf4 <__addsf3x+0x9c>
     cc6:	91 50       	subi	r25, 0x01	; 1
     cc8:	a1 f0       	breq	.+40     	; 0xcf2 <__addsf3x+0x9a>
     cca:	ff 0f       	add	r31, r31
     ccc:	bb 1f       	adc	r27, r27
     cce:	66 1f       	adc	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	88 1f       	adc	r24, r24
     cd4:	c2 f7       	brpl	.-16     	; 0xcc6 <__addsf3x+0x6e>
     cd6:	0e c0       	rjmp	.+28     	; 0xcf4 <__addsf3x+0x9c>
     cd8:	ba 0f       	add	r27, r26
     cda:	62 1f       	adc	r22, r18
     cdc:	73 1f       	adc	r23, r19
     cde:	84 1f       	adc	r24, r20
     ce0:	48 f4       	brcc	.+18     	; 0xcf4 <__addsf3x+0x9c>
     ce2:	87 95       	ror	r24
     ce4:	77 95       	ror	r23
     ce6:	67 95       	ror	r22
     ce8:	b7 95       	ror	r27
     cea:	f7 95       	ror	r31
     cec:	9e 3f       	cpi	r25, 0xFE	; 254
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <__addsf3x+0x9a>
     cf0:	b0 cf       	rjmp	.-160    	; 0xc52 <__addsf3+0x28>
     cf2:	93 95       	inc	r25
     cf4:	88 0f       	add	r24, r24
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <__addsf3x+0xa2>
     cf8:	99 27       	eor	r25, r25
     cfa:	ee 0f       	add	r30, r30
     cfc:	97 95       	ror	r25
     cfe:	87 95       	ror	r24
     d00:	08 95       	ret

00000d02 <__cmpsf2>:
     d02:	0e 94 64 07 	call	0xec8	; 0xec8 <__fp_cmp>
     d06:	08 f4       	brcc	.+2      	; 0xd0a <__cmpsf2+0x8>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	08 95       	ret

00000d0c <__divsf3>:
     d0c:	0e 94 9a 06 	call	0xd34	; 0xd34 <__divsf3x>
     d10:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_round>
     d14:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscB>
     d18:	58 f0       	brcs	.+22     	; 0xd30 <__divsf3+0x24>
     d1a:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_pscA>
     d1e:	40 f0       	brcs	.+16     	; 0xd30 <__divsf3+0x24>
     d20:	29 f4       	brne	.+10     	; 0xd2c <__divsf3+0x20>
     d22:	5f 3f       	cpi	r21, 0xFF	; 255
     d24:	29 f0       	breq	.+10     	; 0xd30 <__divsf3+0x24>
     d26:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_inf>
     d2a:	51 11       	cpse	r21, r1
     d2c:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_szero>
     d30:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_nan>

00000d34 <__divsf3x>:
     d34:	0e 94 b0 07 	call	0xf60	; 0xf60 <__fp_split3>
     d38:	68 f3       	brcs	.-38     	; 0xd14 <__divsf3+0x8>

00000d3a <__divsf3_pse>:
     d3a:	99 23       	and	r25, r25
     d3c:	b1 f3       	breq	.-20     	; 0xd2a <__divsf3+0x1e>
     d3e:	55 23       	and	r21, r21
     d40:	91 f3       	breq	.-28     	; 0xd26 <__divsf3+0x1a>
     d42:	95 1b       	sub	r25, r21
     d44:	55 0b       	sbc	r21, r21
     d46:	bb 27       	eor	r27, r27
     d48:	aa 27       	eor	r26, r26
     d4a:	62 17       	cp	r22, r18
     d4c:	73 07       	cpc	r23, r19
     d4e:	84 07       	cpc	r24, r20
     d50:	38 f0       	brcs	.+14     	; 0xd60 <__divsf3_pse+0x26>
     d52:	9f 5f       	subi	r25, 0xFF	; 255
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	44 1f       	adc	r20, r20
     d5c:	aa 1f       	adc	r26, r26
     d5e:	a9 f3       	breq	.-22     	; 0xd4a <__divsf3_pse+0x10>
     d60:	35 d0       	rcall	.+106    	; 0xdcc <__divsf3_pse+0x92>
     d62:	0e 2e       	mov	r0, r30
     d64:	3a f0       	brmi	.+14     	; 0xd74 <__divsf3_pse+0x3a>
     d66:	e0 e8       	ldi	r30, 0x80	; 128
     d68:	32 d0       	rcall	.+100    	; 0xdce <__divsf3_pse+0x94>
     d6a:	91 50       	subi	r25, 0x01	; 1
     d6c:	50 40       	sbci	r21, 0x00	; 0
     d6e:	e6 95       	lsr	r30
     d70:	00 1c       	adc	r0, r0
     d72:	ca f7       	brpl	.-14     	; 0xd66 <__divsf3_pse+0x2c>
     d74:	2b d0       	rcall	.+86     	; 0xdcc <__divsf3_pse+0x92>
     d76:	fe 2f       	mov	r31, r30
     d78:	29 d0       	rcall	.+82     	; 0xdcc <__divsf3_pse+0x92>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	bb 1f       	adc	r27, r27
     d82:	26 17       	cp	r18, r22
     d84:	37 07       	cpc	r19, r23
     d86:	48 07       	cpc	r20, r24
     d88:	ab 07       	cpc	r26, r27
     d8a:	b0 e8       	ldi	r27, 0x80	; 128
     d8c:	09 f0       	breq	.+2      	; 0xd90 <__divsf3_pse+0x56>
     d8e:	bb 0b       	sbc	r27, r27
     d90:	80 2d       	mov	r24, r0
     d92:	bf 01       	movw	r22, r30
     d94:	ff 27       	eor	r31, r31
     d96:	93 58       	subi	r25, 0x83	; 131
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	3a f0       	brmi	.+14     	; 0xdaa <__divsf3_pse+0x70>
     d9c:	9e 3f       	cpi	r25, 0xFE	; 254
     d9e:	51 05       	cpc	r21, r1
     da0:	78 f0       	brcs	.+30     	; 0xdc0 <__divsf3_pse+0x86>
     da2:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_inf>
     da6:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_szero>
     daa:	5f 3f       	cpi	r21, 0xFF	; 255
     dac:	e4 f3       	brlt	.-8      	; 0xda6 <__divsf3_pse+0x6c>
     dae:	98 3e       	cpi	r25, 0xE8	; 232
     db0:	d4 f3       	brlt	.-12     	; 0xda6 <__divsf3_pse+0x6c>
     db2:	86 95       	lsr	r24
     db4:	77 95       	ror	r23
     db6:	67 95       	ror	r22
     db8:	b7 95       	ror	r27
     dba:	f7 95       	ror	r31
     dbc:	9f 5f       	subi	r25, 0xFF	; 255
     dbe:	c9 f7       	brne	.-14     	; 0xdb2 <__divsf3_pse+0x78>
     dc0:	88 0f       	add	r24, r24
     dc2:	91 1d       	adc	r25, r1
     dc4:	96 95       	lsr	r25
     dc6:	87 95       	ror	r24
     dc8:	97 f9       	bld	r25, 7
     dca:	08 95       	ret
     dcc:	e1 e0       	ldi	r30, 0x01	; 1
     dce:	66 0f       	add	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	88 1f       	adc	r24, r24
     dd4:	bb 1f       	adc	r27, r27
     dd6:	62 17       	cp	r22, r18
     dd8:	73 07       	cpc	r23, r19
     dda:	84 07       	cpc	r24, r20
     ddc:	ba 07       	cpc	r27, r26
     dde:	20 f0       	brcs	.+8      	; 0xde8 <__divsf3_pse+0xae>
     de0:	62 1b       	sub	r22, r18
     de2:	73 0b       	sbc	r23, r19
     de4:	84 0b       	sbc	r24, r20
     de6:	ba 0b       	sbc	r27, r26
     de8:	ee 1f       	adc	r30, r30
     dea:	88 f7       	brcc	.-30     	; 0xdce <__divsf3_pse+0x94>
     dec:	e0 95       	com	r30
     dee:	08 95       	ret

00000df0 <__fixunssfsi>:
     df0:	0e 94 b8 07 	call	0xf70	; 0xf70 <__fp_splitA>
     df4:	88 f0       	brcs	.+34     	; 0xe18 <__fixunssfsi+0x28>
     df6:	9f 57       	subi	r25, 0x7F	; 127
     df8:	98 f0       	brcs	.+38     	; 0xe20 <__fixunssfsi+0x30>
     dfa:	b9 2f       	mov	r27, r25
     dfc:	99 27       	eor	r25, r25
     dfe:	b7 51       	subi	r27, 0x17	; 23
     e00:	b0 f0       	brcs	.+44     	; 0xe2e <__fixunssfsi+0x3e>
     e02:	e1 f0       	breq	.+56     	; 0xe3c <__fixunssfsi+0x4c>
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	1a f0       	brmi	.+6      	; 0xe14 <__fixunssfsi+0x24>
     e0e:	ba 95       	dec	r27
     e10:	c9 f7       	brne	.-14     	; 0xe04 <__fixunssfsi+0x14>
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <__fixunssfsi+0x4c>
     e14:	b1 30       	cpi	r27, 0x01	; 1
     e16:	91 f0       	breq	.+36     	; 0xe3c <__fixunssfsi+0x4c>
     e18:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_zero>
     e1c:	b1 e0       	ldi	r27, 0x01	; 1
     e1e:	08 95       	ret
     e20:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_zero>
     e24:	67 2f       	mov	r22, r23
     e26:	78 2f       	mov	r23, r24
     e28:	88 27       	eor	r24, r24
     e2a:	b8 5f       	subi	r27, 0xF8	; 248
     e2c:	39 f0       	breq	.+14     	; 0xe3c <__fixunssfsi+0x4c>
     e2e:	b9 3f       	cpi	r27, 0xF9	; 249
     e30:	cc f3       	brlt	.-14     	; 0xe24 <__fixunssfsi+0x34>
     e32:	86 95       	lsr	r24
     e34:	77 95       	ror	r23
     e36:	67 95       	ror	r22
     e38:	b3 95       	inc	r27
     e3a:	d9 f7       	brne	.-10     	; 0xe32 <__fixunssfsi+0x42>
     e3c:	3e f4       	brtc	.+14     	; 0xe4c <__fixunssfsi+0x5c>
     e3e:	90 95       	com	r25
     e40:	80 95       	com	r24
     e42:	70 95       	com	r23
     e44:	61 95       	neg	r22
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	8f 4f       	sbci	r24, 0xFF	; 255
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	08 95       	ret

00000e4e <__floatunsisf>:
     e4e:	e8 94       	clt
     e50:	09 c0       	rjmp	.+18     	; 0xe64 <__floatsisf+0x12>

00000e52 <__floatsisf>:
     e52:	97 fb       	bst	r25, 7
     e54:	3e f4       	brtc	.+14     	; 0xe64 <__floatsisf+0x12>
     e56:	90 95       	com	r25
     e58:	80 95       	com	r24
     e5a:	70 95       	com	r23
     e5c:	61 95       	neg	r22
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	8f 4f       	sbci	r24, 0xFF	; 255
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	99 23       	and	r25, r25
     e66:	a9 f0       	breq	.+42     	; 0xe92 <__floatsisf+0x40>
     e68:	f9 2f       	mov	r31, r25
     e6a:	96 e9       	ldi	r25, 0x96	; 150
     e6c:	bb 27       	eor	r27, r27
     e6e:	93 95       	inc	r25
     e70:	f6 95       	lsr	r31
     e72:	87 95       	ror	r24
     e74:	77 95       	ror	r23
     e76:	67 95       	ror	r22
     e78:	b7 95       	ror	r27
     e7a:	f1 11       	cpse	r31, r1
     e7c:	f8 cf       	rjmp	.-16     	; 0xe6e <__floatsisf+0x1c>
     e7e:	fa f4       	brpl	.+62     	; 0xebe <__floatsisf+0x6c>
     e80:	bb 0f       	add	r27, r27
     e82:	11 f4       	brne	.+4      	; 0xe88 <__floatsisf+0x36>
     e84:	60 ff       	sbrs	r22, 0
     e86:	1b c0       	rjmp	.+54     	; 0xebe <__floatsisf+0x6c>
     e88:	6f 5f       	subi	r22, 0xFF	; 255
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	16 c0       	rjmp	.+44     	; 0xebe <__floatsisf+0x6c>
     e92:	88 23       	and	r24, r24
     e94:	11 f0       	breq	.+4      	; 0xe9a <__floatsisf+0x48>
     e96:	96 e9       	ldi	r25, 0x96	; 150
     e98:	11 c0       	rjmp	.+34     	; 0xebc <__floatsisf+0x6a>
     e9a:	77 23       	and	r23, r23
     e9c:	21 f0       	breq	.+8      	; 0xea6 <__floatsisf+0x54>
     e9e:	9e e8       	ldi	r25, 0x8E	; 142
     ea0:	87 2f       	mov	r24, r23
     ea2:	76 2f       	mov	r23, r22
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <__floatsisf+0x5e>
     ea6:	66 23       	and	r22, r22
     ea8:	71 f0       	breq	.+28     	; 0xec6 <__floatsisf+0x74>
     eaa:	96 e8       	ldi	r25, 0x86	; 134
     eac:	86 2f       	mov	r24, r22
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	2a f0       	brmi	.+10     	; 0xebe <__floatsisf+0x6c>
     eb4:	9a 95       	dec	r25
     eb6:	66 0f       	add	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	da f7       	brpl	.-10     	; 0xeb4 <__floatsisf+0x62>
     ebe:	88 0f       	add	r24, r24
     ec0:	96 95       	lsr	r25
     ec2:	87 95       	ror	r24
     ec4:	97 f9       	bld	r25, 7
     ec6:	08 95       	ret

00000ec8 <__fp_cmp>:
     ec8:	99 0f       	add	r25, r25
     eca:	00 08       	sbc	r0, r0
     ecc:	55 0f       	add	r21, r21
     ece:	aa 0b       	sbc	r26, r26
     ed0:	e0 e8       	ldi	r30, 0x80	; 128
     ed2:	fe ef       	ldi	r31, 0xFE	; 254
     ed4:	16 16       	cp	r1, r22
     ed6:	17 06       	cpc	r1, r23
     ed8:	e8 07       	cpc	r30, r24
     eda:	f9 07       	cpc	r31, r25
     edc:	c0 f0       	brcs	.+48     	; 0xf0e <__fp_cmp+0x46>
     ede:	12 16       	cp	r1, r18
     ee0:	13 06       	cpc	r1, r19
     ee2:	e4 07       	cpc	r30, r20
     ee4:	f5 07       	cpc	r31, r21
     ee6:	98 f0       	brcs	.+38     	; 0xf0e <__fp_cmp+0x46>
     ee8:	62 1b       	sub	r22, r18
     eea:	73 0b       	sbc	r23, r19
     eec:	84 0b       	sbc	r24, r20
     eee:	95 0b       	sbc	r25, r21
     ef0:	39 f4       	brne	.+14     	; 0xf00 <__fp_cmp+0x38>
     ef2:	0a 26       	eor	r0, r26
     ef4:	61 f0       	breq	.+24     	; 0xf0e <__fp_cmp+0x46>
     ef6:	23 2b       	or	r18, r19
     ef8:	24 2b       	or	r18, r20
     efa:	25 2b       	or	r18, r21
     efc:	21 f4       	brne	.+8      	; 0xf06 <__fp_cmp+0x3e>
     efe:	08 95       	ret
     f00:	0a 26       	eor	r0, r26
     f02:	09 f4       	brne	.+2      	; 0xf06 <__fp_cmp+0x3e>
     f04:	a1 40       	sbci	r26, 0x01	; 1
     f06:	a6 95       	lsr	r26
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	81 1d       	adc	r24, r1
     f0c:	81 1d       	adc	r24, r1
     f0e:	08 95       	ret

00000f10 <__fp_inf>:
     f10:	97 f9       	bld	r25, 7
     f12:	9f 67       	ori	r25, 0x7F	; 127
     f14:	80 e8       	ldi	r24, 0x80	; 128
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	08 95       	ret

00000f1c <__fp_nan>:
     f1c:	9f ef       	ldi	r25, 0xFF	; 255
     f1e:	80 ec       	ldi	r24, 0xC0	; 192
     f20:	08 95       	ret

00000f22 <__fp_pscA>:
     f22:	00 24       	eor	r0, r0
     f24:	0a 94       	dec	r0
     f26:	16 16       	cp	r1, r22
     f28:	17 06       	cpc	r1, r23
     f2a:	18 06       	cpc	r1, r24
     f2c:	09 06       	cpc	r0, r25
     f2e:	08 95       	ret

00000f30 <__fp_pscB>:
     f30:	00 24       	eor	r0, r0
     f32:	0a 94       	dec	r0
     f34:	12 16       	cp	r1, r18
     f36:	13 06       	cpc	r1, r19
     f38:	14 06       	cpc	r1, r20
     f3a:	05 06       	cpc	r0, r21
     f3c:	08 95       	ret

00000f3e <__fp_round>:
     f3e:	09 2e       	mov	r0, r25
     f40:	03 94       	inc	r0
     f42:	00 0c       	add	r0, r0
     f44:	11 f4       	brne	.+4      	; 0xf4a <__fp_round+0xc>
     f46:	88 23       	and	r24, r24
     f48:	52 f0       	brmi	.+20     	; 0xf5e <__fp_round+0x20>
     f4a:	bb 0f       	add	r27, r27
     f4c:	40 f4       	brcc	.+16     	; 0xf5e <__fp_round+0x20>
     f4e:	bf 2b       	or	r27, r31
     f50:	11 f4       	brne	.+4      	; 0xf56 <__fp_round+0x18>
     f52:	60 ff       	sbrs	r22, 0
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <__fp_round+0x20>
     f56:	6f 5f       	subi	r22, 0xFF	; 255
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	8f 4f       	sbci	r24, 0xFF	; 255
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	08 95       	ret

00000f60 <__fp_split3>:
     f60:	57 fd       	sbrc	r21, 7
     f62:	90 58       	subi	r25, 0x80	; 128
     f64:	44 0f       	add	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	59 f0       	breq	.+22     	; 0xf80 <__fp_splitA+0x10>
     f6a:	5f 3f       	cpi	r21, 0xFF	; 255
     f6c:	71 f0       	breq	.+28     	; 0xf8a <__fp_splitA+0x1a>
     f6e:	47 95       	ror	r20

00000f70 <__fp_splitA>:
     f70:	88 0f       	add	r24, r24
     f72:	97 fb       	bst	r25, 7
     f74:	99 1f       	adc	r25, r25
     f76:	61 f0       	breq	.+24     	; 0xf90 <__fp_splitA+0x20>
     f78:	9f 3f       	cpi	r25, 0xFF	; 255
     f7a:	79 f0       	breq	.+30     	; 0xf9a <__fp_splitA+0x2a>
     f7c:	87 95       	ror	r24
     f7e:	08 95       	ret
     f80:	12 16       	cp	r1, r18
     f82:	13 06       	cpc	r1, r19
     f84:	14 06       	cpc	r1, r20
     f86:	55 1f       	adc	r21, r21
     f88:	f2 cf       	rjmp	.-28     	; 0xf6e <__fp_split3+0xe>
     f8a:	46 95       	lsr	r20
     f8c:	f1 df       	rcall	.-30     	; 0xf70 <__fp_splitA>
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <__fp_splitA+0x30>
     f90:	16 16       	cp	r1, r22
     f92:	17 06       	cpc	r1, r23
     f94:	18 06       	cpc	r1, r24
     f96:	99 1f       	adc	r25, r25
     f98:	f1 cf       	rjmp	.-30     	; 0xf7c <__fp_splitA+0xc>
     f9a:	86 95       	lsr	r24
     f9c:	71 05       	cpc	r23, r1
     f9e:	61 05       	cpc	r22, r1
     fa0:	08 94       	sec
     fa2:	08 95       	ret

00000fa4 <__fp_zero>:
     fa4:	e8 94       	clt

00000fa6 <__fp_szero>:
     fa6:	bb 27       	eor	r27, r27
     fa8:	66 27       	eor	r22, r22
     faa:	77 27       	eor	r23, r23
     fac:	cb 01       	movw	r24, r22
     fae:	97 f9       	bld	r25, 7
     fb0:	08 95       	ret

00000fb2 <__mulsf3>:
     fb2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3x>
     fb6:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_round>
     fba:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_pscA>
     fbe:	38 f0       	brcs	.+14     	; 0xfce <__mulsf3+0x1c>
     fc0:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscB>
     fc4:	20 f0       	brcs	.+8      	; 0xfce <__mulsf3+0x1c>
     fc6:	95 23       	and	r25, r21
     fc8:	11 f0       	breq	.+4      	; 0xfce <__mulsf3+0x1c>
     fca:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_inf>
     fce:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_nan>
     fd2:	11 24       	eor	r1, r1
     fd4:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_szero>

00000fd8 <__mulsf3x>:
     fd8:	0e 94 b0 07 	call	0xf60	; 0xf60 <__fp_split3>
     fdc:	70 f3       	brcs	.-36     	; 0xfba <__mulsf3+0x8>

00000fde <__mulsf3_pse>:
     fde:	95 9f       	mul	r25, r21
     fe0:	c1 f3       	breq	.-16     	; 0xfd2 <__mulsf3+0x20>
     fe2:	95 0f       	add	r25, r21
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	55 1f       	adc	r21, r21
     fe8:	62 9f       	mul	r22, r18
     fea:	f0 01       	movw	r30, r0
     fec:	72 9f       	mul	r23, r18
     fee:	bb 27       	eor	r27, r27
     ff0:	f0 0d       	add	r31, r0
     ff2:	b1 1d       	adc	r27, r1
     ff4:	63 9f       	mul	r22, r19
     ff6:	aa 27       	eor	r26, r26
     ff8:	f0 0d       	add	r31, r0
     ffa:	b1 1d       	adc	r27, r1
     ffc:	aa 1f       	adc	r26, r26
     ffe:	64 9f       	mul	r22, r20
    1000:	66 27       	eor	r22, r22
    1002:	b0 0d       	add	r27, r0
    1004:	a1 1d       	adc	r26, r1
    1006:	66 1f       	adc	r22, r22
    1008:	82 9f       	mul	r24, r18
    100a:	22 27       	eor	r18, r18
    100c:	b0 0d       	add	r27, r0
    100e:	a1 1d       	adc	r26, r1
    1010:	62 1f       	adc	r22, r18
    1012:	73 9f       	mul	r23, r19
    1014:	b0 0d       	add	r27, r0
    1016:	a1 1d       	adc	r26, r1
    1018:	62 1f       	adc	r22, r18
    101a:	83 9f       	mul	r24, r19
    101c:	a0 0d       	add	r26, r0
    101e:	61 1d       	adc	r22, r1
    1020:	22 1f       	adc	r18, r18
    1022:	74 9f       	mul	r23, r20
    1024:	33 27       	eor	r19, r19
    1026:	a0 0d       	add	r26, r0
    1028:	61 1d       	adc	r22, r1
    102a:	23 1f       	adc	r18, r19
    102c:	84 9f       	mul	r24, r20
    102e:	60 0d       	add	r22, r0
    1030:	21 1d       	adc	r18, r1
    1032:	82 2f       	mov	r24, r18
    1034:	76 2f       	mov	r23, r22
    1036:	6a 2f       	mov	r22, r26
    1038:	11 24       	eor	r1, r1
    103a:	9f 57       	subi	r25, 0x7F	; 127
    103c:	50 40       	sbci	r21, 0x00	; 0
    103e:	9a f0       	brmi	.+38     	; 0x1066 <__mulsf3_pse+0x88>
    1040:	f1 f0       	breq	.+60     	; 0x107e <__mulsf3_pse+0xa0>
    1042:	88 23       	and	r24, r24
    1044:	4a f0       	brmi	.+18     	; 0x1058 <__mulsf3_pse+0x7a>
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	bb 1f       	adc	r27, r27
    104c:	66 1f       	adc	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	88 1f       	adc	r24, r24
    1052:	91 50       	subi	r25, 0x01	; 1
    1054:	50 40       	sbci	r21, 0x00	; 0
    1056:	a9 f7       	brne	.-22     	; 0x1042 <__mulsf3_pse+0x64>
    1058:	9e 3f       	cpi	r25, 0xFE	; 254
    105a:	51 05       	cpc	r21, r1
    105c:	80 f0       	brcs	.+32     	; 0x107e <__mulsf3_pse+0xa0>
    105e:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_inf>
    1062:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_szero>
    1066:	5f 3f       	cpi	r21, 0xFF	; 255
    1068:	e4 f3       	brlt	.-8      	; 0x1062 <__mulsf3_pse+0x84>
    106a:	98 3e       	cpi	r25, 0xE8	; 232
    106c:	d4 f3       	brlt	.-12     	; 0x1062 <__mulsf3_pse+0x84>
    106e:	86 95       	lsr	r24
    1070:	77 95       	ror	r23
    1072:	67 95       	ror	r22
    1074:	b7 95       	ror	r27
    1076:	f7 95       	ror	r31
    1078:	e7 95       	ror	r30
    107a:	9f 5f       	subi	r25, 0xFF	; 255
    107c:	c1 f7       	brne	.-16     	; 0x106e <__mulsf3_pse+0x90>
    107e:	fe 2b       	or	r31, r30
    1080:	88 0f       	add	r24, r24
    1082:	91 1d       	adc	r25, r1
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	97 f9       	bld	r25, 7
    108a:	08 95       	ret

0000108c <vfprintf>:
    108c:	a0 e1       	ldi	r26, 0x10	; 16
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ec e4       	ldi	r30, 0x4C	; 76
    1092:	f8 e0       	ldi	r31, 0x08	; 8
    1094:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__prologue_saves__>
    1098:	7c 01       	movw	r14, r24
    109a:	1b 01       	movw	r2, r22
    109c:	6a 01       	movw	r12, r20
    109e:	fc 01       	movw	r30, r24
    10a0:	17 82       	std	Z+7, r1	; 0x07
    10a2:	16 82       	std	Z+6, r1	; 0x06
    10a4:	83 81       	ldd	r24, Z+3	; 0x03
    10a6:	81 ff       	sbrs	r24, 1
    10a8:	44 c3       	rjmp	.+1672   	; 0x1732 <vfprintf+0x6a6>
    10aa:	9e 01       	movw	r18, r28
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	39 01       	movw	r6, r18
    10b2:	f7 01       	movw	r30, r14
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	f1 01       	movw	r30, r2
    10b8:	93 fd       	sbrc	r25, 3
    10ba:	85 91       	lpm	r24, Z+
    10bc:	93 ff       	sbrs	r25, 3
    10be:	81 91       	ld	r24, Z+
    10c0:	1f 01       	movw	r2, r30
    10c2:	88 23       	and	r24, r24
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <vfprintf+0x3c>
    10c6:	31 c3       	rjmp	.+1634   	; 0x172a <vfprintf+0x69e>
    10c8:	85 32       	cpi	r24, 0x25	; 37
    10ca:	39 f4       	brne	.+14     	; 0x10da <vfprintf+0x4e>
    10cc:	93 fd       	sbrc	r25, 3
    10ce:	85 91       	lpm	r24, Z+
    10d0:	93 ff       	sbrs	r25, 3
    10d2:	81 91       	ld	r24, Z+
    10d4:	1f 01       	movw	r2, r30
    10d6:	85 32       	cpi	r24, 0x25	; 37
    10d8:	39 f4       	brne	.+14     	; 0x10e8 <vfprintf+0x5c>
    10da:	b7 01       	movw	r22, r14
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    10e2:	56 01       	movw	r10, r12
    10e4:	65 01       	movw	r12, r10
    10e6:	e5 cf       	rjmp	.-54     	; 0x10b2 <vfprintf+0x26>
    10e8:	10 e0       	ldi	r17, 0x00	; 0
    10ea:	51 2c       	mov	r5, r1
    10ec:	91 2c       	mov	r9, r1
    10ee:	ff e1       	ldi	r31, 0x1F	; 31
    10f0:	f9 15       	cp	r31, r9
    10f2:	d8 f0       	brcs	.+54     	; 0x112a <vfprintf+0x9e>
    10f4:	8b 32       	cpi	r24, 0x2B	; 43
    10f6:	79 f0       	breq	.+30     	; 0x1116 <vfprintf+0x8a>
    10f8:	38 f4       	brcc	.+14     	; 0x1108 <vfprintf+0x7c>
    10fa:	80 32       	cpi	r24, 0x20	; 32
    10fc:	79 f0       	breq	.+30     	; 0x111c <vfprintf+0x90>
    10fe:	83 32       	cpi	r24, 0x23	; 35
    1100:	a1 f4       	brne	.+40     	; 0x112a <vfprintf+0x9e>
    1102:	f9 2d       	mov	r31, r9
    1104:	f0 61       	ori	r31, 0x10	; 16
    1106:	2e c0       	rjmp	.+92     	; 0x1164 <vfprintf+0xd8>
    1108:	8d 32       	cpi	r24, 0x2D	; 45
    110a:	61 f0       	breq	.+24     	; 0x1124 <vfprintf+0x98>
    110c:	80 33       	cpi	r24, 0x30	; 48
    110e:	69 f4       	brne	.+26     	; 0x112a <vfprintf+0x9e>
    1110:	29 2d       	mov	r18, r9
    1112:	21 60       	ori	r18, 0x01	; 1
    1114:	2d c0       	rjmp	.+90     	; 0x1170 <vfprintf+0xe4>
    1116:	39 2d       	mov	r19, r9
    1118:	32 60       	ori	r19, 0x02	; 2
    111a:	93 2e       	mov	r9, r19
    111c:	89 2d       	mov	r24, r9
    111e:	84 60       	ori	r24, 0x04	; 4
    1120:	98 2e       	mov	r9, r24
    1122:	2a c0       	rjmp	.+84     	; 0x1178 <vfprintf+0xec>
    1124:	e9 2d       	mov	r30, r9
    1126:	e8 60       	ori	r30, 0x08	; 8
    1128:	15 c0       	rjmp	.+42     	; 0x1154 <vfprintf+0xc8>
    112a:	97 fc       	sbrc	r9, 7
    112c:	2d c0       	rjmp	.+90     	; 0x1188 <vfprintf+0xfc>
    112e:	20 ed       	ldi	r18, 0xD0	; 208
    1130:	28 0f       	add	r18, r24
    1132:	2a 30       	cpi	r18, 0x0A	; 10
    1134:	88 f4       	brcc	.+34     	; 0x1158 <vfprintf+0xcc>
    1136:	96 fe       	sbrs	r9, 6
    1138:	06 c0       	rjmp	.+12     	; 0x1146 <vfprintf+0xba>
    113a:	3a e0       	ldi	r19, 0x0A	; 10
    113c:	13 9f       	mul	r17, r19
    113e:	20 0d       	add	r18, r0
    1140:	11 24       	eor	r1, r1
    1142:	12 2f       	mov	r17, r18
    1144:	19 c0       	rjmp	.+50     	; 0x1178 <vfprintf+0xec>
    1146:	8a e0       	ldi	r24, 0x0A	; 10
    1148:	58 9e       	mul	r5, r24
    114a:	20 0d       	add	r18, r0
    114c:	11 24       	eor	r1, r1
    114e:	52 2e       	mov	r5, r18
    1150:	e9 2d       	mov	r30, r9
    1152:	e0 62       	ori	r30, 0x20	; 32
    1154:	9e 2e       	mov	r9, r30
    1156:	10 c0       	rjmp	.+32     	; 0x1178 <vfprintf+0xec>
    1158:	8e 32       	cpi	r24, 0x2E	; 46
    115a:	31 f4       	brne	.+12     	; 0x1168 <vfprintf+0xdc>
    115c:	96 fc       	sbrc	r9, 6
    115e:	e5 c2       	rjmp	.+1482   	; 0x172a <vfprintf+0x69e>
    1160:	f9 2d       	mov	r31, r9
    1162:	f0 64       	ori	r31, 0x40	; 64
    1164:	9f 2e       	mov	r9, r31
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <vfprintf+0xec>
    1168:	8c 36       	cpi	r24, 0x6C	; 108
    116a:	21 f4       	brne	.+8      	; 0x1174 <vfprintf+0xe8>
    116c:	29 2d       	mov	r18, r9
    116e:	20 68       	ori	r18, 0x80	; 128
    1170:	92 2e       	mov	r9, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <vfprintf+0xec>
    1174:	88 36       	cpi	r24, 0x68	; 104
    1176:	41 f4       	brne	.+16     	; 0x1188 <vfprintf+0xfc>
    1178:	f1 01       	movw	r30, r2
    117a:	93 fd       	sbrc	r25, 3
    117c:	85 91       	lpm	r24, Z+
    117e:	93 ff       	sbrs	r25, 3
    1180:	81 91       	ld	r24, Z+
    1182:	1f 01       	movw	r2, r30
    1184:	81 11       	cpse	r24, r1
    1186:	b3 cf       	rjmp	.-154    	; 0x10ee <vfprintf+0x62>
    1188:	9b eb       	ldi	r25, 0xBB	; 187
    118a:	98 0f       	add	r25, r24
    118c:	93 30       	cpi	r25, 0x03	; 3
    118e:	20 f4       	brcc	.+8      	; 0x1198 <vfprintf+0x10c>
    1190:	99 2d       	mov	r25, r9
    1192:	90 61       	ori	r25, 0x10	; 16
    1194:	80 5e       	subi	r24, 0xE0	; 224
    1196:	07 c0       	rjmp	.+14     	; 0x11a6 <vfprintf+0x11a>
    1198:	9b e9       	ldi	r25, 0x9B	; 155
    119a:	98 0f       	add	r25, r24
    119c:	93 30       	cpi	r25, 0x03	; 3
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <vfprintf+0x116>
    11a0:	66 c1       	rjmp	.+716    	; 0x146e <vfprintf+0x3e2>
    11a2:	99 2d       	mov	r25, r9
    11a4:	9f 7e       	andi	r25, 0xEF	; 239
    11a6:	96 ff       	sbrs	r25, 6
    11a8:	16 e0       	ldi	r17, 0x06	; 6
    11aa:	9f 73       	andi	r25, 0x3F	; 63
    11ac:	99 2e       	mov	r9, r25
    11ae:	85 36       	cpi	r24, 0x65	; 101
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <vfprintf+0x12c>
    11b2:	90 64       	ori	r25, 0x40	; 64
    11b4:	99 2e       	mov	r9, r25
    11b6:	08 c0       	rjmp	.+16     	; 0x11c8 <vfprintf+0x13c>
    11b8:	86 36       	cpi	r24, 0x66	; 102
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <vfprintf+0x138>
    11bc:	39 2f       	mov	r19, r25
    11be:	30 68       	ori	r19, 0x80	; 128
    11c0:	93 2e       	mov	r9, r19
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0x13c>
    11c4:	11 11       	cpse	r17, r1
    11c6:	11 50       	subi	r17, 0x01	; 1
    11c8:	97 fe       	sbrs	r9, 7
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <vfprintf+0x14e>
    11cc:	1c 33       	cpi	r17, 0x3C	; 60
    11ce:	50 f4       	brcc	.+20     	; 0x11e4 <vfprintf+0x158>
    11d0:	44 24       	eor	r4, r4
    11d2:	43 94       	inc	r4
    11d4:	41 0e       	add	r4, r17
    11d6:	27 e0       	ldi	r18, 0x07	; 7
    11d8:	0b c0       	rjmp	.+22     	; 0x11f0 <vfprintf+0x164>
    11da:	18 30       	cpi	r17, 0x08	; 8
    11dc:	38 f0       	brcs	.+14     	; 0x11ec <vfprintf+0x160>
    11de:	27 e0       	ldi	r18, 0x07	; 7
    11e0:	17 e0       	ldi	r17, 0x07	; 7
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <vfprintf+0x162>
    11e4:	27 e0       	ldi	r18, 0x07	; 7
    11e6:	9c e3       	ldi	r25, 0x3C	; 60
    11e8:	49 2e       	mov	r4, r25
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfprintf+0x164>
    11ec:	21 2f       	mov	r18, r17
    11ee:	41 2c       	mov	r4, r1
    11f0:	56 01       	movw	r10, r12
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	a8 0e       	add	r10, r24
    11f6:	b1 1c       	adc	r11, r1
    11f8:	f6 01       	movw	r30, r12
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	04 2d       	mov	r16, r4
    1204:	a3 01       	movw	r20, r6
    1206:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__ftoa_engine>
    120a:	6c 01       	movw	r12, r24
    120c:	f9 81       	ldd	r31, Y+1	; 0x01
    120e:	fc 87       	std	Y+12, r31	; 0x0c
    1210:	f0 ff       	sbrs	r31, 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x18c>
    1214:	f3 ff       	sbrs	r31, 3
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <vfprintf+0x198>
    1218:	91 fc       	sbrc	r9, 1
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <vfprintf+0x19c>
    121c:	92 fe       	sbrs	r9, 2
    121e:	06 c0       	rjmp	.+12     	; 0x122c <vfprintf+0x1a0>
    1220:	00 e2       	ldi	r16, 0x20	; 32
    1222:	05 c0       	rjmp	.+10     	; 0x122e <vfprintf+0x1a2>
    1224:	0d e2       	ldi	r16, 0x2D	; 45
    1226:	03 c0       	rjmp	.+6      	; 0x122e <vfprintf+0x1a2>
    1228:	0b e2       	ldi	r16, 0x2B	; 43
    122a:	01 c0       	rjmp	.+2      	; 0x122e <vfprintf+0x1a2>
    122c:	00 e0       	ldi	r16, 0x00	; 0
    122e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1230:	8c 70       	andi	r24, 0x0C	; 12
    1232:	19 f0       	breq	.+6      	; 0x123a <vfprintf+0x1ae>
    1234:	01 11       	cpse	r16, r1
    1236:	5a c2       	rjmp	.+1204   	; 0x16ec <vfprintf+0x660>
    1238:	9b c2       	rjmp	.+1334   	; 0x1770 <vfprintf+0x6e4>
    123a:	97 fe       	sbrs	r9, 7
    123c:	10 c0       	rjmp	.+32     	; 0x125e <vfprintf+0x1d2>
    123e:	4c 0c       	add	r4, r12
    1240:	fc 85       	ldd	r31, Y+12	; 0x0c
    1242:	f4 ff       	sbrs	r31, 4
    1244:	04 c0       	rjmp	.+8      	; 0x124e <vfprintf+0x1c2>
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	81 33       	cpi	r24, 0x31	; 49
    124a:	09 f4       	brne	.+2      	; 0x124e <vfprintf+0x1c2>
    124c:	4a 94       	dec	r4
    124e:	14 14       	cp	r1, r4
    1250:	74 f5       	brge	.+92     	; 0x12ae <vfprintf+0x222>
    1252:	28 e0       	ldi	r18, 0x08	; 8
    1254:	24 15       	cp	r18, r4
    1256:	78 f5       	brcc	.+94     	; 0x12b6 <vfprintf+0x22a>
    1258:	88 e0       	ldi	r24, 0x08	; 8
    125a:	48 2e       	mov	r4, r24
    125c:	2c c0       	rjmp	.+88     	; 0x12b6 <vfprintf+0x22a>
    125e:	96 fc       	sbrc	r9, 6
    1260:	2a c0       	rjmp	.+84     	; 0x12b6 <vfprintf+0x22a>
    1262:	81 2f       	mov	r24, r17
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	8c 15       	cp	r24, r12
    1268:	9d 05       	cpc	r25, r13
    126a:	9c f0       	brlt	.+38     	; 0x1292 <vfprintf+0x206>
    126c:	3c ef       	ldi	r19, 0xFC	; 252
    126e:	c3 16       	cp	r12, r19
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	d3 06       	cpc	r13, r19
    1274:	74 f0       	brlt	.+28     	; 0x1292 <vfprintf+0x206>
    1276:	89 2d       	mov	r24, r9
    1278:	80 68       	ori	r24, 0x80	; 128
    127a:	98 2e       	mov	r9, r24
    127c:	0a c0       	rjmp	.+20     	; 0x1292 <vfprintf+0x206>
    127e:	e2 e0       	ldi	r30, 0x02	; 2
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	ec 0f       	add	r30, r28
    1284:	fd 1f       	adc	r31, r29
    1286:	e1 0f       	add	r30, r17
    1288:	f1 1d       	adc	r31, r1
    128a:	80 81       	ld	r24, Z
    128c:	80 33       	cpi	r24, 0x30	; 48
    128e:	19 f4       	brne	.+6      	; 0x1296 <vfprintf+0x20a>
    1290:	11 50       	subi	r17, 0x01	; 1
    1292:	11 11       	cpse	r17, r1
    1294:	f4 cf       	rjmp	.-24     	; 0x127e <vfprintf+0x1f2>
    1296:	97 fe       	sbrs	r9, 7
    1298:	0e c0       	rjmp	.+28     	; 0x12b6 <vfprintf+0x22a>
    129a:	44 24       	eor	r4, r4
    129c:	43 94       	inc	r4
    129e:	41 0e       	add	r4, r17
    12a0:	81 2f       	mov	r24, r17
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	c8 16       	cp	r12, r24
    12a6:	d9 06       	cpc	r13, r25
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <vfprintf+0x228>
    12aa:	1c 19       	sub	r17, r12
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <vfprintf+0x22a>
    12ae:	44 24       	eor	r4, r4
    12b0:	43 94       	inc	r4
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <vfprintf+0x22a>
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	97 fe       	sbrs	r9, 7
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <vfprintf+0x23a>
    12ba:	1c 14       	cp	r1, r12
    12bc:	1d 04       	cpc	r1, r13
    12be:	34 f4       	brge	.+12     	; 0x12cc <vfprintf+0x240>
    12c0:	c6 01       	movw	r24, r12
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <vfprintf+0x244>
    12c6:	85 e0       	ldi	r24, 0x05	; 5
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <vfprintf+0x244>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	01 11       	cpse	r16, r1
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	11 23       	and	r17, r17
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <vfprintf+0x258>
    12d8:	21 2f       	mov	r18, r17
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	2f 5f       	subi	r18, 0xFF	; 255
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	82 0f       	add	r24, r18
    12e2:	93 1f       	adc	r25, r19
    12e4:	25 2d       	mov	r18, r5
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	82 17       	cp	r24, r18
    12ea:	93 07       	cpc	r25, r19
    12ec:	14 f4       	brge	.+4      	; 0x12f2 <vfprintf+0x266>
    12ee:	58 1a       	sub	r5, r24
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <vfprintf+0x268>
    12f2:	51 2c       	mov	r5, r1
    12f4:	89 2d       	mov	r24, r9
    12f6:	89 70       	andi	r24, 0x09	; 9
    12f8:	49 f4       	brne	.+18     	; 0x130c <vfprintf+0x280>
    12fa:	55 20       	and	r5, r5
    12fc:	39 f0       	breq	.+14     	; 0x130c <vfprintf+0x280>
    12fe:	b7 01       	movw	r22, r14
    1300:	80 e2       	ldi	r24, 0x20	; 32
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1308:	5a 94       	dec	r5
    130a:	f7 cf       	rjmp	.-18     	; 0x12fa <vfprintf+0x26e>
    130c:	00 23       	and	r16, r16
    130e:	29 f0       	breq	.+10     	; 0x131a <vfprintf+0x28e>
    1310:	b7 01       	movw	r22, r14
    1312:	80 2f       	mov	r24, r16
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    131a:	93 fc       	sbrc	r9, 3
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <vfprintf+0x2a4>
    131e:	55 20       	and	r5, r5
    1320:	39 f0       	breq	.+14     	; 0x1330 <vfprintf+0x2a4>
    1322:	b7 01       	movw	r22, r14
    1324:	80 e3       	ldi	r24, 0x30	; 48
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    132c:	5a 94       	dec	r5
    132e:	f7 cf       	rjmp	.-18     	; 0x131e <vfprintf+0x292>
    1330:	97 fe       	sbrs	r9, 7
    1332:	4c c0       	rjmp	.+152    	; 0x13cc <vfprintf+0x340>
    1334:	46 01       	movw	r8, r12
    1336:	d7 fe       	sbrs	r13, 7
    1338:	02 c0       	rjmp	.+4      	; 0x133e <vfprintf+0x2b2>
    133a:	81 2c       	mov	r8, r1
    133c:	91 2c       	mov	r9, r1
    133e:	c6 01       	movw	r24, r12
    1340:	88 19       	sub	r24, r8
    1342:	99 09       	sbc	r25, r9
    1344:	f3 01       	movw	r30, r6
    1346:	e8 0f       	add	r30, r24
    1348:	f9 1f       	adc	r31, r25
    134a:	fe 87       	std	Y+14, r31	; 0x0e
    134c:	ed 87       	std	Y+13, r30	; 0x0d
    134e:	96 01       	movw	r18, r12
    1350:	24 19       	sub	r18, r4
    1352:	31 09       	sbc	r19, r1
    1354:	38 8b       	std	Y+16, r19	; 0x10
    1356:	2f 87       	std	Y+15, r18	; 0x0f
    1358:	01 2f       	mov	r16, r17
    135a:	10 e0       	ldi	r17, 0x00	; 0
    135c:	11 95       	neg	r17
    135e:	01 95       	neg	r16
    1360:	11 09       	sbc	r17, r1
    1362:	3f ef       	ldi	r19, 0xFF	; 255
    1364:	83 16       	cp	r8, r19
    1366:	93 06       	cpc	r9, r19
    1368:	29 f4       	brne	.+10     	; 0x1374 <vfprintf+0x2e8>
    136a:	b7 01       	movw	r22, r14
    136c:	8e e2       	ldi	r24, 0x2E	; 46
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1374:	c8 14       	cp	r12, r8
    1376:	d9 04       	cpc	r13, r9
    1378:	4c f0       	brlt	.+18     	; 0x138c <vfprintf+0x300>
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	88 15       	cp	r24, r8
    1380:	99 05       	cpc	r25, r9
    1382:	24 f4       	brge	.+8      	; 0x138c <vfprintf+0x300>
    1384:	ed 85       	ldd	r30, Y+13	; 0x0d
    1386:	fe 85       	ldd	r31, Y+14	; 0x0e
    1388:	81 81       	ldd	r24, Z+1	; 0x01
    138a:	01 c0       	rjmp	.+2      	; 0x138e <vfprintf+0x302>
    138c:	80 e3       	ldi	r24, 0x30	; 48
    138e:	f1 e0       	ldi	r31, 0x01	; 1
    1390:	8f 1a       	sub	r8, r31
    1392:	91 08       	sbc	r9, r1
    1394:	2d 85       	ldd	r18, Y+13	; 0x0d
    1396:	3e 85       	ldd	r19, Y+14	; 0x0e
    1398:	2f 5f       	subi	r18, 0xFF	; 255
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	3e 87       	std	Y+14, r19	; 0x0e
    139e:	2d 87       	std	Y+13, r18	; 0x0d
    13a0:	80 16       	cp	r8, r16
    13a2:	91 06       	cpc	r9, r17
    13a4:	2c f0       	brlt	.+10     	; 0x13b0 <vfprintf+0x324>
    13a6:	b7 01       	movw	r22, r14
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    13ae:	d9 cf       	rjmp	.-78     	; 0x1362 <vfprintf+0x2d6>
    13b0:	c8 14       	cp	r12, r8
    13b2:	d9 04       	cpc	r13, r9
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <vfprintf+0x33a>
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	96 33       	cpi	r25, 0x36	; 54
    13ba:	20 f4       	brcc	.+8      	; 0x13c4 <vfprintf+0x338>
    13bc:	95 33       	cpi	r25, 0x35	; 53
    13be:	19 f4       	brne	.+6      	; 0x13c6 <vfprintf+0x33a>
    13c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    13c2:	34 ff       	sbrs	r19, 4
    13c4:	81 e3       	ldi	r24, 0x31	; 49
    13c6:	b7 01       	movw	r22, r14
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	4e c0       	rjmp	.+156    	; 0x1468 <vfprintf+0x3dc>
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	81 33       	cpi	r24, 0x31	; 49
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <vfprintf+0x34c>
    13d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13d4:	9f 7e       	andi	r25, 0xEF	; 239
    13d6:	9c 87       	std	Y+12, r25	; 0x0c
    13d8:	b7 01       	movw	r22, r14
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    13e0:	11 11       	cpse	r17, r1
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <vfprintf+0x362>
    13e4:	94 fc       	sbrc	r9, 4
    13e6:	18 c0       	rjmp	.+48     	; 0x1418 <vfprintf+0x38c>
    13e8:	85 e6       	ldi	r24, 0x65	; 101
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	17 c0       	rjmp	.+46     	; 0x141c <vfprintf+0x390>
    13ee:	b7 01       	movw	r22, r14
    13f0:	8e e2       	ldi	r24, 0x2E	; 46
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    13f8:	1e 5f       	subi	r17, 0xFE	; 254
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	01 e0       	ldi	r16, 0x01	; 1
    13fe:	08 0f       	add	r16, r24
    1400:	f3 01       	movw	r30, r6
    1402:	e8 0f       	add	r30, r24
    1404:	f1 1d       	adc	r31, r1
    1406:	80 81       	ld	r24, Z
    1408:	b7 01       	movw	r22, r14
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1410:	80 2f       	mov	r24, r16
    1412:	01 13       	cpse	r16, r17
    1414:	f3 cf       	rjmp	.-26     	; 0x13fc <vfprintf+0x370>
    1416:	e6 cf       	rjmp	.-52     	; 0x13e4 <vfprintf+0x358>
    1418:	85 e4       	ldi	r24, 0x45	; 69
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	b7 01       	movw	r22, r14
    141e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1422:	d7 fc       	sbrc	r13, 7
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <vfprintf+0x3a6>
    1426:	c1 14       	cp	r12, r1
    1428:	d1 04       	cpc	r13, r1
    142a:	41 f4       	brne	.+16     	; 0x143c <vfprintf+0x3b0>
    142c:	ec 85       	ldd	r30, Y+12	; 0x0c
    142e:	e4 ff       	sbrs	r30, 4
    1430:	05 c0       	rjmp	.+10     	; 0x143c <vfprintf+0x3b0>
    1432:	d1 94       	neg	r13
    1434:	c1 94       	neg	r12
    1436:	d1 08       	sbc	r13, r1
    1438:	8d e2       	ldi	r24, 0x2D	; 45
    143a:	01 c0       	rjmp	.+2      	; 0x143e <vfprintf+0x3b2>
    143c:	8b e2       	ldi	r24, 0x2B	; 43
    143e:	b7 01       	movw	r22, r14
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1446:	80 e3       	ldi	r24, 0x30	; 48
    1448:	2a e0       	ldi	r18, 0x0A	; 10
    144a:	c2 16       	cp	r12, r18
    144c:	d1 04       	cpc	r13, r1
    144e:	2c f0       	brlt	.+10     	; 0x145a <vfprintf+0x3ce>
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	fa e0       	ldi	r31, 0x0A	; 10
    1454:	cf 1a       	sub	r12, r31
    1456:	d1 08       	sbc	r13, r1
    1458:	f7 cf       	rjmp	.-18     	; 0x1448 <vfprintf+0x3bc>
    145a:	b7 01       	movw	r22, r14
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1462:	b7 01       	movw	r22, r14
    1464:	c6 01       	movw	r24, r12
    1466:	c0 96       	adiw	r24, 0x30	; 48
    1468:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    146c:	54 c1       	rjmp	.+680    	; 0x1716 <vfprintf+0x68a>
    146e:	83 36       	cpi	r24, 0x63	; 99
    1470:	31 f0       	breq	.+12     	; 0x147e <vfprintf+0x3f2>
    1472:	83 37       	cpi	r24, 0x73	; 115
    1474:	79 f0       	breq	.+30     	; 0x1494 <vfprintf+0x408>
    1476:	83 35       	cpi	r24, 0x53	; 83
    1478:	09 f0       	breq	.+2      	; 0x147c <vfprintf+0x3f0>
    147a:	56 c0       	rjmp	.+172    	; 0x1528 <vfprintf+0x49c>
    147c:	20 c0       	rjmp	.+64     	; 0x14be <vfprintf+0x432>
    147e:	56 01       	movw	r10, r12
    1480:	32 e0       	ldi	r19, 0x02	; 2
    1482:	a3 0e       	add	r10, r19
    1484:	b1 1c       	adc	r11, r1
    1486:	f6 01       	movw	r30, r12
    1488:	80 81       	ld	r24, Z
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	01 e0       	ldi	r16, 0x01	; 1
    148e:	10 e0       	ldi	r17, 0x00	; 0
    1490:	63 01       	movw	r12, r6
    1492:	12 c0       	rjmp	.+36     	; 0x14b8 <vfprintf+0x42c>
    1494:	56 01       	movw	r10, r12
    1496:	f2 e0       	ldi	r31, 0x02	; 2
    1498:	af 0e       	add	r10, r31
    149a:	b1 1c       	adc	r11, r1
    149c:	f6 01       	movw	r30, r12
    149e:	c0 80       	ld	r12, Z
    14a0:	d1 80       	ldd	r13, Z+1	; 0x01
    14a2:	96 fe       	sbrs	r9, 6
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <vfprintf+0x420>
    14a6:	61 2f       	mov	r22, r17
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0x424>
    14ac:	6f ef       	ldi	r22, 0xFF	; 255
    14ae:	7f ef       	ldi	r23, 0xFF	; 255
    14b0:	c6 01       	movw	r24, r12
    14b2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <strnlen>
    14b6:	8c 01       	movw	r16, r24
    14b8:	f9 2d       	mov	r31, r9
    14ba:	ff 77       	andi	r31, 0x7F	; 127
    14bc:	14 c0       	rjmp	.+40     	; 0x14e6 <vfprintf+0x45a>
    14be:	56 01       	movw	r10, r12
    14c0:	22 e0       	ldi	r18, 0x02	; 2
    14c2:	a2 0e       	add	r10, r18
    14c4:	b1 1c       	adc	r11, r1
    14c6:	f6 01       	movw	r30, r12
    14c8:	c0 80       	ld	r12, Z
    14ca:	d1 80       	ldd	r13, Z+1	; 0x01
    14cc:	96 fe       	sbrs	r9, 6
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <vfprintf+0x44a>
    14d0:	61 2f       	mov	r22, r17
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0x44e>
    14d6:	6f ef       	ldi	r22, 0xFF	; 255
    14d8:	7f ef       	ldi	r23, 0xFF	; 255
    14da:	c6 01       	movw	r24, r12
    14dc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <strnlen_P>
    14e0:	8c 01       	movw	r16, r24
    14e2:	f9 2d       	mov	r31, r9
    14e4:	f0 68       	ori	r31, 0x80	; 128
    14e6:	9f 2e       	mov	r9, r31
    14e8:	f3 fd       	sbrc	r31, 3
    14ea:	1a c0       	rjmp	.+52     	; 0x1520 <vfprintf+0x494>
    14ec:	85 2d       	mov	r24, r5
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	08 17       	cp	r16, r24
    14f2:	19 07       	cpc	r17, r25
    14f4:	a8 f4       	brcc	.+42     	; 0x1520 <vfprintf+0x494>
    14f6:	b7 01       	movw	r22, r14
    14f8:	80 e2       	ldi	r24, 0x20	; 32
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1500:	5a 94       	dec	r5
    1502:	f4 cf       	rjmp	.-24     	; 0x14ec <vfprintf+0x460>
    1504:	f6 01       	movw	r30, r12
    1506:	97 fc       	sbrc	r9, 7
    1508:	85 91       	lpm	r24, Z+
    150a:	97 fe       	sbrs	r9, 7
    150c:	81 91       	ld	r24, Z+
    150e:	6f 01       	movw	r12, r30
    1510:	b7 01       	movw	r22, r14
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1518:	51 10       	cpse	r5, r1
    151a:	5a 94       	dec	r5
    151c:	01 50       	subi	r16, 0x01	; 1
    151e:	11 09       	sbc	r17, r1
    1520:	01 15       	cp	r16, r1
    1522:	11 05       	cpc	r17, r1
    1524:	79 f7       	brne	.-34     	; 0x1504 <vfprintf+0x478>
    1526:	f7 c0       	rjmp	.+494    	; 0x1716 <vfprintf+0x68a>
    1528:	84 36       	cpi	r24, 0x64	; 100
    152a:	11 f0       	breq	.+4      	; 0x1530 <vfprintf+0x4a4>
    152c:	89 36       	cpi	r24, 0x69	; 105
    152e:	61 f5       	brne	.+88     	; 0x1588 <vfprintf+0x4fc>
    1530:	56 01       	movw	r10, r12
    1532:	97 fe       	sbrs	r9, 7
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <vfprintf+0x4bc>
    1536:	24 e0       	ldi	r18, 0x04	; 4
    1538:	a2 0e       	add	r10, r18
    153a:	b1 1c       	adc	r11, r1
    153c:	f6 01       	movw	r30, r12
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	0a c0       	rjmp	.+20     	; 0x155c <vfprintf+0x4d0>
    1548:	f2 e0       	ldi	r31, 0x02	; 2
    154a:	af 0e       	add	r10, r31
    154c:	b1 1c       	adc	r11, r1
    154e:	f6 01       	movw	r30, r12
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	07 2e       	mov	r0, r23
    1556:	00 0c       	add	r0, r0
    1558:	88 0b       	sbc	r24, r24
    155a:	99 0b       	sbc	r25, r25
    155c:	f9 2d       	mov	r31, r9
    155e:	ff 76       	andi	r31, 0x6F	; 111
    1560:	9f 2e       	mov	r9, r31
    1562:	97 ff       	sbrs	r25, 7
    1564:	09 c0       	rjmp	.+18     	; 0x1578 <vfprintf+0x4ec>
    1566:	90 95       	com	r25
    1568:	80 95       	com	r24
    156a:	70 95       	com	r23
    156c:	61 95       	neg	r22
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	8f 4f       	sbci	r24, 0xFF	; 255
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	f0 68       	ori	r31, 0x80	; 128
    1576:	9f 2e       	mov	r9, r31
    1578:	2a e0       	ldi	r18, 0x0A	; 10
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	a3 01       	movw	r20, r6
    157e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__ultoa_invert>
    1582:	c8 2e       	mov	r12, r24
    1584:	c6 18       	sub	r12, r6
    1586:	3f c0       	rjmp	.+126    	; 0x1606 <vfprintf+0x57a>
    1588:	09 2d       	mov	r16, r9
    158a:	85 37       	cpi	r24, 0x75	; 117
    158c:	21 f4       	brne	.+8      	; 0x1596 <vfprintf+0x50a>
    158e:	0f 7e       	andi	r16, 0xEF	; 239
    1590:	2a e0       	ldi	r18, 0x0A	; 10
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	1d c0       	rjmp	.+58     	; 0x15d0 <vfprintf+0x544>
    1596:	09 7f       	andi	r16, 0xF9	; 249
    1598:	8f 36       	cpi	r24, 0x6F	; 111
    159a:	91 f0       	breq	.+36     	; 0x15c0 <vfprintf+0x534>
    159c:	18 f4       	brcc	.+6      	; 0x15a4 <vfprintf+0x518>
    159e:	88 35       	cpi	r24, 0x58	; 88
    15a0:	59 f0       	breq	.+22     	; 0x15b8 <vfprintf+0x52c>
    15a2:	c3 c0       	rjmp	.+390    	; 0x172a <vfprintf+0x69e>
    15a4:	80 37       	cpi	r24, 0x70	; 112
    15a6:	19 f0       	breq	.+6      	; 0x15ae <vfprintf+0x522>
    15a8:	88 37       	cpi	r24, 0x78	; 120
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <vfprintf+0x524>
    15ac:	be c0       	rjmp	.+380    	; 0x172a <vfprintf+0x69e>
    15ae:	00 61       	ori	r16, 0x10	; 16
    15b0:	04 ff       	sbrs	r16, 4
    15b2:	09 c0       	rjmp	.+18     	; 0x15c6 <vfprintf+0x53a>
    15b4:	04 60       	ori	r16, 0x04	; 4
    15b6:	07 c0       	rjmp	.+14     	; 0x15c6 <vfprintf+0x53a>
    15b8:	94 fe       	sbrs	r9, 4
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <vfprintf+0x540>
    15bc:	06 60       	ori	r16, 0x06	; 6
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <vfprintf+0x540>
    15c0:	28 e0       	ldi	r18, 0x08	; 8
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <vfprintf+0x544>
    15c6:	20 e1       	ldi	r18, 0x10	; 16
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <vfprintf+0x544>
    15cc:	20 e1       	ldi	r18, 0x10	; 16
    15ce:	32 e0       	ldi	r19, 0x02	; 2
    15d0:	56 01       	movw	r10, r12
    15d2:	07 ff       	sbrs	r16, 7
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <vfprintf+0x55c>
    15d6:	84 e0       	ldi	r24, 0x04	; 4
    15d8:	a8 0e       	add	r10, r24
    15da:	b1 1c       	adc	r11, r1
    15dc:	f6 01       	movw	r30, r12
    15de:	60 81       	ld	r22, Z
    15e0:	71 81       	ldd	r23, Z+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	08 c0       	rjmp	.+16     	; 0x15f8 <vfprintf+0x56c>
    15e8:	f2 e0       	ldi	r31, 0x02	; 2
    15ea:	af 0e       	add	r10, r31
    15ec:	b1 1c       	adc	r11, r1
    15ee:	f6 01       	movw	r30, r12
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a3 01       	movw	r20, r6
    15fa:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__ultoa_invert>
    15fe:	c8 2e       	mov	r12, r24
    1600:	c6 18       	sub	r12, r6
    1602:	0f 77       	andi	r16, 0x7F	; 127
    1604:	90 2e       	mov	r9, r16
    1606:	96 fe       	sbrs	r9, 6
    1608:	0b c0       	rjmp	.+22     	; 0x1620 <vfprintf+0x594>
    160a:	09 2d       	mov	r16, r9
    160c:	0e 7f       	andi	r16, 0xFE	; 254
    160e:	c1 16       	cp	r12, r17
    1610:	50 f4       	brcc	.+20     	; 0x1626 <vfprintf+0x59a>
    1612:	94 fe       	sbrs	r9, 4
    1614:	0a c0       	rjmp	.+20     	; 0x162a <vfprintf+0x59e>
    1616:	92 fc       	sbrc	r9, 2
    1618:	08 c0       	rjmp	.+16     	; 0x162a <vfprintf+0x59e>
    161a:	09 2d       	mov	r16, r9
    161c:	0e 7e       	andi	r16, 0xEE	; 238
    161e:	05 c0       	rjmp	.+10     	; 0x162a <vfprintf+0x59e>
    1620:	dc 2c       	mov	r13, r12
    1622:	09 2d       	mov	r16, r9
    1624:	03 c0       	rjmp	.+6      	; 0x162c <vfprintf+0x5a0>
    1626:	dc 2c       	mov	r13, r12
    1628:	01 c0       	rjmp	.+2      	; 0x162c <vfprintf+0x5a0>
    162a:	d1 2e       	mov	r13, r17
    162c:	04 ff       	sbrs	r16, 4
    162e:	0d c0       	rjmp	.+26     	; 0x164a <vfprintf+0x5be>
    1630:	fe 01       	movw	r30, r28
    1632:	ec 0d       	add	r30, r12
    1634:	f1 1d       	adc	r31, r1
    1636:	80 81       	ld	r24, Z
    1638:	80 33       	cpi	r24, 0x30	; 48
    163a:	11 f4       	brne	.+4      	; 0x1640 <vfprintf+0x5b4>
    163c:	09 7e       	andi	r16, 0xE9	; 233
    163e:	09 c0       	rjmp	.+18     	; 0x1652 <vfprintf+0x5c6>
    1640:	02 ff       	sbrs	r16, 2
    1642:	06 c0       	rjmp	.+12     	; 0x1650 <vfprintf+0x5c4>
    1644:	d3 94       	inc	r13
    1646:	d3 94       	inc	r13
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <vfprintf+0x5c6>
    164a:	80 2f       	mov	r24, r16
    164c:	86 78       	andi	r24, 0x86	; 134
    164e:	09 f0       	breq	.+2      	; 0x1652 <vfprintf+0x5c6>
    1650:	d3 94       	inc	r13
    1652:	03 fd       	sbrc	r16, 3
    1654:	11 c0       	rjmp	.+34     	; 0x1678 <vfprintf+0x5ec>
    1656:	00 ff       	sbrs	r16, 0
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <vfprintf+0x5da>
    165a:	1c 2d       	mov	r17, r12
    165c:	d5 14       	cp	r13, r5
    165e:	80 f4       	brcc	.+32     	; 0x1680 <vfprintf+0x5f4>
    1660:	15 0d       	add	r17, r5
    1662:	1d 19       	sub	r17, r13
    1664:	0d c0       	rjmp	.+26     	; 0x1680 <vfprintf+0x5f4>
    1666:	d5 14       	cp	r13, r5
    1668:	58 f4       	brcc	.+22     	; 0x1680 <vfprintf+0x5f4>
    166a:	b7 01       	movw	r22, r14
    166c:	80 e2       	ldi	r24, 0x20	; 32
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1674:	d3 94       	inc	r13
    1676:	f7 cf       	rjmp	.-18     	; 0x1666 <vfprintf+0x5da>
    1678:	d5 14       	cp	r13, r5
    167a:	10 f4       	brcc	.+4      	; 0x1680 <vfprintf+0x5f4>
    167c:	5d 18       	sub	r5, r13
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <vfprintf+0x5f6>
    1680:	51 2c       	mov	r5, r1
    1682:	04 ff       	sbrs	r16, 4
    1684:	10 c0       	rjmp	.+32     	; 0x16a6 <vfprintf+0x61a>
    1686:	b7 01       	movw	r22, r14
    1688:	80 e3       	ldi	r24, 0x30	; 48
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1690:	02 ff       	sbrs	r16, 2
    1692:	17 c0       	rjmp	.+46     	; 0x16c2 <vfprintf+0x636>
    1694:	01 fd       	sbrc	r16, 1
    1696:	03 c0       	rjmp	.+6      	; 0x169e <vfprintf+0x612>
    1698:	88 e7       	ldi	r24, 0x78	; 120
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <vfprintf+0x616>
    169e:	88 e5       	ldi	r24, 0x58	; 88
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	b7 01       	movw	r22, r14
    16a4:	0c c0       	rjmp	.+24     	; 0x16be <vfprintf+0x632>
    16a6:	80 2f       	mov	r24, r16
    16a8:	86 78       	andi	r24, 0x86	; 134
    16aa:	59 f0       	breq	.+22     	; 0x16c2 <vfprintf+0x636>
    16ac:	01 ff       	sbrs	r16, 1
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x628>
    16b0:	8b e2       	ldi	r24, 0x2B	; 43
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <vfprintf+0x62a>
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	07 fd       	sbrc	r16, 7
    16b8:	8d e2       	ldi	r24, 0x2D	; 45
    16ba:	b7 01       	movw	r22, r14
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    16c2:	c1 16       	cp	r12, r17
    16c4:	38 f4       	brcc	.+14     	; 0x16d4 <vfprintf+0x648>
    16c6:	b7 01       	movw	r22, r14
    16c8:	80 e3       	ldi	r24, 0x30	; 48
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    16d0:	11 50       	subi	r17, 0x01	; 1
    16d2:	f7 cf       	rjmp	.-18     	; 0x16c2 <vfprintf+0x636>
    16d4:	ca 94       	dec	r12
    16d6:	f3 01       	movw	r30, r6
    16d8:	ec 0d       	add	r30, r12
    16da:	f1 1d       	adc	r31, r1
    16dc:	80 81       	ld	r24, Z
    16de:	b7 01       	movw	r22, r14
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    16e6:	c1 10       	cpse	r12, r1
    16e8:	f5 cf       	rjmp	.-22     	; 0x16d4 <vfprintf+0x648>
    16ea:	15 c0       	rjmp	.+42     	; 0x1716 <vfprintf+0x68a>
    16ec:	f4 e0       	ldi	r31, 0x04	; 4
    16ee:	f5 15       	cp	r31, r5
    16f0:	60 f5       	brcc	.+88     	; 0x174a <vfprintf+0x6be>
    16f2:	84 e0       	ldi	r24, 0x04	; 4
    16f4:	58 1a       	sub	r5, r24
    16f6:	93 fe       	sbrs	r9, 3
    16f8:	1f c0       	rjmp	.+62     	; 0x1738 <vfprintf+0x6ac>
    16fa:	01 11       	cpse	r16, r1
    16fc:	27 c0       	rjmp	.+78     	; 0x174c <vfprintf+0x6c0>
    16fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1700:	23 ff       	sbrs	r18, 3
    1702:	2a c0       	rjmp	.+84     	; 0x1758 <vfprintf+0x6cc>
    1704:	04 e5       	ldi	r16, 0x54	; 84
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	39 2d       	mov	r19, r9
    170a:	30 71       	andi	r19, 0x10	; 16
    170c:	93 2e       	mov	r9, r19
    170e:	f8 01       	movw	r30, r16
    1710:	84 91       	lpm	r24, Z
    1712:	81 11       	cpse	r24, r1
    1714:	24 c0       	rjmp	.+72     	; 0x175e <vfprintf+0x6d2>
    1716:	55 20       	and	r5, r5
    1718:	09 f4       	brne	.+2      	; 0x171c <vfprintf+0x690>
    171a:	e4 cc       	rjmp	.-1592   	; 0x10e4 <vfprintf+0x58>
    171c:	b7 01       	movw	r22, r14
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1726:	5a 94       	dec	r5
    1728:	f6 cf       	rjmp	.-20     	; 0x1716 <vfprintf+0x68a>
    172a:	f7 01       	movw	r30, r14
    172c:	86 81       	ldd	r24, Z+6	; 0x06
    172e:	97 81       	ldd	r25, Z+7	; 0x07
    1730:	26 c0       	rjmp	.+76     	; 0x177e <vfprintf+0x6f2>
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	9f ef       	ldi	r25, 0xFF	; 255
    1736:	23 c0       	rjmp	.+70     	; 0x177e <vfprintf+0x6f2>
    1738:	b7 01       	movw	r22, r14
    173a:	80 e2       	ldi	r24, 0x20	; 32
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1742:	5a 94       	dec	r5
    1744:	51 10       	cpse	r5, r1
    1746:	f8 cf       	rjmp	.-16     	; 0x1738 <vfprintf+0x6ac>
    1748:	d8 cf       	rjmp	.-80     	; 0x16fa <vfprintf+0x66e>
    174a:	51 2c       	mov	r5, r1
    174c:	b7 01       	movw	r22, r14
    174e:	80 2f       	mov	r24, r16
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    1756:	d3 cf       	rjmp	.-90     	; 0x16fe <vfprintf+0x672>
    1758:	08 e5       	ldi	r16, 0x58	; 88
    175a:	10 e0       	ldi	r17, 0x00	; 0
    175c:	d5 cf       	rjmp	.-86     	; 0x1708 <vfprintf+0x67c>
    175e:	91 10       	cpse	r9, r1
    1760:	80 52       	subi	r24, 0x20	; 32
    1762:	b7 01       	movw	r22, r14
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <fputc>
    176a:	0f 5f       	subi	r16, 0xFF	; 255
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	cf cf       	rjmp	.-98     	; 0x170e <vfprintf+0x682>
    1770:	23 e0       	ldi	r18, 0x03	; 3
    1772:	25 15       	cp	r18, r5
    1774:	10 f4       	brcc	.+4      	; 0x177a <vfprintf+0x6ee>
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	bd cf       	rjmp	.-134    	; 0x16f4 <vfprintf+0x668>
    177a:	51 2c       	mov	r5, r1
    177c:	c0 cf       	rjmp	.-128    	; 0x16fe <vfprintf+0x672>
    177e:	60 96       	adiw	r28, 0x10	; 16
    1780:	e2 e1       	ldi	r30, 0x12	; 18
    1782:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__epilogue_restores__>

00001786 <__prologue_saves__>:
    1786:	2f 92       	push	r2
    1788:	3f 92       	push	r3
    178a:	4f 92       	push	r4
    178c:	5f 92       	push	r5
    178e:	6f 92       	push	r6
    1790:	7f 92       	push	r7
    1792:	8f 92       	push	r8
    1794:	9f 92       	push	r9
    1796:	af 92       	push	r10
    1798:	bf 92       	push	r11
    179a:	cf 92       	push	r12
    179c:	df 92       	push	r13
    179e:	ef 92       	push	r14
    17a0:	ff 92       	push	r15
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	ca 1b       	sub	r28, r26
    17b0:	db 0b       	sbc	r29, r27
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	09 94       	ijmp

000017be <__epilogue_restores__>:
    17be:	2a 88       	ldd	r2, Y+18	; 0x12
    17c0:	39 88       	ldd	r3, Y+17	; 0x11
    17c2:	48 88       	ldd	r4, Y+16	; 0x10
    17c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    17c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    17c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    17ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    17cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    17ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d0:	b9 84       	ldd	r11, Y+9	; 0x09
    17d2:	c8 84       	ldd	r12, Y+8	; 0x08
    17d4:	df 80       	ldd	r13, Y+7	; 0x07
    17d6:	ee 80       	ldd	r14, Y+6	; 0x06
    17d8:	fd 80       	ldd	r15, Y+5	; 0x05
    17da:	0c 81       	ldd	r16, Y+4	; 0x04
    17dc:	1b 81       	ldd	r17, Y+3	; 0x03
    17de:	aa 81       	ldd	r26, Y+2	; 0x02
    17e0:	b9 81       	ldd	r27, Y+1	; 0x01
    17e2:	ce 0f       	add	r28, r30
    17e4:	d1 1d       	adc	r29, r1
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	ed 01       	movw	r28, r26
    17f2:	08 95       	ret

000017f4 <__ftoa_engine>:
    17f4:	28 30       	cpi	r18, 0x08	; 8
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <__ftoa_engine+0x6>
    17f8:	27 e0       	ldi	r18, 0x07	; 7
    17fa:	33 27       	eor	r19, r19
    17fc:	da 01       	movw	r26, r20
    17fe:	99 0f       	add	r25, r25
    1800:	31 1d       	adc	r19, r1
    1802:	87 fd       	sbrc	r24, 7
    1804:	91 60       	ori	r25, 0x01	; 1
    1806:	00 96       	adiw	r24, 0x00	; 0
    1808:	61 05       	cpc	r22, r1
    180a:	71 05       	cpc	r23, r1
    180c:	39 f4       	brne	.+14     	; 0x181c <__ftoa_engine+0x28>
    180e:	32 60       	ori	r19, 0x02	; 2
    1810:	2e 5f       	subi	r18, 0xFE	; 254
    1812:	3d 93       	st	X+, r19
    1814:	30 e3       	ldi	r19, 0x30	; 48
    1816:	2a 95       	dec	r18
    1818:	e1 f7       	brne	.-8      	; 0x1812 <__ftoa_engine+0x1e>
    181a:	08 95       	ret
    181c:	9f 3f       	cpi	r25, 0xFF	; 255
    181e:	30 f0       	brcs	.+12     	; 0x182c <__ftoa_engine+0x38>
    1820:	80 38       	cpi	r24, 0x80	; 128
    1822:	71 05       	cpc	r23, r1
    1824:	61 05       	cpc	r22, r1
    1826:	09 f0       	breq	.+2      	; 0x182a <__ftoa_engine+0x36>
    1828:	3c 5f       	subi	r19, 0xFC	; 252
    182a:	3c 5f       	subi	r19, 0xFC	; 252
    182c:	3d 93       	st	X+, r19
    182e:	91 30       	cpi	r25, 0x01	; 1
    1830:	08 f0       	brcs	.+2      	; 0x1834 <__ftoa_engine+0x40>
    1832:	80 68       	ori	r24, 0x80	; 128
    1834:	91 1d       	adc	r25, r1
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	1f 93       	push	r17
    183c:	0f 93       	push	r16
    183e:	ff 92       	push	r15
    1840:	ef 92       	push	r14
    1842:	19 2f       	mov	r17, r25
    1844:	98 7f       	andi	r25, 0xF8	; 248
    1846:	96 95       	lsr	r25
    1848:	e9 2f       	mov	r30, r25
    184a:	96 95       	lsr	r25
    184c:	96 95       	lsr	r25
    184e:	e9 0f       	add	r30, r25
    1850:	ff 27       	eor	r31, r31
    1852:	ea 54       	subi	r30, 0x4A	; 74
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	99 27       	eor	r25, r25
    1858:	33 27       	eor	r19, r19
    185a:	ee 24       	eor	r14, r14
    185c:	ff 24       	eor	r15, r15
    185e:	a7 01       	movw	r20, r14
    1860:	e7 01       	movw	r28, r14
    1862:	05 90       	lpm	r0, Z+
    1864:	08 94       	sec
    1866:	07 94       	ror	r0
    1868:	28 f4       	brcc	.+10     	; 0x1874 <__ftoa_engine+0x80>
    186a:	36 0f       	add	r19, r22
    186c:	e7 1e       	adc	r14, r23
    186e:	f8 1e       	adc	r15, r24
    1870:	49 1f       	adc	r20, r25
    1872:	51 1d       	adc	r21, r1
    1874:	66 0f       	add	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	88 1f       	adc	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	06 94       	lsr	r0
    187e:	a1 f7       	brne	.-24     	; 0x1868 <__ftoa_engine+0x74>
    1880:	05 90       	lpm	r0, Z+
    1882:	07 94       	ror	r0
    1884:	28 f4       	brcc	.+10     	; 0x1890 <__ftoa_engine+0x9c>
    1886:	e7 0e       	add	r14, r23
    1888:	f8 1e       	adc	r15, r24
    188a:	49 1f       	adc	r20, r25
    188c:	56 1f       	adc	r21, r22
    188e:	c1 1d       	adc	r28, r1
    1890:	77 0f       	add	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	66 1f       	adc	r22, r22
    1898:	06 94       	lsr	r0
    189a:	a1 f7       	brne	.-24     	; 0x1884 <__ftoa_engine+0x90>
    189c:	05 90       	lpm	r0, Z+
    189e:	07 94       	ror	r0
    18a0:	28 f4       	brcc	.+10     	; 0x18ac <__ftoa_engine+0xb8>
    18a2:	f8 0e       	add	r15, r24
    18a4:	49 1f       	adc	r20, r25
    18a6:	56 1f       	adc	r21, r22
    18a8:	c7 1f       	adc	r28, r23
    18aa:	d1 1d       	adc	r29, r1
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	66 1f       	adc	r22, r22
    18b2:	77 1f       	adc	r23, r23
    18b4:	06 94       	lsr	r0
    18b6:	a1 f7       	brne	.-24     	; 0x18a0 <__ftoa_engine+0xac>
    18b8:	05 90       	lpm	r0, Z+
    18ba:	07 94       	ror	r0
    18bc:	20 f4       	brcc	.+8      	; 0x18c6 <__ftoa_engine+0xd2>
    18be:	49 0f       	add	r20, r25
    18c0:	56 1f       	adc	r21, r22
    18c2:	c7 1f       	adc	r28, r23
    18c4:	d8 1f       	adc	r29, r24
    18c6:	99 0f       	add	r25, r25
    18c8:	66 1f       	adc	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	06 94       	lsr	r0
    18d0:	a9 f7       	brne	.-22     	; 0x18bc <__ftoa_engine+0xc8>
    18d2:	84 91       	lpm	r24, Z
    18d4:	10 95       	com	r17
    18d6:	17 70       	andi	r17, 0x07	; 7
    18d8:	41 f0       	breq	.+16     	; 0x18ea <__ftoa_engine+0xf6>
    18da:	d6 95       	lsr	r29
    18dc:	c7 95       	ror	r28
    18de:	57 95       	ror	r21
    18e0:	47 95       	ror	r20
    18e2:	f7 94       	ror	r15
    18e4:	e7 94       	ror	r14
    18e6:	1a 95       	dec	r17
    18e8:	c1 f7       	brne	.-16     	; 0x18da <__ftoa_engine+0xe6>
    18ea:	ec e5       	ldi	r30, 0x5C	; 92
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	68 94       	set
    18f0:	15 90       	lpm	r1, Z+
    18f2:	15 91       	lpm	r17, Z+
    18f4:	35 91       	lpm	r19, Z+
    18f6:	65 91       	lpm	r22, Z+
    18f8:	95 91       	lpm	r25, Z+
    18fa:	05 90       	lpm	r0, Z+
    18fc:	7f e2       	ldi	r23, 0x2F	; 47
    18fe:	73 95       	inc	r23
    1900:	e1 18       	sub	r14, r1
    1902:	f1 0a       	sbc	r15, r17
    1904:	43 0b       	sbc	r20, r19
    1906:	56 0b       	sbc	r21, r22
    1908:	c9 0b       	sbc	r28, r25
    190a:	d0 09       	sbc	r29, r0
    190c:	c0 f7       	brcc	.-16     	; 0x18fe <__ftoa_engine+0x10a>
    190e:	e1 0c       	add	r14, r1
    1910:	f1 1e       	adc	r15, r17
    1912:	43 1f       	adc	r20, r19
    1914:	56 1f       	adc	r21, r22
    1916:	c9 1f       	adc	r28, r25
    1918:	d0 1d       	adc	r29, r0
    191a:	7e f4       	brtc	.+30     	; 0x193a <__ftoa_engine+0x146>
    191c:	70 33       	cpi	r23, 0x30	; 48
    191e:	11 f4       	brne	.+4      	; 0x1924 <__ftoa_engine+0x130>
    1920:	8a 95       	dec	r24
    1922:	e6 cf       	rjmp	.-52     	; 0x18f0 <__ftoa_engine+0xfc>
    1924:	e8 94       	clt
    1926:	01 50       	subi	r16, 0x01	; 1
    1928:	30 f0       	brcs	.+12     	; 0x1936 <__ftoa_engine+0x142>
    192a:	08 0f       	add	r16, r24
    192c:	0a f4       	brpl	.+2      	; 0x1930 <__ftoa_engine+0x13c>
    192e:	00 27       	eor	r16, r16
    1930:	02 17       	cp	r16, r18
    1932:	08 f4       	brcc	.+2      	; 0x1936 <__ftoa_engine+0x142>
    1934:	20 2f       	mov	r18, r16
    1936:	23 95       	inc	r18
    1938:	02 2f       	mov	r16, r18
    193a:	7a 33       	cpi	r23, 0x3A	; 58
    193c:	28 f0       	brcs	.+10     	; 0x1948 <__ftoa_engine+0x154>
    193e:	79 e3       	ldi	r23, 0x39	; 57
    1940:	7d 93       	st	X+, r23
    1942:	2a 95       	dec	r18
    1944:	e9 f7       	brne	.-6      	; 0x1940 <__ftoa_engine+0x14c>
    1946:	10 c0       	rjmp	.+32     	; 0x1968 <__ftoa_engine+0x174>
    1948:	7d 93       	st	X+, r23
    194a:	2a 95       	dec	r18
    194c:	89 f6       	brne	.-94     	; 0x18f0 <__ftoa_engine+0xfc>
    194e:	06 94       	lsr	r0
    1950:	97 95       	ror	r25
    1952:	67 95       	ror	r22
    1954:	37 95       	ror	r19
    1956:	17 95       	ror	r17
    1958:	17 94       	ror	r1
    195a:	e1 18       	sub	r14, r1
    195c:	f1 0a       	sbc	r15, r17
    195e:	43 0b       	sbc	r20, r19
    1960:	56 0b       	sbc	r21, r22
    1962:	c9 0b       	sbc	r28, r25
    1964:	d0 09       	sbc	r29, r0
    1966:	98 f0       	brcs	.+38     	; 0x198e <__ftoa_engine+0x19a>
    1968:	23 95       	inc	r18
    196a:	7e 91       	ld	r23, -X
    196c:	73 95       	inc	r23
    196e:	7a 33       	cpi	r23, 0x3A	; 58
    1970:	08 f0       	brcs	.+2      	; 0x1974 <__ftoa_engine+0x180>
    1972:	70 e3       	ldi	r23, 0x30	; 48
    1974:	7c 93       	st	X, r23
    1976:	20 13       	cpse	r18, r16
    1978:	b8 f7       	brcc	.-18     	; 0x1968 <__ftoa_engine+0x174>
    197a:	7e 91       	ld	r23, -X
    197c:	70 61       	ori	r23, 0x10	; 16
    197e:	7d 93       	st	X+, r23
    1980:	30 f0       	brcs	.+12     	; 0x198e <__ftoa_engine+0x19a>
    1982:	83 95       	inc	r24
    1984:	71 e3       	ldi	r23, 0x31	; 49
    1986:	7d 93       	st	X+, r23
    1988:	70 e3       	ldi	r23, 0x30	; 48
    198a:	2a 95       	dec	r18
    198c:	e1 f7       	brne	.-8      	; 0x1986 <__ftoa_engine+0x192>
    198e:	11 24       	eor	r1, r1
    1990:	ef 90       	pop	r14
    1992:	ff 90       	pop	r15
    1994:	0f 91       	pop	r16
    1996:	1f 91       	pop	r17
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	99 27       	eor	r25, r25
    199e:	87 fd       	sbrc	r24, 7
    19a0:	90 95       	com	r25
    19a2:	08 95       	ret

000019a4 <strnlen_P>:
    19a4:	fc 01       	movw	r30, r24
    19a6:	05 90       	lpm	r0, Z+
    19a8:	61 50       	subi	r22, 0x01	; 1
    19aa:	70 40       	sbci	r23, 0x00	; 0
    19ac:	01 10       	cpse	r0, r1
    19ae:	d8 f7       	brcc	.-10     	; 0x19a6 <strnlen_P+0x2>
    19b0:	80 95       	com	r24
    19b2:	90 95       	com	r25
    19b4:	8e 0f       	add	r24, r30
    19b6:	9f 1f       	adc	r25, r31
    19b8:	08 95       	ret

000019ba <strnlen>:
    19ba:	fc 01       	movw	r30, r24
    19bc:	61 50       	subi	r22, 0x01	; 1
    19be:	70 40       	sbci	r23, 0x00	; 0
    19c0:	01 90       	ld	r0, Z+
    19c2:	01 10       	cpse	r0, r1
    19c4:	d8 f7       	brcc	.-10     	; 0x19bc <strnlen+0x2>
    19c6:	80 95       	com	r24
    19c8:	90 95       	com	r25
    19ca:	8e 0f       	add	r24, r30
    19cc:	9f 1f       	adc	r25, r31
    19ce:	08 95       	ret

000019d0 <fputc>:
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	fb 01       	movw	r30, r22
    19da:	23 81       	ldd	r18, Z+3	; 0x03
    19dc:	21 fd       	sbrc	r18, 1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <fputc+0x16>
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	9f ef       	ldi	r25, 0xFF	; 255
    19e4:	2c c0       	rjmp	.+88     	; 0x1a3e <fputc+0x6e>
    19e6:	22 ff       	sbrs	r18, 2
    19e8:	16 c0       	rjmp	.+44     	; 0x1a16 <fputc+0x46>
    19ea:	46 81       	ldd	r20, Z+6	; 0x06
    19ec:	57 81       	ldd	r21, Z+7	; 0x07
    19ee:	24 81       	ldd	r18, Z+4	; 0x04
    19f0:	35 81       	ldd	r19, Z+5	; 0x05
    19f2:	42 17       	cp	r20, r18
    19f4:	53 07       	cpc	r21, r19
    19f6:	44 f4       	brge	.+16     	; 0x1a08 <fputc+0x38>
    19f8:	a0 81       	ld	r26, Z
    19fa:	b1 81       	ldd	r27, Z+1	; 0x01
    19fc:	9d 01       	movw	r18, r26
    19fe:	2f 5f       	subi	r18, 0xFF	; 255
    1a00:	3f 4f       	sbci	r19, 0xFF	; 255
    1a02:	31 83       	std	Z+1, r19	; 0x01
    1a04:	20 83       	st	Z, r18
    1a06:	8c 93       	st	X, r24
    1a08:	26 81       	ldd	r18, Z+6	; 0x06
    1a0a:	37 81       	ldd	r19, Z+7	; 0x07
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	37 83       	std	Z+7, r19	; 0x07
    1a12:	26 83       	std	Z+6, r18	; 0x06
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <fputc+0x6e>
    1a16:	8b 01       	movw	r16, r22
    1a18:	ec 01       	movw	r28, r24
    1a1a:	fb 01       	movw	r30, r22
    1a1c:	00 84       	ldd	r0, Z+8	; 0x08
    1a1e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a20:	e0 2d       	mov	r30, r0
    1a22:	09 95       	icall
    1a24:	89 2b       	or	r24, r25
    1a26:	e1 f6       	brne	.-72     	; 0x19e0 <fputc+0x10>
    1a28:	d8 01       	movw	r26, r16
    1a2a:	16 96       	adiw	r26, 0x06	; 6
    1a2c:	8d 91       	ld	r24, X+
    1a2e:	9c 91       	ld	r25, X
    1a30:	17 97       	sbiw	r26, 0x07	; 7
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	17 96       	adiw	r26, 0x07	; 7
    1a36:	9c 93       	st	X, r25
    1a38:	8e 93       	st	-X, r24
    1a3a:	16 97       	sbiw	r26, 0x06	; 6
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	08 95       	ret

00001a48 <sprintf>:
    1a48:	ae e0       	ldi	r26, 0x0E	; 14
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ea e2       	ldi	r30, 0x2A	; 42
    1a4e:	fd e0       	ldi	r31, 0x0D	; 13
    1a50:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__prologue_saves__+0x1c>
    1a54:	0d 89       	ldd	r16, Y+21	; 0x15
    1a56:	1e 89       	ldd	r17, Y+22	; 0x16
    1a58:	86 e0       	ldi	r24, 0x06	; 6
    1a5a:	8c 83       	std	Y+4, r24	; 0x04
    1a5c:	1a 83       	std	Y+2, r17	; 0x02
    1a5e:	09 83       	std	Y+1, r16	; 0x01
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	9f e7       	ldi	r25, 0x7F	; 127
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	ae 01       	movw	r20, r28
    1a6a:	47 5e       	subi	r20, 0xE7	; 231
    1a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6e:	6f 89       	ldd	r22, Y+23	; 0x17
    1a70:	78 8d       	ldd	r23, Y+24	; 0x18
    1a72:	ce 01       	movw	r24, r28
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	0e 94 46 08 	call	0x108c	; 0x108c <vfprintf>
    1a7a:	ef 81       	ldd	r30, Y+7	; 0x07
    1a7c:	f8 85       	ldd	r31, Y+8	; 0x08
    1a7e:	e0 0f       	add	r30, r16
    1a80:	f1 1f       	adc	r31, r17
    1a82:	10 82       	st	Z, r1
    1a84:	2e 96       	adiw	r28, 0x0e	; 14
    1a86:	e4 e0       	ldi	r30, 0x04	; 4
    1a88:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__epilogue_restores__+0x1c>

00001a8c <__ultoa_invert>:
    1a8c:	fa 01       	movw	r30, r20
    1a8e:	aa 27       	eor	r26, r26
    1a90:	28 30       	cpi	r18, 0x08	; 8
    1a92:	51 f1       	breq	.+84     	; 0x1ae8 <__ultoa_invert+0x5c>
    1a94:	20 31       	cpi	r18, 0x10	; 16
    1a96:	81 f1       	breq	.+96     	; 0x1af8 <__ultoa_invert+0x6c>
    1a98:	e8 94       	clt
    1a9a:	6f 93       	push	r22
    1a9c:	6e 7f       	andi	r22, 0xFE	; 254
    1a9e:	6e 5f       	subi	r22, 0xFE	; 254
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	af 4f       	sbci	r26, 0xFF	; 255
    1aa8:	b1 e0       	ldi	r27, 0x01	; 1
    1aaa:	3e d0       	rcall	.+124    	; 0x1b28 <__ultoa_invert+0x9c>
    1aac:	b4 e0       	ldi	r27, 0x04	; 4
    1aae:	3c d0       	rcall	.+120    	; 0x1b28 <__ultoa_invert+0x9c>
    1ab0:	67 0f       	add	r22, r23
    1ab2:	78 1f       	adc	r23, r24
    1ab4:	89 1f       	adc	r24, r25
    1ab6:	9a 1f       	adc	r25, r26
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	68 0f       	add	r22, r24
    1abc:	79 1f       	adc	r23, r25
    1abe:	8a 1f       	adc	r24, r26
    1ac0:	91 1d       	adc	r25, r1
    1ac2:	a1 1d       	adc	r26, r1
    1ac4:	6a 0f       	add	r22, r26
    1ac6:	71 1d       	adc	r23, r1
    1ac8:	81 1d       	adc	r24, r1
    1aca:	91 1d       	adc	r25, r1
    1acc:	a1 1d       	adc	r26, r1
    1ace:	20 d0       	rcall	.+64     	; 0x1b10 <__ultoa_invert+0x84>
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <__ultoa_invert+0x48>
    1ad2:	68 94       	set
    1ad4:	3f 91       	pop	r19
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	26 9f       	mul	r18, r22
    1ada:	11 24       	eor	r1, r1
    1adc:	30 19       	sub	r19, r0
    1ade:	30 5d       	subi	r19, 0xD0	; 208
    1ae0:	31 93       	st	Z+, r19
    1ae2:	de f6       	brtc	.-74     	; 0x1a9a <__ultoa_invert+0xe>
    1ae4:	cf 01       	movw	r24, r30
    1ae6:	08 95       	ret
    1ae8:	46 2f       	mov	r20, r22
    1aea:	47 70       	andi	r20, 0x07	; 7
    1aec:	40 5d       	subi	r20, 0xD0	; 208
    1aee:	41 93       	st	Z+, r20
    1af0:	b3 e0       	ldi	r27, 0x03	; 3
    1af2:	0f d0       	rcall	.+30     	; 0x1b12 <__ultoa_invert+0x86>
    1af4:	c9 f7       	brne	.-14     	; 0x1ae8 <__ultoa_invert+0x5c>
    1af6:	f6 cf       	rjmp	.-20     	; 0x1ae4 <__ultoa_invert+0x58>
    1af8:	46 2f       	mov	r20, r22
    1afa:	4f 70       	andi	r20, 0x0F	; 15
    1afc:	40 5d       	subi	r20, 0xD0	; 208
    1afe:	4a 33       	cpi	r20, 0x3A	; 58
    1b00:	18 f0       	brcs	.+6      	; 0x1b08 <__ultoa_invert+0x7c>
    1b02:	49 5d       	subi	r20, 0xD9	; 217
    1b04:	31 fd       	sbrc	r19, 1
    1b06:	40 52       	subi	r20, 0x20	; 32
    1b08:	41 93       	st	Z+, r20
    1b0a:	02 d0       	rcall	.+4      	; 0x1b10 <__ultoa_invert+0x84>
    1b0c:	a9 f7       	brne	.-22     	; 0x1af8 <__ultoa_invert+0x6c>
    1b0e:	ea cf       	rjmp	.-44     	; 0x1ae4 <__ultoa_invert+0x58>
    1b10:	b4 e0       	ldi	r27, 0x04	; 4
    1b12:	a6 95       	lsr	r26
    1b14:	97 95       	ror	r25
    1b16:	87 95       	ror	r24
    1b18:	77 95       	ror	r23
    1b1a:	67 95       	ror	r22
    1b1c:	ba 95       	dec	r27
    1b1e:	c9 f7       	brne	.-14     	; 0x1b12 <__ultoa_invert+0x86>
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	61 05       	cpc	r22, r1
    1b24:	71 05       	cpc	r23, r1
    1b26:	08 95       	ret
    1b28:	9b 01       	movw	r18, r22
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	0a 2e       	mov	r0, r26
    1b2e:	06 94       	lsr	r0
    1b30:	57 95       	ror	r21
    1b32:	47 95       	ror	r20
    1b34:	37 95       	ror	r19
    1b36:	27 95       	ror	r18
    1b38:	ba 95       	dec	r27
    1b3a:	c9 f7       	brne	.-14     	; 0x1b2e <__ultoa_invert+0xa2>
    1b3c:	62 0f       	add	r22, r18
    1b3e:	73 1f       	adc	r23, r19
    1b40:	84 1f       	adc	r24, r20
    1b42:	95 1f       	adc	r25, r21
    1b44:	a0 1d       	adc	r26, r0
    1b46:	08 95       	ret

00001b48 <_exit>:
    1b48:	f8 94       	cli

00001b4a <__stop_program>:
    1b4a:	ff cf       	rjmp	.-2      	; 0x1b4a <__stop_program>
