
KleinroboterT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00001e32  00001ec6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000220  008000be  008000be  00001f24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000266d  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001085  00000000  00000000  00004891  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b6  00000000  00000000  00005916  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000680  00000000  00000000  00006dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c8  00000000  00000000  0000744c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001695  00000000  00000000  00007e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000094a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_10>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 56 06 	jmp	0xcac	; 0xcac <__vector_13>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_15>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e2 e3       	ldi	r30, 0x32	; 50
     16a:	fe e1       	ldi	r31, 0x1E	; 30
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	ae 3b       	cpi	r26, 0xBE	; 190
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	22 e0       	ldi	r18, 0x02	; 2
     17a:	ae eb       	ldi	r26, 0xBE	; 190
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ae 3d       	cpi	r26, 0xDE	; 222
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 cc 00 	call	0x198	; 0x198 <main>
     18c:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <reglerBalancieren_init>:
	}
}

/* Initialiserung des Reglers und der verwendet Filter */
void reglerBalancieren_init(void) 
{	
     194:	08 95       	ret

00000196 <reglerBalancieren_regelung>:
/* Ausführung des Reglers zum Balancieren 
	- Sensordaten lesen 
	- Komplementärfilter ausführen
	- Regler ausführen */
void reglerBalancieren_regelung(void) 
{
     196:	08 95       	ret

00000198 <main>:
						- TESTING */
uint8_t activeController = TESTING;

/* Hauptfunktion */
int main(void)
{	
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	cd b7       	in	r28, 0x3d	; 61
     19e:	de b7       	in	r29, 0x3e	; 62
     1a0:	ce 59       	subi	r28, 0x9E	; 158
     1a2:	d1 09       	sbc	r29, r1
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
	/* LEDs als Ausgï¿½nge setzen */
	DDRA |= (1<<LED_GRUEN);
     1ae:	d2 9a       	sbi	0x1a, 2	; 26
	DDRA |= (1<<LED_GELB);
     1b0:	d1 9a       	sbi	0x1a, 1	; 26
	DDRA |= (1<<LED_ROT);
     1b2:	d0 9a       	sbi	0x1a, 0	; 26
	DDRB |= (1<<LED_GRUENB);
     1b4:	b9 9a       	sbi	0x17, 1	; 23
	
	/* Initialisierung starten */
	// LED auf rot --> Kleinroboter nicht anfassen wï¿½hren Initialisierung
	PORTA |= (1<<LED_ROT);
     1b6:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b8:	2f ef       	ldi	r18, 0xFF	; 255
     1ba:	89 e6       	ldi	r24, 0x69	; 105
     1bc:	98 e1       	ldi	r25, 0x18	; 24
     1be:	21 50       	subi	r18, 0x01	; 1
     1c0:	80 40       	sbci	r24, 0x00	; 0
     1c2:	90 40       	sbci	r25, 0x00	; 0
     1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x26>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x30>
     1c8:	00 00       	nop
	_delay_ms(1000);
	
	/*	Initialisiere Timer 0 zur Erzeugung der Samplezeit
		Samplezeit wird in als T_SAMPLE gesetzt */
	TIMSK |= (1<<OCIE0);									//enable output compare interrupt
     1ca:	89 b7       	in	r24, 0x39	; 57
     1cc:	82 60       	ori	r24, 0x02	; 2
     1ce:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (1<<WGM01)|(1<<CS02)|(1<<CS00);					// non PWM, normal operation OC0 disconnected, Clk = clk-IO / 1024
     1d0:	8d e0       	ldi	r24, 0x0D	; 13
     1d2:	83 bf       	out	0x33, r24	; 51
	OCR0 = (uint8_t)((float)F_CPU/1024 * T_SAMPLE);			// setze output compare register entsprechend
     1d4:	8e e4       	ldi	r24, 0x4E	; 78
     1d6:	8c bf       	out	0x3c, r24	; 60
	
	/* Alle Module initialisieren */
	// UART/Bluetooth aktivieren und initialisieren
	uart_init();	
     1d8:	0e 94 96 05 	call	0xb2c	; 0xb2c <uart_init>
	// Akkuspanungsmessung initialisieren
	akku_init();	
     1dc:	0e 94 ac 03 	call	0x758	; 0x758 <akku_init>
	// Motoransteurung initialisieren
	motor_init();
     1e0:	0e 94 3f 02 	call	0x47e	; 0x47e <motor_init>
	// SPI und die Sensoren am SPI Bus (Decoder und Accelerometer) initialisieren
	spi_init();
     1e4:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <spi_init>
	qdec_init();
     1e8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <qdec_init>
	acc_init();
     1ec:	0e 94 39 07 	call	0xe72	; 0xe72 <acc_init>
	// I2C und die Sensoren am I2C Bus (Gyro) initialisieren
	gyro_init();
     1f0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <gyro_init>
	// Regler initialisieren
	reglerTrajektorienfolge_init();
     1f4:	0e 94 a1 03 	call	0x742	; 0x742 <reglerTrajektorienfolge_init>
	reglerBalancieren_init();			
     1f8:	0e 94 ca 00 	call	0x194	; 0x194 <reglerBalancieren_init>
	
	/* Initialisierung abschlieï¿½en */
	// Akku Notabschaltung
	akku_check();
     1fc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <akku_check>
	// Interrupts einschalten
	sei();
     200:	78 94       	sei
	// ï¿½ber UART mitteilen, dass die Initialisierung abgeschlossen ist
	uart_puts((uint8_t*)"FINISHED INITIALIZATION\r\n");
     202:	88 e6       	ldi	r24, 0x68	; 104
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 f5 05 	call	0xbea	; 0xbea <uart_puts>
	// Rote LED aus --> Kleinroboter darf wieder bewegt werden
	PORTA &= ~(1<<LED_ROT);
     20a:	d8 98       	cbi	0x1b, 0	; 27
	
	/* Programstart */
	PORTA |= (1<<LED_GELB);
     20c:	d9 9a       	sbi	0x1b, 1	; 27
	// Warten bis der Taster gedrï¿½ckt wird
	while((PINB & (1<<PB2)));
     20e:	b2 99       	sbic	0x16, 2	; 22
     210:	fe cf       	rjmp	.-4      	; 0x20e <main+0x76>
     212:	ef ef       	ldi	r30, 0xFF	; 255
     214:	f9 e6       	ldi	r31, 0x69	; 105
     216:	28 e1       	ldi	r18, 0x18	; 24
     218:	e1 50       	subi	r30, 0x01	; 1
     21a:	f0 40       	sbci	r31, 0x00	; 0
     21c:	20 40       	sbci	r18, 0x00	; 0
     21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x80>
     220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x8a>
     222:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~(1<<LED_GELB);
     224:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |= (1<<LED_GRUEN);
     226:	da 9a       	sbi	0x1b, 2	; 27
				int32_t countsL = qdec_getCounts(FLAG_SPI_QDEC_L);
				int32_t countsR = qdec_getCounts(FLAG_SPI_QDEC_R);

				char buffer[128];
				// Assuming you want each number to occupy exactly 6 characters (+/- included), adjust the 6 as needed
				snprintf(buffer, sizeof(buffer), "L: %6ld, R: %6ld \r\n", countsL, countsR);
     228:	0f 2e       	mov	r0, r31
     22a:	f2 e8       	ldi	r31, 0x82	; 130
     22c:	8f 2e       	mov	r8, r31
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	9f 2e       	mov	r9, r31
     232:	f0 2d       	mov	r31, r0
     234:	ce 01       	movw	r24, r28
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	2c 01       	movw	r4, r24
				reglerBalancieren_regelung();
			} else if(activeController == TRAJEKTORIENREGLER) {
				/* Vorsteuerung und Regelung
					Bitte die zum jeweils benï¿½tigten Funktionen einkommentieren */
				float u1_B, u2_B, x1_B, x2_B, x3_B;
				reglerTrajektorienfolge_beobachter(&u1_B, &u2_B, &x1_B, &x2_B, &x3_B);
     23a:	3e 01       	movw	r6, r28
     23c:	91 e8       	ldi	r25, 0x81	; 129
     23e:	69 0e       	add	r6, r25
     240:	71 1c       	adc	r7, r1
     242:	fe 01       	movw	r30, r28
     244:	eb 57       	subi	r30, 0x7B	; 123
     246:	ff 4f       	sbci	r31, 0xFF	; 255
     248:	cf 56       	subi	r28, 0x6F	; 111
     24a:	df 4f       	sbci	r29, 0xFF	; 255
     24c:	f9 83       	std	Y+1, r31	; 0x01
     24e:	e8 83       	st	Y, r30
     250:	c1 59       	subi	r28, 0x91	; 145
     252:	d0 40       	sbci	r29, 0x00	; 0
     254:	ce 01       	movw	r24, r28
     256:	87 57       	subi	r24, 0x77	; 119
     258:	9f 4f       	sbci	r25, 0xFF	; 255
     25a:	cd 56       	subi	r28, 0x6D	; 109
     25c:	df 4f       	sbci	r29, 0xFF	; 255
     25e:	99 83       	std	Y+1, r25	; 0x01
     260:	88 83       	st	Y, r24
     262:	c3 59       	subi	r28, 0x93	; 147
     264:	d0 40       	sbci	r29, 0x00	; 0
     266:	38 96       	adiw	r30, 0x08	; 8
     268:	cb 56       	subi	r28, 0x6B	; 107
     26a:	df 4f       	sbci	r29, 0xFF	; 255
     26c:	f9 83       	std	Y+1, r31	; 0x01
     26e:	e8 83       	st	Y, r30
     270:	c5 59       	subi	r28, 0x95	; 149
     272:	d0 40       	sbci	r29, 0x00	; 0
				int32_t countsL = qdec_getCounts(FLAG_SPI_QDEC_L);
				int32_t countsR = qdec_getCounts(FLAG_SPI_QDEC_R);

				char buffer[128];
				// Assuming you want each number to occupy exactly 6 characters (+/- included), adjust the 6 as needed
				snprintf(buffer, sizeof(buffer), "L: %6ld, R: %6ld \r\n", countsL, countsR);
     274:	24 2c       	mov	r2, r4
     276:	35 2c       	mov	r3, r5
				reglerBalancieren_regelung();
			} else if(activeController == TRAJEKTORIENREGLER) {
				/* Vorsteuerung und Regelung
					Bitte die zum jeweils benï¿½tigten Funktionen einkommentieren */
				float u1_B, u2_B, x1_B, x2_B, x3_B;
				reglerTrajektorienfolge_beobachter(&u1_B, &u2_B, &x1_B, &x2_B, &x3_B);
     278:	c9 56       	subi	r28, 0x69	; 105
     27a:	df 4f       	sbci	r29, 0xFF	; 255
     27c:	68 82       	st	Y, r6
     27e:	c7 59       	subi	r28, 0x97	; 151
     280:	d0 40       	sbci	r29, 0x00	; 0
     282:	c8 56       	subi	r28, 0x68	; 104
     284:	df 4f       	sbci	r29, 0xFF	; 255
     286:	78 82       	st	Y, r7
     288:	c8 59       	subi	r28, 0x98	; 152
     28a:	d0 40       	sbci	r29, 0x00	; 0
     28c:	cf 56       	subi	r28, 0x6F	; 111
     28e:	df 4f       	sbci	r29, 0xFF	; 255
     290:	f8 81       	ld	r31, Y
     292:	c1 59       	subi	r28, 0x91	; 145
     294:	d0 40       	sbci	r29, 0x00	; 0
     296:	c7 56       	subi	r28, 0x67	; 103
     298:	df 4f       	sbci	r29, 0xFF	; 255
     29a:	f8 83       	st	Y, r31
     29c:	c9 59       	subi	r28, 0x99	; 153
     29e:	d0 40       	sbci	r29, 0x00	; 0
     2a0:	ce 56       	subi	r28, 0x6E	; 110
     2a2:	df 4f       	sbci	r29, 0xFF	; 255
     2a4:	28 81       	ld	r18, Y
     2a6:	c2 59       	subi	r28, 0x92	; 146
     2a8:	d0 40       	sbci	r29, 0x00	; 0
     2aa:	c6 56       	subi	r28, 0x66	; 102
     2ac:	df 4f       	sbci	r29, 0xFF	; 255
     2ae:	28 83       	st	Y, r18
     2b0:	ca 59       	subi	r28, 0x9A	; 154
     2b2:	d0 40       	sbci	r29, 0x00	; 0
     2b4:	cd 56       	subi	r28, 0x6D	; 109
     2b6:	df 4f       	sbci	r29, 0xFF	; 255
     2b8:	88 81       	ld	r24, Y
     2ba:	c3 59       	subi	r28, 0x93	; 147
     2bc:	d0 40       	sbci	r29, 0x00	; 0
     2be:	c5 56       	subi	r28, 0x65	; 101
     2c0:	df 4f       	sbci	r29, 0xFF	; 255
     2c2:	88 83       	st	Y, r24
     2c4:	cb 59       	subi	r28, 0x9B	; 155
     2c6:	d0 40       	sbci	r29, 0x00	; 0
     2c8:	cc 56       	subi	r28, 0x6C	; 108
     2ca:	df 4f       	sbci	r29, 0xFF	; 255
     2cc:	98 81       	ld	r25, Y
     2ce:	c4 59       	subi	r28, 0x94	; 148
     2d0:	d0 40       	sbci	r29, 0x00	; 0
     2d2:	c4 56       	subi	r28, 0x64	; 100
     2d4:	df 4f       	sbci	r29, 0xFF	; 255
     2d6:	98 83       	st	Y, r25
     2d8:	cc 59       	subi	r28, 0x9C	; 156
     2da:	d0 40       	sbci	r29, 0x00	; 0
     2dc:	cb 56       	subi	r28, 0x6B	; 107
     2de:	df 4f       	sbci	r29, 0xFF	; 255
     2e0:	e8 81       	ld	r30, Y
     2e2:	c5 59       	subi	r28, 0x95	; 149
     2e4:	d0 40       	sbci	r29, 0x00	; 0
     2e6:	c3 56       	subi	r28, 0x63	; 99
     2e8:	df 4f       	sbci	r29, 0xFF	; 255
     2ea:	e8 83       	st	Y, r30
     2ec:	cd 59       	subi	r28, 0x9D	; 157
     2ee:	d0 40       	sbci	r29, 0x00	; 0
     2f0:	ca 56       	subi	r28, 0x6A	; 106
     2f2:	df 4f       	sbci	r29, 0xFF	; 255
     2f4:	f8 81       	ld	r31, Y
     2f6:	c6 59       	subi	r28, 0x96	; 150
     2f8:	d0 40       	sbci	r29, 0x00	; 0
     2fa:	c2 56       	subi	r28, 0x62	; 98
     2fc:	df 4f       	sbci	r29, 0xFF	; 255
     2fe:	f8 83       	st	Y, r31
     300:	ce 59       	subi	r28, 0x9E	; 158
     302:	d0 40       	sbci	r29, 0x00	; 0
		
	/* Hauptprogramm */
	while(1)
    {		
		/* Regler ausfï¿½hren wenn das Sampleflag gesetzt wurde */
		if(sampleFlag)
     304:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end>
     308:	88 23       	and	r24, r24
     30a:	e1 f3       	breq	.-8      	; 0x304 <main+0x16c>
		{					
			// Sampleflag zurï¿½cksetzen
			sampleFlag = 0;
     30c:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__data_end>
				
			if(activeController == MANUELLE_STEUERUNG) {
     310:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     314:	81 11       	cpse	r24, r1
     316:	03 c0       	rjmp	.+6      	; 0x31e <main+0x186>
				/* Manual Control Mode */
				motor_manualCtrl();
     318:	0e 94 a9 02 	call	0x552	; 0x552 <motor_manualCtrl>
     31c:	88 c0       	rjmp	.+272    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			} else if(activeController == BALANCIERREGLER) {
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	19 f4       	brne	.+6      	; 0x328 <main+0x190>
				/* Balancierregler */
				reglerBalancieren_regelung();
     322:	0e 94 cb 00 	call	0x196	; 0x196 <reglerBalancieren_regelung>
     326:	83 c0       	rjmp	.+262    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			} else if(activeController == TRAJEKTORIENREGLER) {
     328:	82 30       	cpi	r24, 0x02	; 2
     32a:	09 f0       	breq	.+2      	; 0x32e <main+0x196>
     32c:	58 c0       	rjmp	.+176    	; 0x3de <main+0x246>
				/* Vorsteuerung und Regelung
					Bitte die zum jeweils benï¿½tigten Funktionen einkommentieren */
				float u1_B, u2_B, x1_B, x2_B, x3_B;
				reglerTrajektorienfolge_beobachter(&u1_B, &u2_B, &x1_B, &x2_B, &x3_B);
     32e:	02 2d       	mov	r16, r2
     330:	13 2d       	mov	r17, r3
     332:	c9 56       	subi	r28, 0x69	; 105
     334:	df 4f       	sbci	r29, 0xFF	; 255
     336:	28 81       	ld	r18, Y
     338:	c7 59       	subi	r28, 0x97	; 151
     33a:	d0 40       	sbci	r29, 0x00	; 0
     33c:	c8 56       	subi	r28, 0x68	; 104
     33e:	df 4f       	sbci	r29, 0xFF	; 255
     340:	38 81       	ld	r19, Y
     342:	c8 59       	subi	r28, 0x98	; 152
     344:	d0 40       	sbci	r29, 0x00	; 0
     346:	c7 56       	subi	r28, 0x67	; 103
     348:	df 4f       	sbci	r29, 0xFF	; 255
     34a:	48 81       	ld	r20, Y
     34c:	c9 59       	subi	r28, 0x99	; 153
     34e:	d0 40       	sbci	r29, 0x00	; 0
     350:	c6 56       	subi	r28, 0x66	; 102
     352:	df 4f       	sbci	r29, 0xFF	; 255
     354:	58 81       	ld	r21, Y
     356:	ca 59       	subi	r28, 0x9A	; 154
     358:	d0 40       	sbci	r29, 0x00	; 0
     35a:	c5 56       	subi	r28, 0x65	; 101
     35c:	df 4f       	sbci	r29, 0xFF	; 255
     35e:	68 81       	ld	r22, Y
     360:	cb 59       	subi	r28, 0x9B	; 155
     362:	d0 40       	sbci	r29, 0x00	; 0
     364:	c4 56       	subi	r28, 0x64	; 100
     366:	df 4f       	sbci	r29, 0xFF	; 255
     368:	78 81       	ld	r23, Y
     36a:	cc 59       	subi	r28, 0x9C	; 156
     36c:	d0 40       	sbci	r29, 0x00	; 0
     36e:	c3 56       	subi	r28, 0x63	; 99
     370:	df 4f       	sbci	r29, 0xFF	; 255
     372:	88 81       	ld	r24, Y
     374:	cd 59       	subi	r28, 0x9D	; 157
     376:	d0 40       	sbci	r29, 0x00	; 0
     378:	c2 56       	subi	r28, 0x62	; 98
     37a:	df 4f       	sbci	r29, 0xFF	; 255
     37c:	98 81       	ld	r25, Y
     37e:	ce 59       	subi	r28, 0x9E	; 158
     380:	d0 40       	sbci	r29, 0x00	; 0
     382:	0e 94 a4 03 	call	0x748	; 0x748 <reglerTrajektorienfolge_beobachter>
				// reglerTrajektorienfolge_steuerung();
				reglerTrajektorienfolge_regelung(u1_B, u2_B, x1_B, x2_B, x3_B);
     386:	f3 01       	movw	r30, r6
     388:	a0 80       	ld	r10, Z
     38a:	b1 80       	ldd	r11, Z+1	; 0x01
     38c:	c2 80       	ldd	r12, Z+2	; 0x02
     38e:	d3 80       	ldd	r13, Z+3	; 0x03
     390:	cb 57       	subi	r28, 0x7B	; 123
     392:	df 4f       	sbci	r29, 0xFF	; 255
     394:	e8 80       	ld	r14, Y
     396:	f9 80       	ldd	r15, Y+1	; 0x01
     398:	0a 81       	ldd	r16, Y+2	; 0x02
     39a:	1b 81       	ldd	r17, Y+3	; 0x03
     39c:	c5 58       	subi	r28, 0x85	; 133
     39e:	d0 40       	sbci	r29, 0x00	; 0
     3a0:	c7 57       	subi	r28, 0x77	; 119
     3a2:	df 4f       	sbci	r29, 0xFF	; 255
     3a4:	28 81       	ld	r18, Y
     3a6:	39 81       	ldd	r19, Y+1	; 0x01
     3a8:	4a 81       	ldd	r20, Y+2	; 0x02
     3aa:	5b 81       	ldd	r21, Y+3	; 0x03
     3ac:	c9 58       	subi	r28, 0x89	; 137
     3ae:	d0 40       	sbci	r29, 0x00	; 0
     3b0:	c3 57       	subi	r28, 0x73	; 115
     3b2:	df 4f       	sbci	r29, 0xFF	; 255
     3b4:	68 81       	ld	r22, Y
     3b6:	79 81       	ldd	r23, Y+1	; 0x01
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	9b 81       	ldd	r25, Y+3	; 0x03
     3bc:	cd 58       	subi	r28, 0x8D	; 141
     3be:	d0 40       	sbci	r29, 0x00	; 0
     3c0:	ec 81       	ldd	r30, Y+4	; 0x04
     3c2:	ef 93       	push	r30
     3c4:	eb 81       	ldd	r30, Y+3	; 0x03
     3c6:	ef 93       	push	r30
     3c8:	ea 81       	ldd	r30, Y+2	; 0x02
     3ca:	ef 93       	push	r30
     3cc:	e9 81       	ldd	r30, Y+1	; 0x01
     3ce:	ef 93       	push	r30
     3d0:	0e 94 a5 03 	call	0x74a	; 0x74a <reglerTrajektorienfolge_regelung>
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	28 c0       	rjmp	.+80     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			} else if(activeController == TESTING) {
     3de:	83 30       	cpi	r24, 0x03	; 3
     3e0:	31 f5       	brne	.+76     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
				/* CODE START */
				
				motor_manualCtrl();
     3e2:	0e 94 a9 02 	call	0x552	; 0x552 <motor_manualCtrl>

			
				// print encoder values in UART
				int32_t countsL = qdec_getCounts(FLAG_SPI_QDEC_L);
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <qdec_getCounts>
     3ec:	16 2f       	mov	r17, r22
     3ee:	07 2f       	mov	r16, r23
     3f0:	f8 2e       	mov	r15, r24
     3f2:	e9 2e       	mov	r14, r25
				int32_t countsR = qdec_getCounts(FLAG_SPI_QDEC_R);
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <qdec_getCounts>

				char buffer[128];
				// Assuming you want each number to occupy exactly 6 characters (+/- included), adjust the 6 as needed
				snprintf(buffer, sizeof(buffer), "L: %6ld, R: %6ld \r\n", countsL, countsR);
     3fa:	9f 93       	push	r25
     3fc:	8f 93       	push	r24
     3fe:	7f 93       	push	r23
     400:	6f 93       	push	r22
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	9f 92       	push	r9
     40c:	8f 92       	push	r8
     40e:	1f 92       	push	r1
     410:	f0 e8       	ldi	r31, 0x80	; 128
     412:	ff 93       	push	r31
     414:	5f 92       	push	r5
     416:	4f 92       	push	r4
     418:	0e 94 67 0e 	call	0x1cce	; 0x1cce <snprintf>
				// print acc values in UART
				//int16_t accData[3]; // Array to hold accelerometer data
    			//acc_getData(accData); // Fetch the accelerometer data

				//snprintf(buffer, sizeof(buffer), "Acc X: %d, Y: %d, Z: %d\r\n", accData[0], accData[1], accData[2]);
				uart_puts((uint8_t*)buffer);
     41c:	82 2d       	mov	r24, r2
     41e:	93 2d       	mov	r25, r3
     420:	0e 94 f5 05 	call	0xbea	; 0xbea <uart_puts>
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61

				/* CODE END */
			}
			
			/* Warnung bei Nichteinhalten der Samplezeit */
			if(sampleFlag) {
     42e:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <__data_end>
     432:	88 23       	and	r24, r24
     434:	09 f4       	brne	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	66 cf       	rjmp	.-308    	; 0x304 <main+0x16c>
				char buff[7] = { 'm', 'i', 's', 's', '\r', '\n', '\0' };
     438:	87 e0       	ldi	r24, 0x07	; 7
     43a:	e1 e6       	ldi	r30, 0x61	; 97
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	a2 2d       	mov	r26, r2
     440:	b3 2d       	mov	r27, r3
     442:	01 90       	ld	r0, Z+
     444:	0d 92       	st	X+, r0
     446:	8a 95       	dec	r24
     448:	e1 f7       	brne	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				uart_puts((uint8_t*)buff);				
     44a:	82 2d       	mov	r24, r2
     44c:	93 2d       	mov	r25, r3
     44e:	0e 94 f5 05 	call	0xbea	; 0xbea <uart_puts>
     452:	58 cf       	rjmp	.-336    	; 0x304 <main+0x16c>

00000454 <__vector_10>:
		}
	}
}

/* Timer-Interrupt */
ISR(TIMER0_COMP_vect) {
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
	// Setzen der Sample-Flag
	sampleFlag = 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <__data_end>
	// Toggle der roten LED um sehen zu kï¿½nnen ob der Interrupt ausgefï¿½hrt wird
	PORTB ^= (1<<LED_GRUENB);
     468:	98 b3       	in	r25, 0x18	; 24
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	89 27       	eor	r24, r25
     46e:	88 bb       	out	0x18, r24	; 24
}
     470:	9f 91       	pop	r25
     472:	8f 91       	pop	r24
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <motor_init>:
	/* CODE END */
}

/* Routine zur Ansteuerung der Motoren mit Kennlinienkorrektur */
void motor_setVel(float vSollLinks, float vSollRechts)		// vSollLinks und vSollRechts in cm/s
{
     47e:	a7 9a       	sbi	0x14, 7	; 20
     480:	a6 9a       	sbi	0x14, 6	; 20
     482:	8d 9a       	sbi	0x11, 5	; 17
     484:	8c 9a       	sbi	0x11, 4	; 17
     486:	82 ea       	ldi	r24, 0xA2	; 162
     488:	8f bd       	out	0x2f, r24	; 47
     48a:	88 e1       	ldi	r24, 0x18	; 24
     48c:	8e bd       	out	0x2e, r24	; 46
     48e:	8e b5       	in	r24, 0x2e	; 46
     490:	81 60       	ori	r24, 0x01	; 1
     492:	8e bd       	out	0x2e, r24	; 46
     494:	8f e1       	ldi	r24, 0x1F	; 31
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	97 bd       	out	0x27, r25	; 39
     49a:	86 bd       	out	0x26, r24	; 38
     49c:	08 95       	ret

0000049e <motor_pwm>:

/* Routine zur Ansteuerung der Motoren per %DutyCycle 
	INPUT:  motorId -	Flag, welche das anzusteuerende Rad angibt
			pwm_duty -	Vorzeichenbehafteter Dutycycle (-1 voll zurï¿½ck, +1 voll vorwï¿½rts) */
void motor_pwm(uint8_t motorId, float pwm_duty)
{
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	6a 01       	movw	r12, r20
     4a8:	7b 01       	movw	r14, r22
angesprochen werden kÃ¶nnen. Das Argument sideId ist hierbei ein unsigned integer, der
die anzusprechende Seite identifiziert, z. B. 0 fÃ¼r links und 1 fÃ¼r rechts. Das Argument
pwm_duty gibt den kommandierten PWM-duty-cycle an und hat einen Wertebreich von
-1 (volle RÃ¼ckwÃ¤rtsfahrt) bis +1 (volle VorwÃ¤rtsfahrt).*/

	if(motorId == FLAG_L)
     4aa:	81 11       	cpse	r24, r1
     4ac:	26 c0       	rjmp	.+76     	; 0x4fa <motor_pwm+0x5c>
	{
		if(pwm_duty < 0)
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	a9 01       	movw	r20, r18
     4b4:	c7 01       	movw	r24, r14
     4b6:	b6 01       	movw	r22, r12
     4b8:	0e 94 c4 07 	call	0xf88	; 0xf88 <__cmpsf2>
     4bc:	88 23       	and	r24, r24
     4be:	7c f4       	brge	.+30     	; 0x4de <motor_pwm+0x40>
		{
			PORTC |= (1<<PC7); // Set the direction to backward
     4c0:	af 9a       	sbi	0x15, 7	; 21
			OCR1A = -pwm_duty*MAX_PWM; // Set the duty cycle
     4c2:	c7 01       	movw	r24, r14
     4c4:	b6 01       	movw	r22, r12
     4c6:	90 58       	subi	r25, 0x80	; 128
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 ec       	ldi	r19, 0xC0	; 192
     4cc:	47 e4       	ldi	r20, 0x47	; 71
     4ce:	54 e4       	ldi	r21, 0x44	; 68
     4d0:	0e 94 1c 09 	call	0x1238	; 0x1238 <__mulsf3>
     4d4:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     4d8:	7b bd       	out	0x2b, r23	; 43
     4da:	6a bd       	out	0x2a, r22	; 42
     4dc:	35 c0       	rjmp	.+106    	; 0x548 <motor_pwm+0xaa>
		}
		else
		{
			PORTC &= ~(1<<PC7); // Set the direction to forward
     4de:	af 98       	cbi	0x15, 7	; 21
			OCR1A = pwm_duty*MAX_PWM; // Set the duty cycle
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 ec       	ldi	r19, 0xC0	; 192
     4e4:	47 e4       	ldi	r20, 0x47	; 71
     4e6:	54 e4       	ldi	r21, 0x44	; 68
     4e8:	c7 01       	movw	r24, r14
     4ea:	b6 01       	movw	r22, r12
     4ec:	0e 94 1c 09 	call	0x1238	; 0x1238 <__mulsf3>
     4f0:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     4f4:	7b bd       	out	0x2b, r23	; 43
     4f6:	6a bd       	out	0x2a, r22	; 42
     4f8:	27 c0       	rjmp	.+78     	; 0x548 <motor_pwm+0xaa>
		}
	}
	else if(motorId == FLAG_R)
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	29 f5       	brne	.+74     	; 0x548 <motor_pwm+0xaa>
	{
		if(pwm_duty < 0)
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	a9 01       	movw	r20, r18
     504:	c7 01       	movw	r24, r14
     506:	b6 01       	movw	r22, r12
     508:	0e 94 c4 07 	call	0xf88	; 0xf88 <__cmpsf2>
     50c:	88 23       	and	r24, r24
     50e:	7c f4       	brge	.+30     	; 0x52e <motor_pwm+0x90>
		{
			PORTC |= (1<<PC6); // Set the direction to backward
     510:	ae 9a       	sbi	0x15, 6	; 21
			OCR1B = -pwm_duty*MAX_PWM; // Set the duty cycle
     512:	c7 01       	movw	r24, r14
     514:	b6 01       	movw	r22, r12
     516:	90 58       	subi	r25, 0x80	; 128
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 ec       	ldi	r19, 0xC0	; 192
     51c:	47 e4       	ldi	r20, 0x47	; 71
     51e:	54 e4       	ldi	r21, 0x44	; 68
     520:	0e 94 1c 09 	call	0x1238	; 0x1238 <__mulsf3>
     524:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     528:	79 bd       	out	0x29, r23	; 41
     52a:	68 bd       	out	0x28, r22	; 40
     52c:	0d c0       	rjmp	.+26     	; 0x548 <motor_pwm+0xaa>
		}
		else
		{
			PORTC &= ~(1<<PC6); // Set the direction to forward
     52e:	ae 98       	cbi	0x15, 6	; 21
			OCR1B = pwm_duty*MAX_PWM; // Set the duty cycle
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 ec       	ldi	r19, 0xC0	; 192
     534:	47 e4       	ldi	r20, 0x47	; 71
     536:	54 e4       	ldi	r21, 0x44	; 68
     538:	c7 01       	movw	r24, r14
     53a:	b6 01       	movw	r22, r12
     53c:	0e 94 1c 09 	call	0x1238	; 0x1238 <__mulsf3>
     540:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     544:	79 bd       	out	0x29, r23	; 41
     546:	68 bd       	out	0x28, r22	; 40
		}
	}
	/* CODE END */
}
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	df 90       	pop	r13
     54e:	cf 90       	pop	r12
     550:	08 95       	ret

00000552 <motor_manualCtrl>:
	/* CODE END */		
}

/* Routine zur manuellen Steuerung per UART */
void motor_manualCtrl(void) 
{
     552:	4f 92       	push	r4
     554:	5f 92       	push	r5
     556:	6f 92       	push	r6
     558:	7f 92       	push	r7
     55a:	8f 92       	push	r8
     55c:	9f 92       	push	r9
     55e:	af 92       	push	r10
     560:	bf 92       	push	r11
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	00 d0       	rcall	.+0      	; 0x570 <motor_manualCtrl+0x1e>
     570:	00 d0       	rcall	.+0      	; 0x572 <motor_manualCtrl+0x20>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
	float pwm_duty_R = 0;

	//werte fÃ¼r die tasten sind im header definiert

	// werte Ã¼ber UART empfangen und in variable speichern
	uint8_t data = uart_getch();
     576:	0e 94 af 05 	call	0xb5e	; 0xb5e <uart_getch>

	switch (data)
     57a:	84 36       	cpi	r24, 0x64	; 100
     57c:	69 f0       	breq	.+26     	; 0x598 <motor_manualCtrl+0x46>
     57e:	30 f4       	brcc	.+12     	; 0x58c <motor_manualCtrl+0x3a>
     580:	80 32       	cpi	r24, 0x20	; 32
     582:	09 f4       	brne	.+2      	; 0x586 <motor_manualCtrl+0x34>
     584:	65 c0       	rjmp	.+202    	; 0x650 <motor_manualCtrl+0xfe>
     586:	81 36       	cpi	r24, 0x61	; 97
     588:	f1 f0       	breq	.+60     	; 0x5c6 <motor_manualCtrl+0x74>
     58a:	82 c0       	rjmp	.+260    	; 0x690 <motor_manualCtrl+0x13e>
     58c:	83 37       	cpi	r24, 0x73	; 115
     58e:	09 f4       	brne	.+2      	; 0x592 <motor_manualCtrl+0x40>
     590:	48 c0       	rjmp	.+144    	; 0x622 <motor_manualCtrl+0xd0>
     592:	87 37       	cpi	r24, 0x77	; 119
     594:	79 f1       	breq	.+94     	; 0x5f4 <motor_manualCtrl+0xa2>
     596:	7c c0       	rjmp	.+248    	; 0x690 <motor_manualCtrl+0x13e>
	{
	case 'd':
		forward += 0.01;
     598:	2a e0       	ldi	r18, 0x0A	; 10
     59a:	37 ed       	ldi	r19, 0xD7	; 215
     59c:	43 e2       	ldi	r20, 0x23	; 35
     59e:	5c e3       	ldi	r21, 0x3C	; 60
     5a0:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <forward>
     5a4:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <forward+0x1>
     5a8:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <forward+0x2>
     5ac:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <forward+0x3>
     5b0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     5b4:	60 93 ce 02 	sts	0x02CE, r22	; 0x8002ce <forward>
     5b8:	70 93 cf 02 	sts	0x02CF, r23	; 0x8002cf <forward+0x1>
     5bc:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <forward+0x2>
     5c0:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <forward+0x3>
		break;
     5c4:	65 c0       	rjmp	.+202    	; 0x690 <motor_manualCtrl+0x13e>
	case 'a':
		backward += 0.01;
     5c6:	2a e0       	ldi	r18, 0x0A	; 10
     5c8:	37 ed       	ldi	r19, 0xD7	; 215
     5ca:	43 e2       	ldi	r20, 0x23	; 35
     5cc:	5c e3       	ldi	r21, 0x3C	; 60
     5ce:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <backward>
     5d2:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <backward+0x1>
     5d6:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <backward+0x2>
     5da:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <backward+0x3>
     5de:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     5e2:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <backward>
     5e6:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <backward+0x1>
     5ea:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <backward+0x2>
     5ee:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <backward+0x3>
		break;
     5f2:	4e c0       	rjmp	.+156    	; 0x690 <motor_manualCtrl+0x13e>
	case 'w':
		left += 0.01;
     5f4:	2a e0       	ldi	r18, 0x0A	; 10
     5f6:	37 ed       	ldi	r19, 0xD7	; 215
     5f8:	43 e2       	ldi	r20, 0x23	; 35
     5fa:	5c e3       	ldi	r21, 0x3C	; 60
     5fc:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <left>
     600:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <left+0x1>
     604:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <left+0x2>
     608:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <left+0x3>
     60c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     610:	60 93 cb 01 	sts	0x01CB, r22	; 0x8001cb <left>
     614:	70 93 cc 01 	sts	0x01CC, r23	; 0x8001cc <left+0x1>
     618:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <left+0x2>
     61c:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <left+0x3>
		break;
     620:	37 c0       	rjmp	.+110    	; 0x690 <motor_manualCtrl+0x13e>
	case 's':
		right += 0.01;
     622:	2a e0       	ldi	r18, 0x0A	; 10
     624:	37 ed       	ldi	r19, 0xD7	; 215
     626:	43 e2       	ldi	r20, 0x23	; 35
     628:	5c e3       	ldi	r21, 0x3C	; 60
     62a:	60 91 c7 00 	lds	r22, 0x00C7	; 0x8000c7 <right>
     62e:	70 91 c8 00 	lds	r23, 0x00C8	; 0x8000c8 <right+0x1>
     632:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <right+0x2>
     636:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <right+0x3>
     63a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     63e:	60 93 c7 00 	sts	0x00C7, r22	; 0x8000c7 <right>
     642:	70 93 c8 00 	sts	0x00C8, r23	; 0x8000c8 <right+0x1>
     646:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <right+0x2>
     64a:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <right+0x3>
		break;
     64e:	20 c0       	rjmp	.+64     	; 0x690 <motor_manualCtrl+0x13e>
	case ' ':
		forward = 0;
     650:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <forward>
     654:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <forward+0x1>
     658:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <forward+0x2>
     65c:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <forward+0x3>
		backward = 0;
     660:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <backward>
     664:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <backward+0x1>
     668:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <backward+0x2>
     66c:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <backward+0x3>
		left = 0;
     670:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <left>
     674:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <left+0x1>
     678:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <left+0x2>
     67c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <left+0x3>
		right = 0;
     680:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <right>
     684:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <right+0x1>
     688:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <right+0x2>
     68c:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <right+0x3>
	default:
		break;
	}

	// Berechnung der PWM Werte
	pwm_duty_R = forward - backward + left - right;
     690:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <backward>
     694:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <backward+0x1>
     698:	40 91 d4 02 	lds	r20, 0x02D4	; 0x8002d4 <backward+0x2>
     69c:	50 91 d5 02 	lds	r21, 0x02D5	; 0x8002d5 <backward+0x3>
     6a0:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <forward>
     6a4:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <forward+0x1>
     6a8:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <forward+0x2>
     6ac:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <forward+0x3>
     6b0:	0e 94 57 07 	call	0xeae	; 0xeae <__subsf3>
     6b4:	4b 01       	movw	r8, r22
     6b6:	5c 01       	movw	r10, r24
     6b8:	40 90 cb 01 	lds	r4, 0x01CB	; 0x8001cb <left>
     6bc:	50 90 cc 01 	lds	r5, 0x01CC	; 0x8001cc <left+0x1>
     6c0:	60 90 cd 01 	lds	r6, 0x01CD	; 0x8001cd <left+0x2>
     6c4:	70 90 ce 01 	lds	r7, 0x01CE	; 0x8001ce <left+0x3>
     6c8:	c0 90 c7 00 	lds	r12, 0x00C7	; 0x8000c7 <right>
     6cc:	d0 90 c8 00 	lds	r13, 0x00C8	; 0x8000c8 <right+0x1>
     6d0:	e0 90 c9 00 	lds	r14, 0x00C9	; 0x8000c9 <right+0x2>
     6d4:	f0 90 ca 00 	lds	r15, 0x00CA	; 0x8000ca <right+0x3>
     6d8:	a3 01       	movw	r20, r6
     6da:	92 01       	movw	r18, r4
     6dc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     6e0:	a7 01       	movw	r20, r14
     6e2:	96 01       	movw	r18, r12
     6e4:	0e 94 57 07 	call	0xeae	; 0xeae <__subsf3>
     6e8:	69 83       	std	Y+1, r22	; 0x01
     6ea:	7a 83       	std	Y+2, r23	; 0x02
     6ec:	8b 83       	std	Y+3, r24	; 0x03
     6ee:	9c 83       	std	Y+4, r25	; 0x04
    //sprintf(buffer, "%f", pwm_duty_R);
    //uart_puts((uint8_t *)buffer);
    //uart_puts((uint8_t *)"\n\r"); // New line and carriage return

	// Werte an die Motoren Ã¼bergeben
	motor_pwm(FLAG_L, pwm_duty_L);
     6f0:	a3 01       	movw	r20, r6
     6f2:	92 01       	movw	r18, r4
     6f4:	c5 01       	movw	r24, r10
     6f6:	b4 01       	movw	r22, r8
     6f8:	0e 94 57 07 	call	0xeae	; 0xeae <__subsf3>
     6fc:	a7 01       	movw	r20, r14
     6fe:	96 01       	movw	r18, r12
     700:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     704:	ab 01       	movw	r20, r22
     706:	bc 01       	movw	r22, r24
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	0e 94 4f 02 	call	0x49e	; 0x49e <motor_pwm>
	motor_pwm(FLAG_R, pwm_duty_R);
     70e:	49 81       	ldd	r20, Y+1	; 0x01
     710:	5a 81       	ldd	r21, Y+2	; 0x02
     712:	6b 81       	ldd	r22, Y+3	; 0x03
     714:	7c 81       	ldd	r23, Y+4	; 0x04
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 4f 02 	call	0x49e	; 0x49e <motor_pwm>

	/* CODE END */
}
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	9f 90       	pop	r9
     736:	8f 90       	pop	r8
     738:	7f 90       	pop	r7
     73a:	6f 90       	pop	r6
     73c:	5f 90       	pop	r5
     73e:	4f 90       	pop	r4
     740:	08 95       	ret

00000742 <reglerTrajektorienfolge_init>:
	/* CODE END */
}

/*Ausführung der flachheitsbasierten Steuerung */
void reglerTrajektorienfolge_steuerung(void)
{
     742:	0e 94 85 05 	call	0xb0a	; 0xb0a <trajektorie_init>
     746:	08 95       	ret

00000748 <reglerTrajektorienfolge_beobachter>:
     748:	08 95       	ret

0000074a <reglerTrajektorienfolge_regelung>:
			u2_B - Beobachteter Eingang 2
			x1_B - Beobachteter Zustand 1
			X2_B - Beobachteter Zustand 2
			x3_B - Beobachteter Zustand 3 */
void reglerTrajektorienfolge_regelung(float u1_B, float u2_B, float x1_B, float x2_B, float x3_B)
{
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	/* CODE START */
	/* CODE END */	
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <akku_init>:

/* Initialisierungsroutine für das Auslesen der Akkuspannung */
void akku_init()
{
	/* ADC auf Kannal ADC3 setzen und lediglich ADCH Register verwenden */
	ADMUX |= ((1<<MUX0) | (1<<MUX1) | (1<<ADLAR));
     758:	87 b1       	in	r24, 0x07	; 7
     75a:	83 62       	ori	r24, 0x23	; 35
     75c:	87 b9       	out	0x07, r24	; 7
	
	/* ADC aktivieren und Prescale auf 128 setzten */
	ADCSRA |= ((1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2));
     75e:	86 b1       	in	r24, 0x06	; 6
     760:	87 68       	ori	r24, 0x87	; 135
     762:	86 b9       	out	0x06, r24	; 6
	
	/* Erste ADC-Wandlung starten */
	ADCSRA |= (1<<ADSC);
     764:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     766:	36 99       	sbic	0x06, 6	; 6
     768:	fe cf       	rjmp	.-4      	; 0x766 <akku_init+0xe>
}
     76a:	08 95       	ret

0000076c <akku_voltage>:

/* Routine zum  Abfragen der aktuellen Akkuspannung */
float akku_voltage()
{
	/* ADC auf Kannal ADC3 setzen und lediglich ADCH Register verwenden */
	ADMUX |= ((1<<MUX0) | (1<<MUX1) | (1<<ADLAR));
     76c:	87 b1       	in	r24, 0x07	; 7
     76e:	83 62       	ori	r24, 0x23	; 35
     770:	87 b9       	out	0x07, r24	; 7
	
	/* ADC-Wandlung starten */
	ADCSRA |= (1<<ADSC);
     772:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));
     774:	36 99       	sbic	0x06, 6	; 6
     776:	fe cf       	rjmp	.-4      	; 0x774 <akku_voltage+0x8>
	uint8_t voltage8 = ADCH;
     778:	65 b1       	in	r22, 0x05	; 5
	
	/* Wandlungsergebnis vom ADC3 in einen Spannungswert umrechnen */
	return ((float)voltage8/255.0*SPANNUNGSTEILER*VREF);
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__floatunsisf>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	4f e7       	ldi	r20, 0x7F	; 127
     78a:	53 e4       	ldi	r21, 0x43	; 67
     78c:	0e 94 c9 07 	call	0xf92	; 0xf92 <__divsf3>
     790:	28 e4       	ldi	r18, 0x48	; 72
     792:	31 ee       	ldi	r19, 0xE1	; 225
     794:	42 e1       	ldi	r20, 0x12	; 18
     796:	51 e4       	ldi	r21, 0x41	; 65
     798:	0e 94 1c 09 	call	0x1238	; 0x1238 <__mulsf3>
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e5       	ldi	r20, 0x50	; 80
     7a2:	50 e4       	ldi	r21, 0x40	; 64
     7a4:	0e 94 1c 09 	call	0x1238	; 0x1238 <__mulsf3>
}
     7a8:	08 95       	ret

000007aa <akku_check>:

/* Routine zur Überpüfung, ob die Akkuspannung nicht unterhalb des kritischen Wertes liegt */
void akku_check()
{
     7aa:	9f 92       	push	r9
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	6e 97       	sbiw	r28, 0x1e	; 30
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
	/* Wenn der Akku leer ist wird in eine Endlosschleife gesprungen,
	 so dass das User-Programm nicht gestartet wird */
		
	/* Abfragen der aktuellen Akkuspannung */
	float voltage = akku_voltage();
     7d0:	0e 94 b6 03 	call	0x76c	; 0x76c <akku_voltage>
     7d4:	d6 2e       	mov	r13, r22
     7d6:	c7 2e       	mov	r12, r23
     7d8:	b8 2e       	mov	r11, r24
     7da:	a9 2e       	mov	r10, r25
	
	/* Überprüfen ob die aktuelle Akkuspannung innerhalb des zulässigen Bereichs ist */
	if (voltage < V_LOW)
     7dc:	26 e6       	ldi	r18, 0x66	; 102
     7de:	36 e6       	ldi	r19, 0x66	; 102
     7e0:	46 ee       	ldi	r20, 0xE6	; 230
     7e2:	50 e4       	ldi	r21, 0x40	; 64
     7e4:	0e 94 c4 07 	call	0xf88	; 0xf88 <__cmpsf2>
     7e8:	88 23       	and	r24, r24
     7ea:	0c f0       	brlt	.+2      	; 0x7ee <akku_check+0x44>
     7ec:	41 c0       	rjmp	.+130    	; 0x870 <__stack+0x11>
	{
		sei();	// Sei() einschalten, um eine Meldung per UART versenden zu können
     7ee:	78 94       	sei
		
		char send[30] = ""; // Char-Buffer von 30 Zeichen für Meldung
     7f0:	1a 82       	std	Y+2, r1	; 0x02
     7f2:	19 82       	std	Y+1, r1	; 0x01
     7f4:	fe 01       	movw	r30, r28
     7f6:	33 96       	adiw	r30, 0x03	; 3
     7f8:	8c e1       	ldi	r24, 0x1C	; 28
     7fa:	df 01       	movw	r26, r30
     7fc:	1d 92       	st	X+, r1
     7fe:	8a 95       	dec	r24
     800:	e9 f7       	brne	.-6      	; 0x7fc <akku_check+0x52>
		
		/* Endlosschleife mit Warnung --> Akku leer --> gelbe LED Blinkt*/
		while (1)
		{
			/* Warnmeldung verschicken */
			sprintf(send, "Akku leer! U_Akku = %.1fV \n\r", voltage);
     802:	0f 2e       	mov	r0, r31
     804:	f6 e9       	ldi	r31, 0x96	; 150
     806:	ef 2e       	mov	r14, r31
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	ff 2e       	mov	r15, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	8e 01       	movw	r16, r28
     810:	0f 5f       	subi	r16, 0xFF	; 255
     812:	1f 4f       	sbci	r17, 0xFF	; 255
			uart_puts((uint8_t*)send);
			
			/* gelbe LED an PA1 blinken lassen */
			PORTA ^= (1<<PA1);
     814:	68 94       	set
     816:	99 24       	eor	r9, r9
     818:	91 f8       	bld	r9, 1
		
		/* Endlosschleife mit Warnung --> Akku leer --> gelbe LED Blinkt*/
		while (1)
		{
			/* Warnmeldung verschicken */
			sprintf(send, "Akku leer! U_Akku = %.1fV \n\r", voltage);
     81a:	af 92       	push	r10
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ff 92       	push	r15
     824:	ef 92       	push	r14
     826:	1f 93       	push	r17
     828:	0f 93       	push	r16
     82a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <sprintf>
			uart_puts((uint8_t*)send);
     82e:	c8 01       	movw	r24, r16
     830:	0e 94 f5 05 	call	0xbea	; 0xbea <uart_puts>
			
			/* gelbe LED an PA1 blinken lassen */
			PORTA ^= (1<<PA1);
     834:	8b b3       	in	r24, 0x1b	; 27
     836:	89 25       	eor	r24, r9
     838:	8b bb       	out	0x1b, r24	; 27
     83a:	bf ef       	ldi	r27, 0xFF	; 255
     83c:	29 e6       	ldi	r18, 0x69	; 105
     83e:	88 e1       	ldi	r24, 0x18	; 24
     840:	b1 50       	subi	r27, 0x01	; 1
     842:	20 40       	sbci	r18, 0x00	; 0
     844:	80 40       	sbci	r24, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     84a:	00 00       	nop
			_delay_ms(1000);
			PORTA ^= (1<<PA1);
     84c:	8b b3       	in	r24, 0x1b	; 27
     84e:	89 25       	eor	r24, r9
     850:	8b bb       	out	0x1b, r24	; 27
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	a9 e6       	ldi	r26, 0x69	; 105
     856:	b8 e1       	ldi	r27, 0x18	; 24
     858:	91 50       	subi	r25, 0x01	; 1
     85a:	a0 40       	sbci	r26, 0x00	; 0
     85c:	b0 40       	sbci	r27, 0x00	; 0
     85e:	e1 f7       	brne	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
     862:	00 00       	nop
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	d5 cf       	rjmp	.-86     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			_delay_ms(1000);
		}
	}
     870:	6e 96       	adiw	r28, 0x1e	; 30
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	9f 90       	pop	r9
     892:	08 95       	ret

00000894 <gyro_sendStop>:
}

/* Stelle die Stopkondition her */
void gyro_sendStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     894:	84 e9       	ldi	r24, 0x94	; 148
     896:	86 bf       	out	0x36, r24	; 54
	/* Warten */
	while(TWCR & (1<<TWSTO));
     898:	06 b6       	in	r0, 0x36	; 54
     89a:	04 fc       	sbrc	r0, 4
     89c:	fd cf       	rjmp	.-6      	; 0x898 <gyro_sendStop+0x4>
}
     89e:	08 95       	ret

000008a0 <gyro_sendStart>:
{
	/* RW_bit = 0: Write Master -> Slave
	* RW_bit = 1: Read  Master <- Slave
	*/
		/* Sende Start-Kondition */
		TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     8a0:	94 ea       	ldi	r25, 0xA4	; 164
     8a2:	96 bf       	out	0x36, r25	; 54
		
		/* Warten bis das TWINT Flag gesetzt wurde, dies zeigt, dass der "START" verschickt wurde. */
		while (!(TWCR & (1<<TWINT)));
     8a4:	06 b6       	in	r0, 0x36	; 54
     8a6:	07 fe       	sbrs	r0, 7
     8a8:	fd cf       	rjmp	.-6      	; 0x8a4 <gyro_sendStart+0x4>
		
		/* Sende Adresse + WRITE bit = 0 */
		TWDR = ITG_I2C_ADR<<1|RW_bit;
     8aa:	80 6d       	ori	r24, 0xD0	; 208
     8ac:	83 b9       	out	0x03, r24	; 3
		TWCR = (1<<TWINT)|(1<<TWEN);
     8ae:	84 e8       	ldi	r24, 0x84	; 132
     8b0:	86 bf       	out	0x36, r24	; 54
		
		/* Warten auf Acknowledge */
		while (!(TWCR & (1<<TWINT)));
     8b2:	06 b6       	in	r0, 0x36	; 54
     8b4:	07 fe       	sbrs	r0, 7
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <gyro_sendStart+0x12>
}
     8b8:	08 95       	ret

000008ba <gyro_write>:
	gyro_calibrate();
}

/* Routine um ein Datenbyte über I2C in ein Sensorregister zu schreiben */
void gyro_write(uint8_t Register, uint8_t data)
{
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	d8 2f       	mov	r29, r24
     8c0:	c6 2f       	mov	r28, r22
	/* Sende Start-Kondition (Datenrichtung Master->Slave) */
	gyro_sendStart(0);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gyro_sendStart>
	
	/* Sende Addresse des Registers */
	TWDR = Register;
     8c8:	d3 b9       	out	0x03, r29	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	
     8ca:	84 e8       	ldi	r24, 0x84	; 132
     8cc:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     8ce:	06 b6       	in	r0, 0x36	; 54
     8d0:	07 fe       	sbrs	r0, 7
     8d2:	fd cf       	rjmp	.-6      	; 0x8ce <gyro_write+0x14>
		
	/* Sende die Daten */
	TWDR = data;
     8d4:	c3 b9       	out	0x03, r28	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	
     8d6:	84 e8       	ldi	r24, 0x84	; 132
     8d8:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     8da:	06 b6       	in	r0, 0x36	; 54
     8dc:	07 fe       	sbrs	r0, 7
     8de:	fd cf       	rjmp	.-6      	; 0x8da <gyro_write+0x20>
	
	/* Sende Stop-Kondition */
	gyro_sendStop();
     8e0:	0e 94 4a 04 	call	0x894	; 0x894 <gyro_sendStop>
	
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <gyro_read>:

/* Routine zum Auslesen von n-Datenbytes aus einem Sensorregister */
void gyro_read(uint8_t Register, uint8_t *data, uint8_t n_bytes)
{	
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	08 2f       	mov	r16, r24
     8f4:	16 2f       	mov	r17, r22
     8f6:	d7 2f       	mov	r29, r23
     8f8:	c4 2f       	mov	r28, r20
	/* Sende Start-Kondition (Datenrichtung Master->Slave) */
	gyro_sendStart(0);
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gyro_sendStart>
	
	/* Sende Addresse des Registers */
	TWDR = Register;
     900:	03 b9       	out	0x03, r16	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     902:	84 e8       	ldi	r24, 0x84	; 132
     904:	86 bf       	out	0x36, r24	; 54
	/* Warte auf Acknowlegde des Gyros */
	while (!(TWCR & (1<<TWINT)));
     906:	06 b6       	in	r0, 0x36	; 54
     908:	07 fe       	sbrs	r0, 7
     90a:	fd cf       	rjmp	.-6      	; 0x906 <gyro_read+0x1c>
	
	/* Sende Start-Kondition (Datenrichtung Slave->Master) */
	gyro_sendStart(1);
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gyro_sendStart>
	
	/* Lese die Daten */
	for(int16_t i=0;i<n_bytes;i++)
     912:	4c 2f       	mov	r20, r28
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	14 16       	cp	r1, r20
     918:	15 06       	cpc	r1, r21
     91a:	cc f4       	brge	.+50     	; 0x94e <gyro_read+0x64>
     91c:	e1 2f       	mov	r30, r17
     91e:	fd 2f       	mov	r31, r29
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
	{
		/* Sende Acknowledge an den Gyro */
		TWCR = (1<<TWINT)|(1<<TWEN)|((i==n_bytes-1) ? 0 : (1<<TWEA));
     924:	ba 01       	movw	r22, r20
     926:	61 50       	subi	r22, 0x01	; 1
     928:	71 09       	sbc	r23, r1
     92a:	a4 e8       	ldi	r26, 0x84	; 132
     92c:	34 ec       	ldi	r19, 0xC4	; 196
     92e:	68 17       	cp	r22, r24
     930:	79 07       	cpc	r23, r25
     932:	11 f0       	breq	.+4      	; 0x938 <gyro_read+0x4e>
     934:	23 2f       	mov	r18, r19
     936:	01 c0       	rjmp	.+2      	; 0x93a <gyro_read+0x50>
     938:	2a 2f       	mov	r18, r26
     93a:	26 bf       	out	0x36, r18	; 54
		/* Warte bis die Übertragung komplett ist */
		while (!(TWCR & (1<<TWINT)));
     93c:	06 b6       	in	r0, 0x36	; 54
     93e:	07 fe       	sbrs	r0, 7
     940:	fd cf       	rjmp	.-6      	; 0x93c <gyro_read+0x52>
		data[i] = TWDR;
     942:	23 b1       	in	r18, 0x03	; 3
     944:	21 93       	st	Z+, r18
	
	/* Sende Start-Kondition (Datenrichtung Slave->Master) */
	gyro_sendStart(1);
	
	/* Lese die Daten */
	for(int16_t i=0;i<n_bytes;i++)
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	84 17       	cp	r24, r20
     94a:	95 07       	cpc	r25, r21
     94c:	81 f7       	brne	.-32     	; 0x92e <gyro_read+0x44>
		while (!(TWCR & (1<<TWINT)));
		data[i] = TWDR;
	}
	
	/* Sende Stop-Kondition */
	gyro_sendStop();
     94e:	0e 94 4a 04 	call	0x894	; 0x894 <gyro_sendStop>
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <gyro_getData>:
		while (!(TWCR & (1<<TWINT)));
}

/* Routine zum Auslesen der Drehratendaten aus dem Gyro */
void gyro_getData(int16_t *pGyroData)
{
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	00 d0       	rcall	.+0      	; 0x966 <gyro_getData+0xa>
     966:	00 d0       	rcall	.+0      	; 0x968 <gyro_getData+0xc>
     968:	00 d0       	rcall	.+0      	; 0x96a <gyro_getData+0xe>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	8c 01       	movw	r16, r24
	uint8_t Buffer[6];	// Buffer zum Einlesen der Daten
	gyro_read(29, Buffer, 6);	// Daten über I2C einlesen
     970:	46 e0       	ldi	r20, 0x06	; 6
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	8d e1       	ldi	r24, 0x1D	; 29
     97a:	0e 94 75 04 	call	0x8ea	; 0x8ea <gyro_read>

	pGyroData[0] = ((int)((Buffer[0]<<8) | Buffer[1]) - gyroOffset[0]); // Datensatz für für die x-Achse
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	98 2f       	mov	r25, r24
     984:	88 27       	eor	r24, r24
     986:	2a 81       	ldd	r18, Y+2	; 0x02
     988:	82 2b       	or	r24, r18
     98a:	ef eb       	ldi	r30, 0xBF	; 191
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	20 81       	ld	r18, Z
     990:	31 81       	ldd	r19, Z+1	; 0x01
     992:	82 1b       	sub	r24, r18
     994:	93 0b       	sbc	r25, r19
     996:	d8 01       	movw	r26, r16
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	9c 93       	st	X, r25
     99c:	8e 93       	st	-X, r24
	pGyroData[1] = ((int)((Buffer[2]<<8) | Buffer[3]) - gyroOffset[1]); // Datensatz für für die y-Achse
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	98 2f       	mov	r25, r24
     9a4:	88 27       	eor	r24, r24
     9a6:	2c 81       	ldd	r18, Y+4	; 0x04
     9a8:	82 2b       	or	r24, r18
     9aa:	22 81       	ldd	r18, Z+2	; 0x02
     9ac:	33 81       	ldd	r19, Z+3	; 0x03
     9ae:	82 1b       	sub	r24, r18
     9b0:	93 0b       	sbc	r25, r19
     9b2:	13 96       	adiw	r26, 0x03	; 3
     9b4:	9c 93       	st	X, r25
     9b6:	8e 93       	st	-X, r24
     9b8:	12 97       	sbiw	r26, 0x02	; 2
	pGyroData[2] = ((int)((Buffer[4]<<8) | Buffer[5]) - gyroOffset[2]); // Datensatz für für die z-Achse
     9ba:	8d 81       	ldd	r24, Y+5	; 0x05
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	98 2f       	mov	r25, r24
     9c0:	88 27       	eor	r24, r24
     9c2:	2e 81       	ldd	r18, Y+6	; 0x06
     9c4:	82 2b       	or	r24, r18
     9c6:	24 81       	ldd	r18, Z+4	; 0x04
     9c8:	35 81       	ldd	r19, Z+5	; 0x05
     9ca:	82 1b       	sub	r24, r18
     9cc:	93 0b       	sbc	r25, r19
     9ce:	15 96       	adiw	r26, 0x05	; 5
     9d0:	9c 93       	st	X, r25
     9d2:	8e 93       	st	-X, r24
     9d4:	14 97       	sbiw	r26, 0x04	; 4
}
     9d6:	26 96       	adiw	r28, 0x06	; 6
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <gyro_calibrate>:

/* Routine zum Kalibrieren des Gyro (Bestimmung der Drehratenoffsets der Achsen) */
void gyro_calibrate(void)
{	
     9ec:	4f 92       	push	r4
     9ee:	5f 92       	push	r5
     9f0:	6f 92       	push	r6
     9f2:	7f 92       	push	r7
     9f4:	8f 92       	push	r8
     9f6:	9f 92       	push	r9
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	00 d0       	rcall	.+0      	; 0xa0e <gyro_calibrate+0x22>
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <gyro_calibrate+0x24>
     a10:	00 d0       	rcall	.+0      	; 0xa12 <gyro_calibrate+0x26>
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	00 e4       	ldi	r16, 0x40	; 64
     a18:	10 e0       	ldi	r17, 0x00	; 0
	int16_t i = 0;	// Schleifenzähler
	int16_t gyroData[3];	// Buffervariablen für die Drehraten
	int32_t x=0,y=0,z=0;	// Hilfsvariablen zur Offsetberechnung
     a1a:	c1 2c       	mov	r12, r1
     a1c:	d1 2c       	mov	r13, r1
     a1e:	76 01       	movw	r14, r12
     a20:	81 2c       	mov	r8, r1
     a22:	91 2c       	mov	r9, r1
     a24:	54 01       	movw	r10, r8
     a26:	41 2c       	mov	r4, r1
     a28:	51 2c       	mov	r5, r1
     a2a:	32 01       	movw	r6, r4

	/* Auslesen von 64 Datensätzen aus dem Gyro */
	for (i = 0; i < 64; i++)
	{
		gyro_getData(gyroData);
     a2c:	ce 01       	movw	r24, r28
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	0e 94 ae 04 	call	0x95c	; 0x95c <gyro_getData>
		x += gyroData[0];
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	9a 81       	ldd	r25, Y+2	; 0x02
     a38:	09 2e       	mov	r0, r25
     a3a:	00 0c       	add	r0, r0
     a3c:	aa 0b       	sbc	r26, r26
     a3e:	bb 0b       	sbc	r27, r27
     a40:	48 0e       	add	r4, r24
     a42:	59 1e       	adc	r5, r25
     a44:	6a 1e       	adc	r6, r26
     a46:	7b 1e       	adc	r7, r27
		y += gyroData[1];
     a48:	8b 81       	ldd	r24, Y+3	; 0x03
     a4a:	9c 81       	ldd	r25, Y+4	; 0x04
     a4c:	09 2e       	mov	r0, r25
     a4e:	00 0c       	add	r0, r0
     a50:	aa 0b       	sbc	r26, r26
     a52:	bb 0b       	sbc	r27, r27
     a54:	88 0e       	add	r8, r24
     a56:	99 1e       	adc	r9, r25
     a58:	aa 1e       	adc	r10, r26
     a5a:	bb 1e       	adc	r11, r27
		z += gyroData[2];
     a5c:	8d 81       	ldd	r24, Y+5	; 0x05
     a5e:	9e 81       	ldd	r25, Y+6	; 0x06
     a60:	09 2e       	mov	r0, r25
     a62:	00 0c       	add	r0, r0
     a64:	aa 0b       	sbc	r26, r26
     a66:	bb 0b       	sbc	r27, r27
     a68:	c8 0e       	add	r12, r24
     a6a:	d9 1e       	adc	r13, r25
     a6c:	ea 1e       	adc	r14, r26
     a6e:	fb 1e       	adc	r15, r27
     a70:	8f e1       	ldi	r24, 0x1F	; 31
     a72:	9e e4       	ldi	r25, 0x4E	; 78
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	f1 f7       	brne	.-4      	; 0xa74 <gyro_calibrate+0x88>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <gyro_calibrate+0x8e>
     a7a:	00 00       	nop
     a7c:	01 50       	subi	r16, 0x01	; 1
     a7e:	11 09       	sbc	r17, r1
	int16_t i = 0;	// Schleifenzähler
	int16_t gyroData[3];	// Buffervariablen für die Drehraten
	int32_t x=0,y=0,z=0;	// Hilfsvariablen zur Offsetberechnung

	/* Auslesen von 64 Datensätzen aus dem Gyro */
	for (i = 0; i < 64; i++)
     a80:	a9 f6       	brne	.-86     	; 0xa2c <gyro_calibrate+0x40>
		z += gyroData[2];
		_delay_ms(10);
	}
	
	/* Berechnung des Offsets (Summe / 64) */
	gyroOffset[0] = x >> 6;
     a82:	ef eb       	ldi	r30, 0xBF	; 191
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	68 94       	set
     a88:	15 f8       	bld	r1, 5
     a8a:	75 94       	asr	r7
     a8c:	67 94       	ror	r6
     a8e:	57 94       	ror	r5
     a90:	47 94       	ror	r4
     a92:	16 94       	lsr	r1
     a94:	d1 f7       	brne	.-12     	; 0xa8a <gyro_calibrate+0x9e>
     a96:	51 82       	std	Z+1, r5	; 0x01
     a98:	40 82       	st	Z, r4
	gyroOffset[1] = y >> 6;
     a9a:	68 94       	set
     a9c:	15 f8       	bld	r1, 5
     a9e:	b5 94       	asr	r11
     aa0:	a7 94       	ror	r10
     aa2:	97 94       	ror	r9
     aa4:	87 94       	ror	r8
     aa6:	16 94       	lsr	r1
     aa8:	d1 f7       	brne	.-12     	; 0xa9e <gyro_calibrate+0xb2>
     aaa:	93 82       	std	Z+3, r9	; 0x03
     aac:	82 82       	std	Z+2, r8	; 0x02
	gyroOffset[2] = z >> 6;
     aae:	68 94       	set
     ab0:	15 f8       	bld	r1, 5
     ab2:	f5 94       	asr	r15
     ab4:	e7 94       	ror	r14
     ab6:	d7 94       	ror	r13
     ab8:	c7 94       	ror	r12
     aba:	16 94       	lsr	r1
     abc:	d1 f7       	brne	.-12     	; 0xab2 <gyro_calibrate+0xc6>
     abe:	d5 82       	std	Z+5, r13	; 0x05
     ac0:	c4 82       	std	Z+4, r12	; 0x04
     ac2:	26 96       	adiw	r28, 0x06	; 6
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	9f 90       	pop	r9
     ae4:	8f 90       	pop	r8
     ae6:	7f 90       	pop	r7
     ae8:	6f 90       	pop	r6
     aea:	5f 90       	pop	r5
     aec:	4f 90       	pop	r4
     aee:	08 95       	ret

00000af0 <gyro_init>:

/* Routine zum Initialisieren des Gyros */
void gyro_init(void)
{
	/* Konfiguriere den Gyro */
	TWBR = ((F_CPU/I2C_SPEED) - 16)/2;	// I2C-Register konfigureren
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	80 b9       	out	0x00, r24	; 0
	
	gyro_write(21, 0);				// 1kHz interne Abtastung des Analoggyros
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	85 e1       	ldi	r24, 0x15	; 21
     af8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <gyro_write>
	gyro_write(22, 0b00010011);		// no sync, 1000 deg/s, 42 Hz Lowpass
     afc:	63 e1       	ldi	r22, 0x13	; 19
     afe:	86 e1       	ldi	r24, 0x16	; 22
     b00:	0e 94 5d 04 	call	0x8ba	; 0x8ba <gyro_write>
	
	/* Kalibriere den Gyro (setzt den Gyro-Offset) */
	gyro_calibrate();
     b04:	0e 94 f6 04 	call	0x9ec	; 0x9ec <gyro_calibrate>
     b08:	08 95       	ret

00000b0a <trajektorie_init>:

/* Initialisierungsfunktion für die Solltrajektorienfunktion */
void trajektorie_init()
{
	// Länge der Trajektorie ermitteln
	traj_laenge = sizeof(dy1_dt) / sizeof(dy1_dt[0]);
     b0a:	8f e7       	ldi	r24, 0x7F	; 127
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <traj_laenge+0x1>
     b12:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <traj_laenge>
	
	// Initialisierung d.h. zuerst Beschleunigungsphase starten
	beschleunigungsphase=1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <beschleunigungsphase+0x1>
     b1e:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <beschleunigungsphase>
	// Trajektorenzähler = 0
	i_trj=0;
     b22:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <i_trj+0x1>
     b26:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <i_trj>
     b2a:	08 95       	ret

00000b2c <uart_init>:
}

void uart_flush()
{
	uart_inbufpos=0;
	uart_inbufeval=0;
     b2c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <uart_outbufpos>
     b30:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <uart_outbufeval>
     b34:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <uart_inbufpos>
     b38:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <uart_inbufeval>
     b3c:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <reset_pos>
     b40:	80 b5       	in	r24, 0x20	; 32
     b42:	8f 77       	andi	r24, 0x7F	; 127
     b44:	80 bd       	out	0x20, r24	; 32
     b46:	10 bc       	out	0x20, r1	; 32
     b48:	8c e0       	ldi	r24, 0x0C	; 12
     b4a:	89 b9       	out	0x09, r24	; 9
     b4c:	59 98       	cbi	0x0b, 1	; 11
     b4e:	80 b5       	in	r24, 0x20	; 32
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	80 bd       	out	0x20, r24	; 32
     b54:	86 e8       	ldi	r24, 0x86	; 134
     b56:	80 bd       	out	0x20, r24	; 32
     b58:	88 ed       	ldi	r24, 0xD8	; 216
     b5a:	8a b9       	out	0x0a, r24	; 10
     b5c:	08 95       	ret

00000b5e <uart_getch>:
     b5e:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <uart_inbufpos>
     b62:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uart_inbufeval>
     b66:	98 17       	cp	r25, r24
     b68:	89 f0       	breq	.+34     	; 0xb8c <uart_getch+0x2e>
     b6a:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <uart_inbufeval>
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	8e 0f       	add	r24, r30
     b72:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <uart_inbufeval>
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	e1 53       	subi	r30, 0x31	; 49
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	80 81       	ld	r24, Z
     b7e:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <uart_inbufeval>
     b82:	9f 3f       	cpi	r25, 0xFF	; 255
     b84:	21 f4       	brne	.+8      	; 0xb8e <uart_getch+0x30>
     b86:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <uart_inbufeval>
     b8a:	08 95       	ret
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	08 95       	ret

00000b90 <uart_send>:
     b90:	5d 9b       	sbis	0x0b, 5	; 11
     b92:	17 c0       	rjmp	.+46     	; 0xbc2 <uart_send+0x32>
     b94:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <uart_outbufpos>
     b98:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <uart_outbufeval>
     b9c:	98 17       	cp	r25, r24
     b9e:	89 f0       	breq	.+34     	; 0xbc2 <uart_send+0x32>
     ba0:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <uart_outbufeval>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8e 0f       	add	r24, r30
     ba8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <uart_outbufeval>
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	e5 53       	subi	r30, 0x35	; 53
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	80 81       	ld	r24, Z
     bb4:	8c b9       	out	0x0c, r24	; 12
     bb6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <uart_outbufeval>
     bba:	8f 3f       	cpi	r24, 0xFF	; 255
     bbc:	11 f4       	brne	.+4      	; 0xbc2 <uart_send+0x32>
     bbe:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <uart_outbufeval>
     bc2:	08 95       	ret

00000bc4 <uart_putch>:
     bc4:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <uart_outbufpos>
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	9e 0f       	add	r25, r30
     bcc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <uart_outbufpos>
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	e5 53       	subi	r30, 0x35	; 53
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	80 83       	st	Z, r24
     bd8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <uart_outbufpos>
     bdc:	8f 3f       	cpi	r24, 0xFF	; 255
     bde:	11 f4       	brne	.+4      	; 0xbe4 <uart_putch+0x20>
     be0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <uart_outbufpos>
     be4:	0e 94 c8 05 	call	0xb90	; 0xb90 <uart_send>
     be8:	08 95       	ret

00000bea <uart_puts>:
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
     bf0:	88 81       	ld	r24, Y
     bf2:	88 23       	and	r24, r24
     bf4:	31 f0       	breq	.+12     	; 0xc02 <uart_puts+0x18>
     bf6:	21 96       	adiw	r28, 0x01	; 1
     bf8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_putch>
     bfc:	89 91       	ld	r24, Y+
     bfe:	81 11       	cpse	r24, r1
     c00:	fb cf       	rjmp	.-10     	; 0xbf8 <uart_puts+0xe>
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <uart_receive>:
     c08:	9c b1       	in	r25, 0x0c	; 12
     c0a:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <uart_inbufpos>
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	8e 0f       	add	r24, r30
     c12:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <uart_inbufpos>
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	e1 53       	subi	r30, 0x31	; 49
     c1a:	fe 4f       	sbci	r31, 0xFE	; 254
     c1c:	90 83       	st	Z, r25
     c1e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <uart_inbufpos>
     c22:	8f 3f       	cpi	r24, 0xFF	; 255
     c24:	11 f4       	brne	.+4      	; 0xc2a <uart_receive+0x22>
     c26:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <uart_inbufpos>
     c2a:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <reset_pos>
     c2e:	e8 2f       	mov	r30, r24
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ed 54       	subi	r30, 0x4D	; 77
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	20 81       	ld	r18, Z
     c38:	92 13       	cpse	r25, r18
     c3a:	11 c0       	rjmp	.+34     	; 0xc5e <uart_receive+0x56>
     c3c:	8f 5f       	subi	r24, 0xFF	; 255
     c3e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <reset_pos>
     c42:	8a 30       	cpi	r24, 0x0A	; 10
     c44:	71 f4       	brne	.+28     	; 0xc62 <uart_receive+0x5a>
     c46:	83 e6       	ldi	r24, 0x63	; 99
     c48:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <uart_putch>
     c4c:	99 e0       	ldi	r25, 0x09	; 9
     c4e:	88 e1       	ldi	r24, 0x18	; 24
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	a8 95       	wdr
     c56:	81 bd       	out	0x21, r24	; 33
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	91 bd       	out	0x21, r25	; 33
     c5c:	ff cf       	rjmp	.-2      	; 0xc5c <uart_receive+0x54>
     c5e:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <reset_pos>
     c62:	08 95       	ret

00000c64 <__vector_15>:
}


ISR(USART_TXC_vect)
{
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	4f 93       	push	r20
     c74:	5f 93       	push	r21
     c76:	6f 93       	push	r22
     c78:	7f 93       	push	r23
     c7a:	8f 93       	push	r24
     c7c:	9f 93       	push	r25
     c7e:	af 93       	push	r26
     c80:	bf 93       	push	r27
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
	// character has been sent. see if there is more data in buffer
	uart_send();
     c86:	0e 94 c8 05 	call	0xb90	; 0xb90 <uart_send>
}
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_13>:

ISR(USART_RXC_vect)
{
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
	// character received by uart. load it to buffer
	uart_receive();
     cce:	0e 94 04 06 	call	0xc08	; 0xc08 <uart_receive>
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	bf 91       	pop	r27
     cd8:	af 91       	pop	r26
     cda:	9f 91       	pop	r25
     cdc:	8f 91       	pop	r24
     cde:	7f 91       	pop	r23
     ce0:	6f 91       	pop	r22
     ce2:	5f 91       	pop	r21
     ce4:	4f 91       	pop	r20
     ce6:	3f 91       	pop	r19
     ce8:	2f 91       	pop	r18
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <spi_init>:
	// MC als als Master konfigurieren
	// zu beginn nmodus 0 setzen (CPOL = 0, CPHA = 0)
	// aktiv keinen slave auswÃ¤hlen (alles SS leitungen auf 1)

	// Ausgangspins setzen
	DDRB |= (1<<PB7);	// SCK
     cf4:	bf 9a       	sbi	0x17, 7	; 23
	DDRB |= (1<<PB5);	// MOSI
     cf6:	bd 9a       	sbi	0x17, 5	; 23
	DDRB |= (1<<PB3);	// SS_accelerator
     cf8:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= (1<<PB0);	// SS_Qdec_R
     cfa:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1<<PB4);	// SS_Qdec_L
     cfc:	bc 9a       	sbi	0x17, 4	; 23

	// als master konfigurieren
	SPCR |= (1<<MSTR);
     cfe:	6c 9a       	sbi	0x0d, 4	; 13

	// SPI anschalten
	SPCR |= (1<<SPE);
     d00:	6e 9a       	sbi	0x0d, 6	; 13

	// nmodus 0 setzen, CPOL = 0, CPHA = 0. Ist initial auch auf null, aber fÃ¼r bessere versÃ¤tndlichkeit noch auf null setzen
	SPCR &= ~(1<<CPOL);
     d02:	6b 98       	cbi	0x0d, 3	; 13
	SPCR &= ~(1<<CPHA);
     d04:	6a 98       	cbi	0x0d, 2	; 13

	// SS leitungen auf 1 setzen
	PORTB |= (1<<PB3) | (1<<PB4) | (1<<PB0);
     d06:	88 b3       	in	r24, 0x18	; 24
     d08:	89 61       	ori	r24, 0x19	; 25
     d0a:	88 bb       	out	0x18, r24	; 24
     d0c:	08 95       	ret

00000d0e <spi_select>:
	// Data order: MSB / LSB first
	// Mode 0: CPOL = 0, CPHA = 0
	// SS leitung des gewÃ¼nschten Decoders deaktivieren
	

	if(spiSensorId == FLAG_SPI_QDEC_L)
     d0e:	81 11       	cpse	r24, r1
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <spi_select+0xe>
	{
		PORTB &= ~(1<<PB4);
     d12:	c4 98       	cbi	0x18, 4	; 24
		// CPOL = 0, CPHA = 0
		SPCR &= ~(1<<CPOL); // idle low for SCK
     d14:	6b 98       	cbi	0x0d, 3	; 13
		SPCR &= ~(1<<CPHA); // clock edge for MOSI data shift = high to low
     d16:	6a 98       	cbi	0x0d, 2	; 13
		SPCR &= ~(1<<DORD); // MSB first
     d18:	6d 98       	cbi	0x0d, 5	; 13
     d1a:	08 95       	ret

	}
	else if(spiSensorId == FLAG_SPI_QDEC_R)
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	29 f4       	brne	.+10     	; 0xd2a <spi_select+0x1c>
	{
		PORTB &= ~(1<<PB0);
     d20:	c0 98       	cbi	0x18, 0	; 24
		// CPOL = 0, CPHA = 0
		SPCR &= ~(1<<CPOL); // idle low for SCK
     d22:	6b 98       	cbi	0x0d, 3	; 13
		SPCR &= ~(1<<CPHA); // clock edge for MOSI data shift = high to low
     d24:	6a 98       	cbi	0x0d, 2	; 13
		SPCR &= ~(1<<DORD); // MSB first
     d26:	6d 98       	cbi	0x0d, 5	; 13
     d28:	08 95       	ret
	}
	else if(spiSensorId == FLAG_SPI_ACC)
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	29 f4       	brne	.+10     	; 0xd38 <spi_select+0x2a>
	{
		PORTB &= ~(1<<PB3);
     d2e:	c3 98       	cbi	0x18, 3	; 24
		// CPOL = 1, CPHA = 1
		SPCR |= (1<<CPOL);
     d30:	6b 9a       	sbi	0x0d, 3	; 13
		SPCR |= (1<<CPHA);
     d32:	6a 9a       	sbi	0x0d, 2	; 13
		SPCR &= ~(1<<DORD); // MSB first
     d34:	6d 98       	cbi	0x0d, 5	; 13
     d36:	08 95       	ret

	}
	else if(spiSensorId == FLAG_SPI_NONE)
     d38:	83 36       	cpi	r24, 0x63	; 99
     d3a:	19 f4       	brne	.+6      	; 0xd42 <spi_select+0x34>
	{
		PORTB |= (1<<PB3) | (1<<PB4) | (1<<PB0);
     d3c:	88 b3       	in	r24, 0x18	; 24
     d3e:	89 61       	ori	r24, 0x19	; 25
     d40:	88 bb       	out	0x18, r24	; 24
     d42:	08 95       	ret

00000d44 <spi_sendAndRead>:

	// Damit SCL lÃ¤uft, muss etwas in SPDR geschrieben werden
	// Warte bis die Ãbertragung abgeschlossen ist (SPIF Ã¼berprÃ¼fen)
	// SPDR muss gelesen werden, um SPIF zu lÃ¶schen

	SPDR = data;
     d44:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     d46:	77 9b       	sbis	0x0e, 7	; 14
     d48:	fe cf       	rjmp	.-4      	; 0xd46 <spi_sendAndRead+0x2>
	//_delay_ms(1);
	receivedData = SPDR;
     d4a:	8f b1       	in	r24, 0x0f	; 15
	return receivedData;

	/* CODE END */
}
     d4c:	08 95       	ret

00000d4e <qdec_writeRegister>:
/* Schreiben eines Registers auf den Quadratur-Decodern 
	INPUT:  - spiSensorId:	Auswahl des Decoders welcher angesprochen wird (z.B. FLAG_SPI_QDEC_L)
			- registerByte: Das zeschreibenden Registers (z.B. WRITE_MDR0)
			- data:			Daten die in das Register geschrieben werden sollen */ 
void qdec_writeRegister(uint8_t spiSensorId, uint8_t registerByte, uint8_t data)
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	d6 2f       	mov	r29, r22
     d54:	c4 2f       	mov	r28, r20
	// wird in der init Funktion aufgerufen um die Decoder zu konfigurieren
	// SS leitung des gewÃ¼nschten Decoders aktivieren
	// Daten senden
	// SS leitung des gewÃ¼nschten Decoders deaktivieren

	spi_select(spiSensorId);
     d56:	0e 94 87 06 	call	0xd0e	; 0xd0e <spi_select>
	spi_sendAndRead(registerByte);
     d5a:	8d 2f       	mov	r24, r29
     d5c:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
	spi_sendAndRead(data);
     d60:	8c 2f       	mov	r24, r28
     d62:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
	spi_select(FLAG_SPI_NONE);
     d66:	83 e6       	ldi	r24, 0x63	; 99
     d68:	0e 94 87 06 	call	0xd0e	; 0xd0e <spi_select>
	
	/* CODE END */
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <qdec_writeCommand>:

/* Senden eines Kommandos an die Quadratur-Decoder 
	INPUT:  - spiSensorId:	Auswahl des Decoders welcher angesprochen wird (z.B. FLAG_SPI_QDEC_L)
			- comand:		Das zu sendende Kommando (z.B. CLR_CNTR) */
void qdec_writeCommand(uint8_t spiSensorId, uint8_t command)
{
     d72:	cf 93       	push	r28
     d74:	c6 2f       	mov	r28, r22
	/* CODE START */
	// wird in der init Funktion aufgerufen um die Decoder zu konfigurieren

	spi_select(spiSensorId);
     d76:	0e 94 87 06 	call	0xd0e	; 0xd0e <spi_select>
	spi_sendAndRead(command);
     d7a:	8c 2f       	mov	r24, r28
     d7c:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
	spi_select(FLAG_SPI_NONE);
     d80:	83 e6       	ldi	r24, 0x63	; 99
     d82:	0e 94 87 06 	call	0xd0e	; 0xd0e <spi_select>

	/* CODE END */
}
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <qdec_init>:
void qdec_init(void)
{	
	
	/* links */
	
	qdec_writeRegister(FLAG_SPI_QDEC_L, WRITE_MDR1, DIS_CNTR);			// Zï¿½hlen ausschalten
     d8a:	44 e0       	ldi	r20, 0x04	; 4
     d8c:	60 e9       	ldi	r22, 0x90	; 144
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	0e 94 a7 06 	call	0xd4e	; 0xd4e <qdec_writeRegister>
	qdec_writeRegister(FLAG_SPI_QDEC_L, WRITE_MDR0, QUADRX4|FREE_RUN|DISABLE_INDX|FILTER_1); // Konfigurieren
     d94:	43 e0       	ldi	r20, 0x03	; 3
     d96:	68 e8       	ldi	r22, 0x88	; 136
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <qdec_writeRegister>
	qdec_writeCommand(FLAG_SPI_QDEC_L, CLR_CNTR);							// Zï¿½hler auf null setzen
     d9e:	60 e2       	ldi	r22, 0x20	; 32
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 b9 06 	call	0xd72	; 0xd72 <qdec_writeCommand>
	qdec_writeRegister(FLAG_SPI_QDEC_L, WRITE_MDR1, BYTE_4|EN_CNTR);		// 4 Bytemodus einschalten und Zï¿½hler einschalten
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	60 e9       	ldi	r22, 0x90	; 144
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	0e 94 a7 06 	call	0xd4e	; 0xd4e <qdec_writeRegister>
	
	/* rechts */
	
	qdec_writeRegister(FLAG_SPI_QDEC_R, WRITE_MDR1, DIS_CNTR);			// Zï¿½hlen ausschalten
     db0:	44 e0       	ldi	r20, 0x04	; 4
     db2:	60 e9       	ldi	r22, 0x90	; 144
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <qdec_writeRegister>
	qdec_writeRegister(FLAG_SPI_QDEC_R, WRITE_MDR0, QUADRX4|FREE_RUN|DISABLE_INDX|FILTER_1); // Konfigurieren
     dba:	43 e0       	ldi	r20, 0x03	; 3
     dbc:	68 e8       	ldi	r22, 0x88	; 136
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <qdec_writeRegister>
	qdec_writeCommand(FLAG_SPI_QDEC_R, CLR_CNTR);							// Zï¿½hler auf null setzen
     dc4:	60 e2       	ldi	r22, 0x20	; 32
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 b9 06 	call	0xd72	; 0xd72 <qdec_writeCommand>
	qdec_writeRegister(FLAG_SPI_QDEC_R, WRITE_MDR1, BYTE_4|EN_CNTR);		// 4 Bytemodus einschalten und Zï¿½hler einschalten
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	60 e9       	ldi	r22, 0x90	; 144
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <qdec_writeRegister>
     dd6:	08 95       	ret

00000dd8 <qdec_getCounts>:

/* Gebe die gezï¿½hlten Ticks zurï¿½ck
	INPUT:	- spiSensorId:  Auswahl des Decoders welcher angesprochen wird (z.B. FLAG_SPI_QDEC_L) 
	OUTPUT: - counts:		Anzahl der gezï¿½hlten Ticks */
int32_t qdec_getCounts(uint8_t spiSensorId)
{
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	c8 2f       	mov	r28, r24

	// SS leitung des gewÃ¼nschten Decoders aktivieren
	// Daten senden
	// Daten empfangen

	spi_select(spiSensorId);
     de6:	0e 94 87 06 	call	0xd0e	; 0xd0e <spi_select>
	//spi_sendAndRead(LOAD_OTR); // If required, depends on your setup and need
	spi_sendAndRead(READ_CNTR); // Assuming this is the command to start reading, replace with actual command if different
     dea:	80 e6       	ldi	r24, 0x60	; 96
     dec:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>

	// Cast to uint32_t before shifting to avoid warning
	int32_t counts = (uint32_t)spi_sendAndRead(0) << 24; // MSB
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
     df6:	d8 2f       	mov	r29, r24
	counts |= (uint32_t)spi_sendAndRead(0) << 16;
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
     dfe:	c8 2e       	mov	r12, r24
     e00:	d1 2c       	mov	r13, r1
     e02:	e1 2c       	mov	r14, r1
     e04:	f1 2c       	mov	r15, r1
     e06:	76 01       	movw	r14, r12
     e08:	dd 24       	eor	r13, r13
     e0a:	cc 24       	eor	r12, r12
     e0c:	fd 2a       	or	r15, r29
	counts |= (uint32_t)spi_sendAndRead(0) << 8;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
     e14:	d8 2f       	mov	r29, r24
	counts |= (uint32_t)spi_sendAndRead(0); // LSB
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
     e1c:	c8 2a       	or	r12, r24
     e1e:	dd 2a       	or	r13, r29
	spi_select(FLAG_SPI_NONE);
     e20:	83 e6       	ldi	r24, 0x63	; 99
     e22:	0e 94 87 06 	call	0xd0e	; 0xd0e <spi_select>

	if (spiSensorId == FLAG_SPI_QDEC_R) {
     e26:	c1 30       	cpi	r28, 0x01	; 1
     e28:	41 f4       	brne	.+16     	; 0xe3a <qdec_getCounts+0x62>
        counts = -counts;
     e2a:	f0 94       	com	r15
     e2c:	e0 94       	com	r14
     e2e:	d0 94       	com	r13
     e30:	c0 94       	com	r12
     e32:	c1 1c       	adc	r12, r1
     e34:	d1 1c       	adc	r13, r1
     e36:	e1 1c       	adc	r14, r1
     e38:	f1 1c       	adc	r15, r1
    }

	return counts;

	/* CODE END */
}
     e3a:	c7 01       	movw	r24, r14
     e3c:	b6 01       	movw	r22, r12
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	08 95       	ret

00000e4c <acc_writeRegister>:

/* Schreiben eines Registers auf den Beschleunigungssensoren
	INPUT:  - registerByte: Das zeschreibenden Registers (z.B. ADXL_BW_RATE)
			- data:			Daten die in das Register geschrieben werden sollen */
void acc_writeRegister(uint8_t registerByte, uint8_t data)
{
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	d8 2f       	mov	r29, r24
     e52:	c6 2f       	mov	r28, r22
	/* CODE START */

	// SS leitung des Beschleunigungssensors aktivieren
	// Daten senden
	// SS leitung des Beschleunigungssensors deaktivieren
	spi_select(FLAG_SPI_ACC);
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	0e 94 87 06 	call	0xd0e	; 0xd0e <spi_select>
	spi_sendAndRead(registerByte);
     e5a:	8d 2f       	mov	r24, r29
     e5c:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
	spi_sendAndRead(data);
     e60:	8c 2f       	mov	r24, r28
     e62:	0e 94 a2 06 	call	0xd44	; 0xd44 <spi_sendAndRead>
	spi_select(FLAG_SPI_NONE);
     e66:	83 e6       	ldi	r24, 0x63	; 99
     e68:	0e 94 87 06 	call	0xd0e	; 0xd0e <spi_select>

	/* CODE END */
}
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <acc_init>:
/* Initialisierung des Beschleunigungssensors */
void acc_init(void)
{	
	
	// Konfiguriere den Beschleunigungssensor
	acc_writeRegister(ADXL_BW_RATE,		0b00001010 ); // Output rate 100 Hz, Bandwidth 50 Hz
     e72:	6a e0       	ldi	r22, 0x0A	; 10
     e74:	8c e2       	ldi	r24, 0x2C	; 44
     e76:	0e 94 26 07 	call	0xe4c	; 0xe4c <acc_writeRegister>
	acc_writeRegister(ADXL_DATA_FORMAT, 0b00001011 ); // Volle Auflï¿½sung, Range +-16g !!
     e7a:	6b e0       	ldi	r22, 0x0B	; 11
     e7c:	81 e3       	ldi	r24, 0x31	; 49
     e7e:	0e 94 26 07 	call	0xe4c	; 0xe4c <acc_writeRegister>
		
	// Beschleunigungssensor aus- und wieder einschalten
	acc_writeRegister(ADXL_POWER_CTL,	0b00000000 ); // Alles aus
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	8d e2       	ldi	r24, 0x2D	; 45
     e86:	0e 94 26 07 	call	0xe4c	; 0xe4c <acc_writeRegister>
	acc_writeRegister(ADXL_POWER_CTL,	0b00010000 ); // AUTO_SLEEP modus aktivieren
     e8a:	60 e1       	ldi	r22, 0x10	; 16
     e8c:	8d e2       	ldi	r24, 0x2D	; 45
     e8e:	0e 94 26 07 	call	0xe4c	; 0xe4c <acc_writeRegister>
	acc_writeRegister(ADXL_POWER_CTL,	0b00001000 ); // MEASURE modus aktivieren
     e92:	68 e0       	ldi	r22, 0x08	; 8
     e94:	8d e2       	ldi	r24, 0x2D	; 45
     e96:	0e 94 26 07 	call	0xe4c	; 0xe4c <acc_writeRegister>
     e9a:	2f ef       	ldi	r18, 0xFF	; 255
     e9c:	80 e7       	ldi	r24, 0x70	; 112
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	21 50       	subi	r18, 0x01	; 1
     ea2:	80 40       	sbci	r24, 0x00	; 0
     ea4:	90 40       	sbci	r25, 0x00	; 0
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <acc_init+0x2e>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <acc_init+0x38>
     eaa:	00 00       	nop
     eac:	08 95       	ret

00000eae <__subsf3>:
     eae:	50 58       	subi	r21, 0x80	; 128

00000eb0 <__addsf3>:
     eb0:	bb 27       	eor	r27, r27
     eb2:	aa 27       	eor	r26, r26
     eb4:	0e 94 6f 07 	call	0xede	; 0xede <__addsf3x>
     eb8:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_round>
     ebc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__fp_pscA>
     ec0:	38 f0       	brcs	.+14     	; 0xed0 <__addsf3+0x20>
     ec2:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__fp_pscB>
     ec6:	20 f0       	brcs	.+8      	; 0xed0 <__addsf3+0x20>
     ec8:	39 f4       	brne	.+14     	; 0xed8 <__addsf3+0x28>
     eca:	9f 3f       	cpi	r25, 0xFF	; 255
     ecc:	19 f4       	brne	.+6      	; 0xed4 <__addsf3+0x24>
     ece:	26 f4       	brtc	.+8      	; 0xed8 <__addsf3+0x28>
     ed0:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_nan>
     ed4:	0e f4       	brtc	.+2      	; 0xed8 <__addsf3+0x28>
     ed6:	e0 95       	com	r30
     ed8:	e7 fb       	bst	r30, 7
     eda:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>

00000ede <__addsf3x>:
     ede:	e9 2f       	mov	r30, r25
     ee0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_split3>
     ee4:	58 f3       	brcs	.-42     	; 0xebc <__addsf3+0xc>
     ee6:	ba 17       	cp	r27, r26
     ee8:	62 07       	cpc	r22, r18
     eea:	73 07       	cpc	r23, r19
     eec:	84 07       	cpc	r24, r20
     eee:	95 07       	cpc	r25, r21
     ef0:	20 f0       	brcs	.+8      	; 0xefa <__addsf3x+0x1c>
     ef2:	79 f4       	brne	.+30     	; 0xf12 <__addsf3x+0x34>
     ef4:	a6 f5       	brtc	.+104    	; 0xf5e <__addsf3x+0x80>
     ef6:	0c 94 15 09 	jmp	0x122a	; 0x122a <__fp_zero>
     efa:	0e f4       	brtc	.+2      	; 0xefe <__addsf3x+0x20>
     efc:	e0 95       	com	r30
     efe:	0b 2e       	mov	r0, r27
     f00:	ba 2f       	mov	r27, r26
     f02:	a0 2d       	mov	r26, r0
     f04:	0b 01       	movw	r0, r22
     f06:	b9 01       	movw	r22, r18
     f08:	90 01       	movw	r18, r0
     f0a:	0c 01       	movw	r0, r24
     f0c:	ca 01       	movw	r24, r20
     f0e:	a0 01       	movw	r20, r0
     f10:	11 24       	eor	r1, r1
     f12:	ff 27       	eor	r31, r31
     f14:	59 1b       	sub	r21, r25
     f16:	99 f0       	breq	.+38     	; 0xf3e <__addsf3x+0x60>
     f18:	59 3f       	cpi	r21, 0xF9	; 249
     f1a:	50 f4       	brcc	.+20     	; 0xf30 <__addsf3x+0x52>
     f1c:	50 3e       	cpi	r21, 0xE0	; 224
     f1e:	68 f1       	brcs	.+90     	; 0xf7a <__addsf3x+0x9c>
     f20:	1a 16       	cp	r1, r26
     f22:	f0 40       	sbci	r31, 0x00	; 0
     f24:	a2 2f       	mov	r26, r18
     f26:	23 2f       	mov	r18, r19
     f28:	34 2f       	mov	r19, r20
     f2a:	44 27       	eor	r20, r20
     f2c:	58 5f       	subi	r21, 0xF8	; 248
     f2e:	f3 cf       	rjmp	.-26     	; 0xf16 <__addsf3x+0x38>
     f30:	46 95       	lsr	r20
     f32:	37 95       	ror	r19
     f34:	27 95       	ror	r18
     f36:	a7 95       	ror	r26
     f38:	f0 40       	sbci	r31, 0x00	; 0
     f3a:	53 95       	inc	r21
     f3c:	c9 f7       	brne	.-14     	; 0xf30 <__addsf3x+0x52>
     f3e:	7e f4       	brtc	.+30     	; 0xf5e <__addsf3x+0x80>
     f40:	1f 16       	cp	r1, r31
     f42:	ba 0b       	sbc	r27, r26
     f44:	62 0b       	sbc	r22, r18
     f46:	73 0b       	sbc	r23, r19
     f48:	84 0b       	sbc	r24, r20
     f4a:	ba f0       	brmi	.+46     	; 0xf7a <__addsf3x+0x9c>
     f4c:	91 50       	subi	r25, 0x01	; 1
     f4e:	a1 f0       	breq	.+40     	; 0xf78 <__addsf3x+0x9a>
     f50:	ff 0f       	add	r31, r31
     f52:	bb 1f       	adc	r27, r27
     f54:	66 1f       	adc	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	c2 f7       	brpl	.-16     	; 0xf4c <__addsf3x+0x6e>
     f5c:	0e c0       	rjmp	.+28     	; 0xf7a <__addsf3x+0x9c>
     f5e:	ba 0f       	add	r27, r26
     f60:	62 1f       	adc	r22, r18
     f62:	73 1f       	adc	r23, r19
     f64:	84 1f       	adc	r24, r20
     f66:	48 f4       	brcc	.+18     	; 0xf7a <__addsf3x+0x9c>
     f68:	87 95       	ror	r24
     f6a:	77 95       	ror	r23
     f6c:	67 95       	ror	r22
     f6e:	b7 95       	ror	r27
     f70:	f7 95       	ror	r31
     f72:	9e 3f       	cpi	r25, 0xFE	; 254
     f74:	08 f0       	brcs	.+2      	; 0xf78 <__addsf3x+0x9a>
     f76:	b0 cf       	rjmp	.-160    	; 0xed8 <__addsf3+0x28>
     f78:	93 95       	inc	r25
     f7a:	88 0f       	add	r24, r24
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <__addsf3x+0xa2>
     f7e:	99 27       	eor	r25, r25
     f80:	ee 0f       	add	r30, r30
     f82:	97 95       	ror	r25
     f84:	87 95       	ror	r24
     f86:	08 95       	ret

00000f88 <__cmpsf2>:
     f88:	0e 94 a7 08 	call	0x114e	; 0x114e <__fp_cmp>
     f8c:	08 f4       	brcc	.+2      	; 0xf90 <__cmpsf2+0x8>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	08 95       	ret

00000f92 <__divsf3>:
     f92:	0e 94 dd 07 	call	0xfba	; 0xfba <__divsf3x>
     f96:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_round>
     f9a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__fp_pscB>
     f9e:	58 f0       	brcs	.+22     	; 0xfb6 <__divsf3+0x24>
     fa0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__fp_pscA>
     fa4:	40 f0       	brcs	.+16     	; 0xfb6 <__divsf3+0x24>
     fa6:	29 f4       	brne	.+10     	; 0xfb2 <__divsf3+0x20>
     fa8:	5f 3f       	cpi	r21, 0xFF	; 255
     faa:	29 f0       	breq	.+10     	; 0xfb6 <__divsf3+0x24>
     fac:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>
     fb0:	51 11       	cpse	r21, r1
     fb2:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>
     fb6:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_nan>

00000fba <__divsf3x>:
     fba:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_split3>
     fbe:	68 f3       	brcs	.-38     	; 0xf9a <__divsf3+0x8>

00000fc0 <__divsf3_pse>:
     fc0:	99 23       	and	r25, r25
     fc2:	b1 f3       	breq	.-20     	; 0xfb0 <__divsf3+0x1e>
     fc4:	55 23       	and	r21, r21
     fc6:	91 f3       	breq	.-28     	; 0xfac <__divsf3+0x1a>
     fc8:	95 1b       	sub	r25, r21
     fca:	55 0b       	sbc	r21, r21
     fcc:	bb 27       	eor	r27, r27
     fce:	aa 27       	eor	r26, r26
     fd0:	62 17       	cp	r22, r18
     fd2:	73 07       	cpc	r23, r19
     fd4:	84 07       	cpc	r24, r20
     fd6:	38 f0       	brcs	.+14     	; 0xfe6 <__divsf3_pse+0x26>
     fd8:	9f 5f       	subi	r25, 0xFF	; 255
     fda:	5f 4f       	sbci	r21, 0xFF	; 255
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	44 1f       	adc	r20, r20
     fe2:	aa 1f       	adc	r26, r26
     fe4:	a9 f3       	breq	.-22     	; 0xfd0 <__divsf3_pse+0x10>
     fe6:	35 d0       	rcall	.+106    	; 0x1052 <__divsf3_pse+0x92>
     fe8:	0e 2e       	mov	r0, r30
     fea:	3a f0       	brmi	.+14     	; 0xffa <__divsf3_pse+0x3a>
     fec:	e0 e8       	ldi	r30, 0x80	; 128
     fee:	32 d0       	rcall	.+100    	; 0x1054 <__divsf3_pse+0x94>
     ff0:	91 50       	subi	r25, 0x01	; 1
     ff2:	50 40       	sbci	r21, 0x00	; 0
     ff4:	e6 95       	lsr	r30
     ff6:	00 1c       	adc	r0, r0
     ff8:	ca f7       	brpl	.-14     	; 0xfec <__divsf3_pse+0x2c>
     ffa:	2b d0       	rcall	.+86     	; 0x1052 <__divsf3_pse+0x92>
     ffc:	fe 2f       	mov	r31, r30
     ffe:	29 d0       	rcall	.+82     	; 0x1052 <__divsf3_pse+0x92>
    1000:	66 0f       	add	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	bb 1f       	adc	r27, r27
    1008:	26 17       	cp	r18, r22
    100a:	37 07       	cpc	r19, r23
    100c:	48 07       	cpc	r20, r24
    100e:	ab 07       	cpc	r26, r27
    1010:	b0 e8       	ldi	r27, 0x80	; 128
    1012:	09 f0       	breq	.+2      	; 0x1016 <__divsf3_pse+0x56>
    1014:	bb 0b       	sbc	r27, r27
    1016:	80 2d       	mov	r24, r0
    1018:	bf 01       	movw	r22, r30
    101a:	ff 27       	eor	r31, r31
    101c:	93 58       	subi	r25, 0x83	; 131
    101e:	5f 4f       	sbci	r21, 0xFF	; 255
    1020:	3a f0       	brmi	.+14     	; 0x1030 <__divsf3_pse+0x70>
    1022:	9e 3f       	cpi	r25, 0xFE	; 254
    1024:	51 05       	cpc	r21, r1
    1026:	78 f0       	brcs	.+30     	; 0x1046 <__divsf3_pse+0x86>
    1028:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>
    102c:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>
    1030:	5f 3f       	cpi	r21, 0xFF	; 255
    1032:	e4 f3       	brlt	.-8      	; 0x102c <__divsf3_pse+0x6c>
    1034:	98 3e       	cpi	r25, 0xE8	; 232
    1036:	d4 f3       	brlt	.-12     	; 0x102c <__divsf3_pse+0x6c>
    1038:	86 95       	lsr	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	b7 95       	ror	r27
    1040:	f7 95       	ror	r31
    1042:	9f 5f       	subi	r25, 0xFF	; 255
    1044:	c9 f7       	brne	.-14     	; 0x1038 <__divsf3_pse+0x78>
    1046:	88 0f       	add	r24, r24
    1048:	91 1d       	adc	r25, r1
    104a:	96 95       	lsr	r25
    104c:	87 95       	ror	r24
    104e:	97 f9       	bld	r25, 7
    1050:	08 95       	ret
    1052:	e1 e0       	ldi	r30, 0x01	; 1
    1054:	66 0f       	add	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	88 1f       	adc	r24, r24
    105a:	bb 1f       	adc	r27, r27
    105c:	62 17       	cp	r22, r18
    105e:	73 07       	cpc	r23, r19
    1060:	84 07       	cpc	r24, r20
    1062:	ba 07       	cpc	r27, r26
    1064:	20 f0       	brcs	.+8      	; 0x106e <__divsf3_pse+0xae>
    1066:	62 1b       	sub	r22, r18
    1068:	73 0b       	sbc	r23, r19
    106a:	84 0b       	sbc	r24, r20
    106c:	ba 0b       	sbc	r27, r26
    106e:	ee 1f       	adc	r30, r30
    1070:	88 f7       	brcc	.-30     	; 0x1054 <__divsf3_pse+0x94>
    1072:	e0 95       	com	r30
    1074:	08 95       	ret

00001076 <__fixunssfsi>:
    1076:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__fp_splitA>
    107a:	88 f0       	brcs	.+34     	; 0x109e <__fixunssfsi+0x28>
    107c:	9f 57       	subi	r25, 0x7F	; 127
    107e:	98 f0       	brcs	.+38     	; 0x10a6 <__fixunssfsi+0x30>
    1080:	b9 2f       	mov	r27, r25
    1082:	99 27       	eor	r25, r25
    1084:	b7 51       	subi	r27, 0x17	; 23
    1086:	b0 f0       	brcs	.+44     	; 0x10b4 <__fixunssfsi+0x3e>
    1088:	e1 f0       	breq	.+56     	; 0x10c2 <__fixunssfsi+0x4c>
    108a:	66 0f       	add	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	88 1f       	adc	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	1a f0       	brmi	.+6      	; 0x109a <__fixunssfsi+0x24>
    1094:	ba 95       	dec	r27
    1096:	c9 f7       	brne	.-14     	; 0x108a <__fixunssfsi+0x14>
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <__fixunssfsi+0x4c>
    109a:	b1 30       	cpi	r27, 0x01	; 1
    109c:	91 f0       	breq	.+36     	; 0x10c2 <__fixunssfsi+0x4c>
    109e:	0e 94 15 09 	call	0x122a	; 0x122a <__fp_zero>
    10a2:	b1 e0       	ldi	r27, 0x01	; 1
    10a4:	08 95       	ret
    10a6:	0c 94 15 09 	jmp	0x122a	; 0x122a <__fp_zero>
    10aa:	67 2f       	mov	r22, r23
    10ac:	78 2f       	mov	r23, r24
    10ae:	88 27       	eor	r24, r24
    10b0:	b8 5f       	subi	r27, 0xF8	; 248
    10b2:	39 f0       	breq	.+14     	; 0x10c2 <__fixunssfsi+0x4c>
    10b4:	b9 3f       	cpi	r27, 0xF9	; 249
    10b6:	cc f3       	brlt	.-14     	; 0x10aa <__fixunssfsi+0x34>
    10b8:	86 95       	lsr	r24
    10ba:	77 95       	ror	r23
    10bc:	67 95       	ror	r22
    10be:	b3 95       	inc	r27
    10c0:	d9 f7       	brne	.-10     	; 0x10b8 <__fixunssfsi+0x42>
    10c2:	3e f4       	brtc	.+14     	; 0x10d2 <__fixunssfsi+0x5c>
    10c4:	90 95       	com	r25
    10c6:	80 95       	com	r24
    10c8:	70 95       	com	r23
    10ca:	61 95       	neg	r22
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	08 95       	ret

000010d4 <__floatunsisf>:
    10d4:	e8 94       	clt
    10d6:	09 c0       	rjmp	.+18     	; 0x10ea <__floatsisf+0x12>

000010d8 <__floatsisf>:
    10d8:	97 fb       	bst	r25, 7
    10da:	3e f4       	brtc	.+14     	; 0x10ea <__floatsisf+0x12>
    10dc:	90 95       	com	r25
    10de:	80 95       	com	r24
    10e0:	70 95       	com	r23
    10e2:	61 95       	neg	r22
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	8f 4f       	sbci	r24, 0xFF	; 255
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	99 23       	and	r25, r25
    10ec:	a9 f0       	breq	.+42     	; 0x1118 <__floatsisf+0x40>
    10ee:	f9 2f       	mov	r31, r25
    10f0:	96 e9       	ldi	r25, 0x96	; 150
    10f2:	bb 27       	eor	r27, r27
    10f4:	93 95       	inc	r25
    10f6:	f6 95       	lsr	r31
    10f8:	87 95       	ror	r24
    10fa:	77 95       	ror	r23
    10fc:	67 95       	ror	r22
    10fe:	b7 95       	ror	r27
    1100:	f1 11       	cpse	r31, r1
    1102:	f8 cf       	rjmp	.-16     	; 0x10f4 <__floatsisf+0x1c>
    1104:	fa f4       	brpl	.+62     	; 0x1144 <__floatsisf+0x6c>
    1106:	bb 0f       	add	r27, r27
    1108:	11 f4       	brne	.+4      	; 0x110e <__floatsisf+0x36>
    110a:	60 ff       	sbrs	r22, 0
    110c:	1b c0       	rjmp	.+54     	; 0x1144 <__floatsisf+0x6c>
    110e:	6f 5f       	subi	r22, 0xFF	; 255
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	8f 4f       	sbci	r24, 0xFF	; 255
    1114:	9f 4f       	sbci	r25, 0xFF	; 255
    1116:	16 c0       	rjmp	.+44     	; 0x1144 <__floatsisf+0x6c>
    1118:	88 23       	and	r24, r24
    111a:	11 f0       	breq	.+4      	; 0x1120 <__floatsisf+0x48>
    111c:	96 e9       	ldi	r25, 0x96	; 150
    111e:	11 c0       	rjmp	.+34     	; 0x1142 <__floatsisf+0x6a>
    1120:	77 23       	and	r23, r23
    1122:	21 f0       	breq	.+8      	; 0x112c <__floatsisf+0x54>
    1124:	9e e8       	ldi	r25, 0x8E	; 142
    1126:	87 2f       	mov	r24, r23
    1128:	76 2f       	mov	r23, r22
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <__floatsisf+0x5e>
    112c:	66 23       	and	r22, r22
    112e:	71 f0       	breq	.+28     	; 0x114c <__floatsisf+0x74>
    1130:	96 e8       	ldi	r25, 0x86	; 134
    1132:	86 2f       	mov	r24, r22
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	2a f0       	brmi	.+10     	; 0x1144 <__floatsisf+0x6c>
    113a:	9a 95       	dec	r25
    113c:	66 0f       	add	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	88 1f       	adc	r24, r24
    1142:	da f7       	brpl	.-10     	; 0x113a <__floatsisf+0x62>
    1144:	88 0f       	add	r24, r24
    1146:	96 95       	lsr	r25
    1148:	87 95       	ror	r24
    114a:	97 f9       	bld	r25, 7
    114c:	08 95       	ret

0000114e <__fp_cmp>:
    114e:	99 0f       	add	r25, r25
    1150:	00 08       	sbc	r0, r0
    1152:	55 0f       	add	r21, r21
    1154:	aa 0b       	sbc	r26, r26
    1156:	e0 e8       	ldi	r30, 0x80	; 128
    1158:	fe ef       	ldi	r31, 0xFE	; 254
    115a:	16 16       	cp	r1, r22
    115c:	17 06       	cpc	r1, r23
    115e:	e8 07       	cpc	r30, r24
    1160:	f9 07       	cpc	r31, r25
    1162:	c0 f0       	brcs	.+48     	; 0x1194 <__fp_cmp+0x46>
    1164:	12 16       	cp	r1, r18
    1166:	13 06       	cpc	r1, r19
    1168:	e4 07       	cpc	r30, r20
    116a:	f5 07       	cpc	r31, r21
    116c:	98 f0       	brcs	.+38     	; 0x1194 <__fp_cmp+0x46>
    116e:	62 1b       	sub	r22, r18
    1170:	73 0b       	sbc	r23, r19
    1172:	84 0b       	sbc	r24, r20
    1174:	95 0b       	sbc	r25, r21
    1176:	39 f4       	brne	.+14     	; 0x1186 <__fp_cmp+0x38>
    1178:	0a 26       	eor	r0, r26
    117a:	61 f0       	breq	.+24     	; 0x1194 <__fp_cmp+0x46>
    117c:	23 2b       	or	r18, r19
    117e:	24 2b       	or	r18, r20
    1180:	25 2b       	or	r18, r21
    1182:	21 f4       	brne	.+8      	; 0x118c <__fp_cmp+0x3e>
    1184:	08 95       	ret
    1186:	0a 26       	eor	r0, r26
    1188:	09 f4       	brne	.+2      	; 0x118c <__fp_cmp+0x3e>
    118a:	a1 40       	sbci	r26, 0x01	; 1
    118c:	a6 95       	lsr	r26
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	81 1d       	adc	r24, r1
    1192:	81 1d       	adc	r24, r1
    1194:	08 95       	ret

00001196 <__fp_inf>:
    1196:	97 f9       	bld	r25, 7
    1198:	9f 67       	ori	r25, 0x7F	; 127
    119a:	80 e8       	ldi	r24, 0x80	; 128
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	08 95       	ret

000011a2 <__fp_nan>:
    11a2:	9f ef       	ldi	r25, 0xFF	; 255
    11a4:	80 ec       	ldi	r24, 0xC0	; 192
    11a6:	08 95       	ret

000011a8 <__fp_pscA>:
    11a8:	00 24       	eor	r0, r0
    11aa:	0a 94       	dec	r0
    11ac:	16 16       	cp	r1, r22
    11ae:	17 06       	cpc	r1, r23
    11b0:	18 06       	cpc	r1, r24
    11b2:	09 06       	cpc	r0, r25
    11b4:	08 95       	ret

000011b6 <__fp_pscB>:
    11b6:	00 24       	eor	r0, r0
    11b8:	0a 94       	dec	r0
    11ba:	12 16       	cp	r1, r18
    11bc:	13 06       	cpc	r1, r19
    11be:	14 06       	cpc	r1, r20
    11c0:	05 06       	cpc	r0, r21
    11c2:	08 95       	ret

000011c4 <__fp_round>:
    11c4:	09 2e       	mov	r0, r25
    11c6:	03 94       	inc	r0
    11c8:	00 0c       	add	r0, r0
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <__fp_round+0xc>
    11cc:	88 23       	and	r24, r24
    11ce:	52 f0       	brmi	.+20     	; 0x11e4 <__fp_round+0x20>
    11d0:	bb 0f       	add	r27, r27
    11d2:	40 f4       	brcc	.+16     	; 0x11e4 <__fp_round+0x20>
    11d4:	bf 2b       	or	r27, r31
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__fp_round+0x18>
    11d8:	60 ff       	sbrs	r22, 0
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <__fp_round+0x20>
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	8f 4f       	sbci	r24, 0xFF	; 255
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	08 95       	ret

000011e6 <__fp_split3>:
    11e6:	57 fd       	sbrc	r21, 7
    11e8:	90 58       	subi	r25, 0x80	; 128
    11ea:	44 0f       	add	r20, r20
    11ec:	55 1f       	adc	r21, r21
    11ee:	59 f0       	breq	.+22     	; 0x1206 <__fp_splitA+0x10>
    11f0:	5f 3f       	cpi	r21, 0xFF	; 255
    11f2:	71 f0       	breq	.+28     	; 0x1210 <__fp_splitA+0x1a>
    11f4:	47 95       	ror	r20

000011f6 <__fp_splitA>:
    11f6:	88 0f       	add	r24, r24
    11f8:	97 fb       	bst	r25, 7
    11fa:	99 1f       	adc	r25, r25
    11fc:	61 f0       	breq	.+24     	; 0x1216 <__fp_splitA+0x20>
    11fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1200:	79 f0       	breq	.+30     	; 0x1220 <__fp_splitA+0x2a>
    1202:	87 95       	ror	r24
    1204:	08 95       	ret
    1206:	12 16       	cp	r1, r18
    1208:	13 06       	cpc	r1, r19
    120a:	14 06       	cpc	r1, r20
    120c:	55 1f       	adc	r21, r21
    120e:	f2 cf       	rjmp	.-28     	; 0x11f4 <__fp_split3+0xe>
    1210:	46 95       	lsr	r20
    1212:	f1 df       	rcall	.-30     	; 0x11f6 <__fp_splitA>
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <__fp_splitA+0x30>
    1216:	16 16       	cp	r1, r22
    1218:	17 06       	cpc	r1, r23
    121a:	18 06       	cpc	r1, r24
    121c:	99 1f       	adc	r25, r25
    121e:	f1 cf       	rjmp	.-30     	; 0x1202 <__fp_splitA+0xc>
    1220:	86 95       	lsr	r24
    1222:	71 05       	cpc	r23, r1
    1224:	61 05       	cpc	r22, r1
    1226:	08 94       	sec
    1228:	08 95       	ret

0000122a <__fp_zero>:
    122a:	e8 94       	clt

0000122c <__fp_szero>:
    122c:	bb 27       	eor	r27, r27
    122e:	66 27       	eor	r22, r22
    1230:	77 27       	eor	r23, r23
    1232:	cb 01       	movw	r24, r22
    1234:	97 f9       	bld	r25, 7
    1236:	08 95       	ret

00001238 <__mulsf3>:
    1238:	0e 94 2f 09 	call	0x125e	; 0x125e <__mulsf3x>
    123c:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__fp_round>
    1240:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__fp_pscA>
    1244:	38 f0       	brcs	.+14     	; 0x1254 <__mulsf3+0x1c>
    1246:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__fp_pscB>
    124a:	20 f0       	brcs	.+8      	; 0x1254 <__mulsf3+0x1c>
    124c:	95 23       	and	r25, r21
    124e:	11 f0       	breq	.+4      	; 0x1254 <__mulsf3+0x1c>
    1250:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>
    1254:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__fp_nan>
    1258:	11 24       	eor	r1, r1
    125a:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>

0000125e <__mulsf3x>:
    125e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_split3>
    1262:	70 f3       	brcs	.-36     	; 0x1240 <__mulsf3+0x8>

00001264 <__mulsf3_pse>:
    1264:	95 9f       	mul	r25, r21
    1266:	c1 f3       	breq	.-16     	; 0x1258 <__mulsf3+0x20>
    1268:	95 0f       	add	r25, r21
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	55 1f       	adc	r21, r21
    126e:	62 9f       	mul	r22, r18
    1270:	f0 01       	movw	r30, r0
    1272:	72 9f       	mul	r23, r18
    1274:	bb 27       	eor	r27, r27
    1276:	f0 0d       	add	r31, r0
    1278:	b1 1d       	adc	r27, r1
    127a:	63 9f       	mul	r22, r19
    127c:	aa 27       	eor	r26, r26
    127e:	f0 0d       	add	r31, r0
    1280:	b1 1d       	adc	r27, r1
    1282:	aa 1f       	adc	r26, r26
    1284:	64 9f       	mul	r22, r20
    1286:	66 27       	eor	r22, r22
    1288:	b0 0d       	add	r27, r0
    128a:	a1 1d       	adc	r26, r1
    128c:	66 1f       	adc	r22, r22
    128e:	82 9f       	mul	r24, r18
    1290:	22 27       	eor	r18, r18
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	62 1f       	adc	r22, r18
    1298:	73 9f       	mul	r23, r19
    129a:	b0 0d       	add	r27, r0
    129c:	a1 1d       	adc	r26, r1
    129e:	62 1f       	adc	r22, r18
    12a0:	83 9f       	mul	r24, r19
    12a2:	a0 0d       	add	r26, r0
    12a4:	61 1d       	adc	r22, r1
    12a6:	22 1f       	adc	r18, r18
    12a8:	74 9f       	mul	r23, r20
    12aa:	33 27       	eor	r19, r19
    12ac:	a0 0d       	add	r26, r0
    12ae:	61 1d       	adc	r22, r1
    12b0:	23 1f       	adc	r18, r19
    12b2:	84 9f       	mul	r24, r20
    12b4:	60 0d       	add	r22, r0
    12b6:	21 1d       	adc	r18, r1
    12b8:	82 2f       	mov	r24, r18
    12ba:	76 2f       	mov	r23, r22
    12bc:	6a 2f       	mov	r22, r26
    12be:	11 24       	eor	r1, r1
    12c0:	9f 57       	subi	r25, 0x7F	; 127
    12c2:	50 40       	sbci	r21, 0x00	; 0
    12c4:	9a f0       	brmi	.+38     	; 0x12ec <__mulsf3_pse+0x88>
    12c6:	f1 f0       	breq	.+60     	; 0x1304 <__mulsf3_pse+0xa0>
    12c8:	88 23       	and	r24, r24
    12ca:	4a f0       	brmi	.+18     	; 0x12de <__mulsf3_pse+0x7a>
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	bb 1f       	adc	r27, r27
    12d2:	66 1f       	adc	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	a9 f7       	brne	.-22     	; 0x12c8 <__mulsf3_pse+0x64>
    12de:	9e 3f       	cpi	r25, 0xFE	; 254
    12e0:	51 05       	cpc	r21, r1
    12e2:	80 f0       	brcs	.+32     	; 0x1304 <__mulsf3_pse+0xa0>
    12e4:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_inf>
    12e8:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_szero>
    12ec:	5f 3f       	cpi	r21, 0xFF	; 255
    12ee:	e4 f3       	brlt	.-8      	; 0x12e8 <__mulsf3_pse+0x84>
    12f0:	98 3e       	cpi	r25, 0xE8	; 232
    12f2:	d4 f3       	brlt	.-12     	; 0x12e8 <__mulsf3_pse+0x84>
    12f4:	86 95       	lsr	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	b7 95       	ror	r27
    12fc:	f7 95       	ror	r31
    12fe:	e7 95       	ror	r30
    1300:	9f 5f       	subi	r25, 0xFF	; 255
    1302:	c1 f7       	brne	.-16     	; 0x12f4 <__mulsf3_pse+0x90>
    1304:	fe 2b       	or	r31, r30
    1306:	88 0f       	add	r24, r24
    1308:	91 1d       	adc	r25, r1
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	97 f9       	bld	r25, 7
    1310:	08 95       	ret

00001312 <vfprintf>:
    1312:	a0 e1       	ldi	r26, 0x10	; 16
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ef e8       	ldi	r30, 0x8F	; 143
    1318:	f9 e0       	ldi	r31, 0x09	; 9
    131a:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__prologue_saves__>
    131e:	7c 01       	movw	r14, r24
    1320:	1b 01       	movw	r2, r22
    1322:	6a 01       	movw	r12, r20
    1324:	fc 01       	movw	r30, r24
    1326:	17 82       	std	Z+7, r1	; 0x07
    1328:	16 82       	std	Z+6, r1	; 0x06
    132a:	83 81       	ldd	r24, Z+3	; 0x03
    132c:	81 ff       	sbrs	r24, 1
    132e:	44 c3       	rjmp	.+1672   	; 0x19b8 <vfprintf+0x6a6>
    1330:	9e 01       	movw	r18, r28
    1332:	2f 5f       	subi	r18, 0xFF	; 255
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	39 01       	movw	r6, r18
    1338:	f7 01       	movw	r30, r14
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	f1 01       	movw	r30, r2
    133e:	93 fd       	sbrc	r25, 3
    1340:	85 91       	lpm	r24, Z+
    1342:	93 ff       	sbrs	r25, 3
    1344:	81 91       	ld	r24, Z+
    1346:	1f 01       	movw	r2, r30
    1348:	88 23       	and	r24, r24
    134a:	09 f4       	brne	.+2      	; 0x134e <vfprintf+0x3c>
    134c:	31 c3       	rjmp	.+1634   	; 0x19b0 <vfprintf+0x69e>
    134e:	85 32       	cpi	r24, 0x25	; 37
    1350:	39 f4       	brne	.+14     	; 0x1360 <vfprintf+0x4e>
    1352:	93 fd       	sbrc	r25, 3
    1354:	85 91       	lpm	r24, Z+
    1356:	93 ff       	sbrs	r25, 3
    1358:	81 91       	ld	r24, Z+
    135a:	1f 01       	movw	r2, r30
    135c:	85 32       	cpi	r24, 0x25	; 37
    135e:	39 f4       	brne	.+14     	; 0x136e <vfprintf+0x5c>
    1360:	b7 01       	movw	r22, r14
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1368:	56 01       	movw	r10, r12
    136a:	65 01       	movw	r12, r10
    136c:	e5 cf       	rjmp	.-54     	; 0x1338 <vfprintf+0x26>
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	51 2c       	mov	r5, r1
    1372:	91 2c       	mov	r9, r1
    1374:	ff e1       	ldi	r31, 0x1F	; 31
    1376:	f9 15       	cp	r31, r9
    1378:	d8 f0       	brcs	.+54     	; 0x13b0 <vfprintf+0x9e>
    137a:	8b 32       	cpi	r24, 0x2B	; 43
    137c:	79 f0       	breq	.+30     	; 0x139c <vfprintf+0x8a>
    137e:	38 f4       	brcc	.+14     	; 0x138e <vfprintf+0x7c>
    1380:	80 32       	cpi	r24, 0x20	; 32
    1382:	79 f0       	breq	.+30     	; 0x13a2 <vfprintf+0x90>
    1384:	83 32       	cpi	r24, 0x23	; 35
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <vfprintf+0x9e>
    1388:	f9 2d       	mov	r31, r9
    138a:	f0 61       	ori	r31, 0x10	; 16
    138c:	2e c0       	rjmp	.+92     	; 0x13ea <vfprintf+0xd8>
    138e:	8d 32       	cpi	r24, 0x2D	; 45
    1390:	61 f0       	breq	.+24     	; 0x13aa <vfprintf+0x98>
    1392:	80 33       	cpi	r24, 0x30	; 48
    1394:	69 f4       	brne	.+26     	; 0x13b0 <vfprintf+0x9e>
    1396:	29 2d       	mov	r18, r9
    1398:	21 60       	ori	r18, 0x01	; 1
    139a:	2d c0       	rjmp	.+90     	; 0x13f6 <vfprintf+0xe4>
    139c:	39 2d       	mov	r19, r9
    139e:	32 60       	ori	r19, 0x02	; 2
    13a0:	93 2e       	mov	r9, r19
    13a2:	89 2d       	mov	r24, r9
    13a4:	84 60       	ori	r24, 0x04	; 4
    13a6:	98 2e       	mov	r9, r24
    13a8:	2a c0       	rjmp	.+84     	; 0x13fe <vfprintf+0xec>
    13aa:	e9 2d       	mov	r30, r9
    13ac:	e8 60       	ori	r30, 0x08	; 8
    13ae:	15 c0       	rjmp	.+42     	; 0x13da <vfprintf+0xc8>
    13b0:	97 fc       	sbrc	r9, 7
    13b2:	2d c0       	rjmp	.+90     	; 0x140e <vfprintf+0xfc>
    13b4:	20 ed       	ldi	r18, 0xD0	; 208
    13b6:	28 0f       	add	r18, r24
    13b8:	2a 30       	cpi	r18, 0x0A	; 10
    13ba:	88 f4       	brcc	.+34     	; 0x13de <vfprintf+0xcc>
    13bc:	96 fe       	sbrs	r9, 6
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <vfprintf+0xba>
    13c0:	3a e0       	ldi	r19, 0x0A	; 10
    13c2:	13 9f       	mul	r17, r19
    13c4:	20 0d       	add	r18, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	12 2f       	mov	r17, r18
    13ca:	19 c0       	rjmp	.+50     	; 0x13fe <vfprintf+0xec>
    13cc:	8a e0       	ldi	r24, 0x0A	; 10
    13ce:	58 9e       	mul	r5, r24
    13d0:	20 0d       	add	r18, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	52 2e       	mov	r5, r18
    13d6:	e9 2d       	mov	r30, r9
    13d8:	e0 62       	ori	r30, 0x20	; 32
    13da:	9e 2e       	mov	r9, r30
    13dc:	10 c0       	rjmp	.+32     	; 0x13fe <vfprintf+0xec>
    13de:	8e 32       	cpi	r24, 0x2E	; 46
    13e0:	31 f4       	brne	.+12     	; 0x13ee <vfprintf+0xdc>
    13e2:	96 fc       	sbrc	r9, 6
    13e4:	e5 c2       	rjmp	.+1482   	; 0x19b0 <vfprintf+0x69e>
    13e6:	f9 2d       	mov	r31, r9
    13e8:	f0 64       	ori	r31, 0x40	; 64
    13ea:	9f 2e       	mov	r9, r31
    13ec:	08 c0       	rjmp	.+16     	; 0x13fe <vfprintf+0xec>
    13ee:	8c 36       	cpi	r24, 0x6C	; 108
    13f0:	21 f4       	brne	.+8      	; 0x13fa <vfprintf+0xe8>
    13f2:	29 2d       	mov	r18, r9
    13f4:	20 68       	ori	r18, 0x80	; 128
    13f6:	92 2e       	mov	r9, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <vfprintf+0xec>
    13fa:	88 36       	cpi	r24, 0x68	; 104
    13fc:	41 f4       	brne	.+16     	; 0x140e <vfprintf+0xfc>
    13fe:	f1 01       	movw	r30, r2
    1400:	93 fd       	sbrc	r25, 3
    1402:	85 91       	lpm	r24, Z+
    1404:	93 ff       	sbrs	r25, 3
    1406:	81 91       	ld	r24, Z+
    1408:	1f 01       	movw	r2, r30
    140a:	81 11       	cpse	r24, r1
    140c:	b3 cf       	rjmp	.-154    	; 0x1374 <vfprintf+0x62>
    140e:	9b eb       	ldi	r25, 0xBB	; 187
    1410:	98 0f       	add	r25, r24
    1412:	93 30       	cpi	r25, 0x03	; 3
    1414:	20 f4       	brcc	.+8      	; 0x141e <vfprintf+0x10c>
    1416:	99 2d       	mov	r25, r9
    1418:	90 61       	ori	r25, 0x10	; 16
    141a:	80 5e       	subi	r24, 0xE0	; 224
    141c:	07 c0       	rjmp	.+14     	; 0x142c <vfprintf+0x11a>
    141e:	9b e9       	ldi	r25, 0x9B	; 155
    1420:	98 0f       	add	r25, r24
    1422:	93 30       	cpi	r25, 0x03	; 3
    1424:	08 f0       	brcs	.+2      	; 0x1428 <vfprintf+0x116>
    1426:	66 c1       	rjmp	.+716    	; 0x16f4 <vfprintf+0x3e2>
    1428:	99 2d       	mov	r25, r9
    142a:	9f 7e       	andi	r25, 0xEF	; 239
    142c:	96 ff       	sbrs	r25, 6
    142e:	16 e0       	ldi	r17, 0x06	; 6
    1430:	9f 73       	andi	r25, 0x3F	; 63
    1432:	99 2e       	mov	r9, r25
    1434:	85 36       	cpi	r24, 0x65	; 101
    1436:	19 f4       	brne	.+6      	; 0x143e <vfprintf+0x12c>
    1438:	90 64       	ori	r25, 0x40	; 64
    143a:	99 2e       	mov	r9, r25
    143c:	08 c0       	rjmp	.+16     	; 0x144e <vfprintf+0x13c>
    143e:	86 36       	cpi	r24, 0x66	; 102
    1440:	21 f4       	brne	.+8      	; 0x144a <vfprintf+0x138>
    1442:	39 2f       	mov	r19, r25
    1444:	30 68       	ori	r19, 0x80	; 128
    1446:	93 2e       	mov	r9, r19
    1448:	02 c0       	rjmp	.+4      	; 0x144e <vfprintf+0x13c>
    144a:	11 11       	cpse	r17, r1
    144c:	11 50       	subi	r17, 0x01	; 1
    144e:	97 fe       	sbrs	r9, 7
    1450:	07 c0       	rjmp	.+14     	; 0x1460 <vfprintf+0x14e>
    1452:	1c 33       	cpi	r17, 0x3C	; 60
    1454:	50 f4       	brcc	.+20     	; 0x146a <vfprintf+0x158>
    1456:	44 24       	eor	r4, r4
    1458:	43 94       	inc	r4
    145a:	41 0e       	add	r4, r17
    145c:	27 e0       	ldi	r18, 0x07	; 7
    145e:	0b c0       	rjmp	.+22     	; 0x1476 <vfprintf+0x164>
    1460:	18 30       	cpi	r17, 0x08	; 8
    1462:	38 f0       	brcs	.+14     	; 0x1472 <vfprintf+0x160>
    1464:	27 e0       	ldi	r18, 0x07	; 7
    1466:	17 e0       	ldi	r17, 0x07	; 7
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <vfprintf+0x162>
    146a:	27 e0       	ldi	r18, 0x07	; 7
    146c:	9c e3       	ldi	r25, 0x3C	; 60
    146e:	49 2e       	mov	r4, r25
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x164>
    1472:	21 2f       	mov	r18, r17
    1474:	41 2c       	mov	r4, r1
    1476:	56 01       	movw	r10, r12
    1478:	84 e0       	ldi	r24, 0x04	; 4
    147a:	a8 0e       	add	r10, r24
    147c:	b1 1c       	adc	r11, r1
    147e:	f6 01       	movw	r30, r12
    1480:	60 81       	ld	r22, Z
    1482:	71 81       	ldd	r23, Z+1	; 0x01
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	93 81       	ldd	r25, Z+3	; 0x03
    1488:	04 2d       	mov	r16, r4
    148a:	a3 01       	movw	r20, r6
    148c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__ftoa_engine>
    1490:	6c 01       	movw	r12, r24
    1492:	f9 81       	ldd	r31, Y+1	; 0x01
    1494:	fc 87       	std	Y+12, r31	; 0x0c
    1496:	f0 ff       	sbrs	r31, 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x18c>
    149a:	f3 ff       	sbrs	r31, 3
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <vfprintf+0x198>
    149e:	91 fc       	sbrc	r9, 1
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <vfprintf+0x19c>
    14a2:	92 fe       	sbrs	r9, 2
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0x1a0>
    14a6:	00 e2       	ldi	r16, 0x20	; 32
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <vfprintf+0x1a2>
    14aa:	0d e2       	ldi	r16, 0x2D	; 45
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <vfprintf+0x1a2>
    14ae:	0b e2       	ldi	r16, 0x2B	; 43
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <vfprintf+0x1a2>
    14b2:	00 e0       	ldi	r16, 0x00	; 0
    14b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14b6:	8c 70       	andi	r24, 0x0C	; 12
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <vfprintf+0x1ae>
    14ba:	01 11       	cpse	r16, r1
    14bc:	5a c2       	rjmp	.+1204   	; 0x1972 <vfprintf+0x660>
    14be:	9b c2       	rjmp	.+1334   	; 0x19f6 <vfprintf+0x6e4>
    14c0:	97 fe       	sbrs	r9, 7
    14c2:	10 c0       	rjmp	.+32     	; 0x14e4 <vfprintf+0x1d2>
    14c4:	4c 0c       	add	r4, r12
    14c6:	fc 85       	ldd	r31, Y+12	; 0x0c
    14c8:	f4 ff       	sbrs	r31, 4
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <vfprintf+0x1c2>
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	81 33       	cpi	r24, 0x31	; 49
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <vfprintf+0x1c2>
    14d2:	4a 94       	dec	r4
    14d4:	14 14       	cp	r1, r4
    14d6:	74 f5       	brge	.+92     	; 0x1534 <vfprintf+0x222>
    14d8:	28 e0       	ldi	r18, 0x08	; 8
    14da:	24 15       	cp	r18, r4
    14dc:	78 f5       	brcc	.+94     	; 0x153c <vfprintf+0x22a>
    14de:	88 e0       	ldi	r24, 0x08	; 8
    14e0:	48 2e       	mov	r4, r24
    14e2:	2c c0       	rjmp	.+88     	; 0x153c <vfprintf+0x22a>
    14e4:	96 fc       	sbrc	r9, 6
    14e6:	2a c0       	rjmp	.+84     	; 0x153c <vfprintf+0x22a>
    14e8:	81 2f       	mov	r24, r17
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	8c 15       	cp	r24, r12
    14ee:	9d 05       	cpc	r25, r13
    14f0:	9c f0       	brlt	.+38     	; 0x1518 <vfprintf+0x206>
    14f2:	3c ef       	ldi	r19, 0xFC	; 252
    14f4:	c3 16       	cp	r12, r19
    14f6:	3f ef       	ldi	r19, 0xFF	; 255
    14f8:	d3 06       	cpc	r13, r19
    14fa:	74 f0       	brlt	.+28     	; 0x1518 <vfprintf+0x206>
    14fc:	89 2d       	mov	r24, r9
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	98 2e       	mov	r9, r24
    1502:	0a c0       	rjmp	.+20     	; 0x1518 <vfprintf+0x206>
    1504:	e2 e0       	ldi	r30, 0x02	; 2
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	ec 0f       	add	r30, r28
    150a:	fd 1f       	adc	r31, r29
    150c:	e1 0f       	add	r30, r17
    150e:	f1 1d       	adc	r31, r1
    1510:	80 81       	ld	r24, Z
    1512:	80 33       	cpi	r24, 0x30	; 48
    1514:	19 f4       	brne	.+6      	; 0x151c <vfprintf+0x20a>
    1516:	11 50       	subi	r17, 0x01	; 1
    1518:	11 11       	cpse	r17, r1
    151a:	f4 cf       	rjmp	.-24     	; 0x1504 <vfprintf+0x1f2>
    151c:	97 fe       	sbrs	r9, 7
    151e:	0e c0       	rjmp	.+28     	; 0x153c <vfprintf+0x22a>
    1520:	44 24       	eor	r4, r4
    1522:	43 94       	inc	r4
    1524:	41 0e       	add	r4, r17
    1526:	81 2f       	mov	r24, r17
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	c8 16       	cp	r12, r24
    152c:	d9 06       	cpc	r13, r25
    152e:	2c f4       	brge	.+10     	; 0x153a <vfprintf+0x228>
    1530:	1c 19       	sub	r17, r12
    1532:	04 c0       	rjmp	.+8      	; 0x153c <vfprintf+0x22a>
    1534:	44 24       	eor	r4, r4
    1536:	43 94       	inc	r4
    1538:	01 c0       	rjmp	.+2      	; 0x153c <vfprintf+0x22a>
    153a:	10 e0       	ldi	r17, 0x00	; 0
    153c:	97 fe       	sbrs	r9, 7
    153e:	06 c0       	rjmp	.+12     	; 0x154c <vfprintf+0x23a>
    1540:	1c 14       	cp	r1, r12
    1542:	1d 04       	cpc	r1, r13
    1544:	34 f4       	brge	.+12     	; 0x1552 <vfprintf+0x240>
    1546:	c6 01       	movw	r24, r12
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <vfprintf+0x244>
    154c:	85 e0       	ldi	r24, 0x05	; 5
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vfprintf+0x244>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	01 11       	cpse	r16, r1
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	11 23       	and	r17, r17
    155c:	31 f0       	breq	.+12     	; 0x156a <vfprintf+0x258>
    155e:	21 2f       	mov	r18, r17
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	2f 5f       	subi	r18, 0xFF	; 255
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	82 0f       	add	r24, r18
    1568:	93 1f       	adc	r25, r19
    156a:	25 2d       	mov	r18, r5
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	82 17       	cp	r24, r18
    1570:	93 07       	cpc	r25, r19
    1572:	14 f4       	brge	.+4      	; 0x1578 <vfprintf+0x266>
    1574:	58 1a       	sub	r5, r24
    1576:	01 c0       	rjmp	.+2      	; 0x157a <vfprintf+0x268>
    1578:	51 2c       	mov	r5, r1
    157a:	89 2d       	mov	r24, r9
    157c:	89 70       	andi	r24, 0x09	; 9
    157e:	49 f4       	brne	.+18     	; 0x1592 <vfprintf+0x280>
    1580:	55 20       	and	r5, r5
    1582:	39 f0       	breq	.+14     	; 0x1592 <vfprintf+0x280>
    1584:	b7 01       	movw	r22, r14
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    158e:	5a 94       	dec	r5
    1590:	f7 cf       	rjmp	.-18     	; 0x1580 <vfprintf+0x26e>
    1592:	00 23       	and	r16, r16
    1594:	29 f0       	breq	.+10     	; 0x15a0 <vfprintf+0x28e>
    1596:	b7 01       	movw	r22, r14
    1598:	80 2f       	mov	r24, r16
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    15a0:	93 fc       	sbrc	r9, 3
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <vfprintf+0x2a4>
    15a4:	55 20       	and	r5, r5
    15a6:	39 f0       	breq	.+14     	; 0x15b6 <vfprintf+0x2a4>
    15a8:	b7 01       	movw	r22, r14
    15aa:	80 e3       	ldi	r24, 0x30	; 48
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    15b2:	5a 94       	dec	r5
    15b4:	f7 cf       	rjmp	.-18     	; 0x15a4 <vfprintf+0x292>
    15b6:	97 fe       	sbrs	r9, 7
    15b8:	4c c0       	rjmp	.+152    	; 0x1652 <vfprintf+0x340>
    15ba:	46 01       	movw	r8, r12
    15bc:	d7 fe       	sbrs	r13, 7
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <vfprintf+0x2b2>
    15c0:	81 2c       	mov	r8, r1
    15c2:	91 2c       	mov	r9, r1
    15c4:	c6 01       	movw	r24, r12
    15c6:	88 19       	sub	r24, r8
    15c8:	99 09       	sbc	r25, r9
    15ca:	f3 01       	movw	r30, r6
    15cc:	e8 0f       	add	r30, r24
    15ce:	f9 1f       	adc	r31, r25
    15d0:	fe 87       	std	Y+14, r31	; 0x0e
    15d2:	ed 87       	std	Y+13, r30	; 0x0d
    15d4:	96 01       	movw	r18, r12
    15d6:	24 19       	sub	r18, r4
    15d8:	31 09       	sbc	r19, r1
    15da:	38 8b       	std	Y+16, r19	; 0x10
    15dc:	2f 87       	std	Y+15, r18	; 0x0f
    15de:	01 2f       	mov	r16, r17
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	11 95       	neg	r17
    15e4:	01 95       	neg	r16
    15e6:	11 09       	sbc	r17, r1
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	83 16       	cp	r8, r19
    15ec:	93 06       	cpc	r9, r19
    15ee:	29 f4       	brne	.+10     	; 0x15fa <vfprintf+0x2e8>
    15f0:	b7 01       	movw	r22, r14
    15f2:	8e e2       	ldi	r24, 0x2E	; 46
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    15fa:	c8 14       	cp	r12, r8
    15fc:	d9 04       	cpc	r13, r9
    15fe:	4c f0       	brlt	.+18     	; 0x1612 <vfprintf+0x300>
    1600:	8f 85       	ldd	r24, Y+15	; 0x0f
    1602:	98 89       	ldd	r25, Y+16	; 0x10
    1604:	88 15       	cp	r24, r8
    1606:	99 05       	cpc	r25, r9
    1608:	24 f4       	brge	.+8      	; 0x1612 <vfprintf+0x300>
    160a:	ed 85       	ldd	r30, Y+13	; 0x0d
    160c:	fe 85       	ldd	r31, Y+14	; 0x0e
    160e:	81 81       	ldd	r24, Z+1	; 0x01
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <vfprintf+0x302>
    1612:	80 e3       	ldi	r24, 0x30	; 48
    1614:	f1 e0       	ldi	r31, 0x01	; 1
    1616:	8f 1a       	sub	r8, r31
    1618:	91 08       	sbc	r9, r1
    161a:	2d 85       	ldd	r18, Y+13	; 0x0d
    161c:	3e 85       	ldd	r19, Y+14	; 0x0e
    161e:	2f 5f       	subi	r18, 0xFF	; 255
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	3e 87       	std	Y+14, r19	; 0x0e
    1624:	2d 87       	std	Y+13, r18	; 0x0d
    1626:	80 16       	cp	r8, r16
    1628:	91 06       	cpc	r9, r17
    162a:	2c f0       	brlt	.+10     	; 0x1636 <vfprintf+0x324>
    162c:	b7 01       	movw	r22, r14
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1634:	d9 cf       	rjmp	.-78     	; 0x15e8 <vfprintf+0x2d6>
    1636:	c8 14       	cp	r12, r8
    1638:	d9 04       	cpc	r13, r9
    163a:	41 f4       	brne	.+16     	; 0x164c <vfprintf+0x33a>
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	96 33       	cpi	r25, 0x36	; 54
    1640:	20 f4       	brcc	.+8      	; 0x164a <vfprintf+0x338>
    1642:	95 33       	cpi	r25, 0x35	; 53
    1644:	19 f4       	brne	.+6      	; 0x164c <vfprintf+0x33a>
    1646:	3c 85       	ldd	r19, Y+12	; 0x0c
    1648:	34 ff       	sbrs	r19, 4
    164a:	81 e3       	ldi	r24, 0x31	; 49
    164c:	b7 01       	movw	r22, r14
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	4e c0       	rjmp	.+156    	; 0x16ee <vfprintf+0x3dc>
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	81 33       	cpi	r24, 0x31	; 49
    1656:	19 f0       	breq	.+6      	; 0x165e <vfprintf+0x34c>
    1658:	9c 85       	ldd	r25, Y+12	; 0x0c
    165a:	9f 7e       	andi	r25, 0xEF	; 239
    165c:	9c 87       	std	Y+12, r25	; 0x0c
    165e:	b7 01       	movw	r22, r14
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1666:	11 11       	cpse	r17, r1
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <vfprintf+0x362>
    166a:	94 fc       	sbrc	r9, 4
    166c:	18 c0       	rjmp	.+48     	; 0x169e <vfprintf+0x38c>
    166e:	85 e6       	ldi	r24, 0x65	; 101
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	17 c0       	rjmp	.+46     	; 0x16a2 <vfprintf+0x390>
    1674:	b7 01       	movw	r22, r14
    1676:	8e e2       	ldi	r24, 0x2E	; 46
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    167e:	1e 5f       	subi	r17, 0xFE	; 254
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	01 e0       	ldi	r16, 0x01	; 1
    1684:	08 0f       	add	r16, r24
    1686:	f3 01       	movw	r30, r6
    1688:	e8 0f       	add	r30, r24
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
    168e:	b7 01       	movw	r22, r14
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1696:	80 2f       	mov	r24, r16
    1698:	01 13       	cpse	r16, r17
    169a:	f3 cf       	rjmp	.-26     	; 0x1682 <vfprintf+0x370>
    169c:	e6 cf       	rjmp	.-52     	; 0x166a <vfprintf+0x358>
    169e:	85 e4       	ldi	r24, 0x45	; 69
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	b7 01       	movw	r22, r14
    16a4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    16a8:	d7 fc       	sbrc	r13, 7
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <vfprintf+0x3a6>
    16ac:	c1 14       	cp	r12, r1
    16ae:	d1 04       	cpc	r13, r1
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <vfprintf+0x3b0>
    16b2:	ec 85       	ldd	r30, Y+12	; 0x0c
    16b4:	e4 ff       	sbrs	r30, 4
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <vfprintf+0x3b0>
    16b8:	d1 94       	neg	r13
    16ba:	c1 94       	neg	r12
    16bc:	d1 08       	sbc	r13, r1
    16be:	8d e2       	ldi	r24, 0x2D	; 45
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <vfprintf+0x3b2>
    16c2:	8b e2       	ldi	r24, 0x2B	; 43
    16c4:	b7 01       	movw	r22, r14
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    16cc:	80 e3       	ldi	r24, 0x30	; 48
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	c2 16       	cp	r12, r18
    16d2:	d1 04       	cpc	r13, r1
    16d4:	2c f0       	brlt	.+10     	; 0x16e0 <vfprintf+0x3ce>
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	fa e0       	ldi	r31, 0x0A	; 10
    16da:	cf 1a       	sub	r12, r31
    16dc:	d1 08       	sbc	r13, r1
    16de:	f7 cf       	rjmp	.-18     	; 0x16ce <vfprintf+0x3bc>
    16e0:	b7 01       	movw	r22, r14
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    16e8:	b7 01       	movw	r22, r14
    16ea:	c6 01       	movw	r24, r12
    16ec:	c0 96       	adiw	r24, 0x30	; 48
    16ee:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    16f2:	54 c1       	rjmp	.+680    	; 0x199c <vfprintf+0x68a>
    16f4:	83 36       	cpi	r24, 0x63	; 99
    16f6:	31 f0       	breq	.+12     	; 0x1704 <vfprintf+0x3f2>
    16f8:	83 37       	cpi	r24, 0x73	; 115
    16fa:	79 f0       	breq	.+30     	; 0x171a <vfprintf+0x408>
    16fc:	83 35       	cpi	r24, 0x53	; 83
    16fe:	09 f0       	breq	.+2      	; 0x1702 <vfprintf+0x3f0>
    1700:	56 c0       	rjmp	.+172    	; 0x17ae <vfprintf+0x49c>
    1702:	20 c0       	rjmp	.+64     	; 0x1744 <vfprintf+0x432>
    1704:	56 01       	movw	r10, r12
    1706:	32 e0       	ldi	r19, 0x02	; 2
    1708:	a3 0e       	add	r10, r19
    170a:	b1 1c       	adc	r11, r1
    170c:	f6 01       	movw	r30, r12
    170e:	80 81       	ld	r24, Z
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	01 e0       	ldi	r16, 0x01	; 1
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	63 01       	movw	r12, r6
    1718:	12 c0       	rjmp	.+36     	; 0x173e <vfprintf+0x42c>
    171a:	56 01       	movw	r10, r12
    171c:	f2 e0       	ldi	r31, 0x02	; 2
    171e:	af 0e       	add	r10, r31
    1720:	b1 1c       	adc	r11, r1
    1722:	f6 01       	movw	r30, r12
    1724:	c0 80       	ld	r12, Z
    1726:	d1 80       	ldd	r13, Z+1	; 0x01
    1728:	96 fe       	sbrs	r9, 6
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <vfprintf+0x420>
    172c:	61 2f       	mov	r22, r17
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x424>
    1732:	6f ef       	ldi	r22, 0xFF	; 255
    1734:	7f ef       	ldi	r23, 0xFF	; 255
    1736:	c6 01       	movw	r24, r12
    1738:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <strnlen>
    173c:	8c 01       	movw	r16, r24
    173e:	f9 2d       	mov	r31, r9
    1740:	ff 77       	andi	r31, 0x7F	; 127
    1742:	14 c0       	rjmp	.+40     	; 0x176c <vfprintf+0x45a>
    1744:	56 01       	movw	r10, r12
    1746:	22 e0       	ldi	r18, 0x02	; 2
    1748:	a2 0e       	add	r10, r18
    174a:	b1 1c       	adc	r11, r1
    174c:	f6 01       	movw	r30, r12
    174e:	c0 80       	ld	r12, Z
    1750:	d1 80       	ldd	r13, Z+1	; 0x01
    1752:	96 fe       	sbrs	r9, 6
    1754:	03 c0       	rjmp	.+6      	; 0x175c <vfprintf+0x44a>
    1756:	61 2f       	mov	r22, r17
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x44e>
    175c:	6f ef       	ldi	r22, 0xFF	; 255
    175e:	7f ef       	ldi	r23, 0xFF	; 255
    1760:	c6 01       	movw	r24, r12
    1762:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <strnlen_P>
    1766:	8c 01       	movw	r16, r24
    1768:	f9 2d       	mov	r31, r9
    176a:	f0 68       	ori	r31, 0x80	; 128
    176c:	9f 2e       	mov	r9, r31
    176e:	f3 fd       	sbrc	r31, 3
    1770:	1a c0       	rjmp	.+52     	; 0x17a6 <vfprintf+0x494>
    1772:	85 2d       	mov	r24, r5
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	08 17       	cp	r16, r24
    1778:	19 07       	cpc	r17, r25
    177a:	a8 f4       	brcc	.+42     	; 0x17a6 <vfprintf+0x494>
    177c:	b7 01       	movw	r22, r14
    177e:	80 e2       	ldi	r24, 0x20	; 32
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1786:	5a 94       	dec	r5
    1788:	f4 cf       	rjmp	.-24     	; 0x1772 <vfprintf+0x460>
    178a:	f6 01       	movw	r30, r12
    178c:	97 fc       	sbrc	r9, 7
    178e:	85 91       	lpm	r24, Z+
    1790:	97 fe       	sbrs	r9, 7
    1792:	81 91       	ld	r24, Z+
    1794:	6f 01       	movw	r12, r30
    1796:	b7 01       	movw	r22, r14
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    179e:	51 10       	cpse	r5, r1
    17a0:	5a 94       	dec	r5
    17a2:	01 50       	subi	r16, 0x01	; 1
    17a4:	11 09       	sbc	r17, r1
    17a6:	01 15       	cp	r16, r1
    17a8:	11 05       	cpc	r17, r1
    17aa:	79 f7       	brne	.-34     	; 0x178a <vfprintf+0x478>
    17ac:	f7 c0       	rjmp	.+494    	; 0x199c <vfprintf+0x68a>
    17ae:	84 36       	cpi	r24, 0x64	; 100
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <vfprintf+0x4a4>
    17b2:	89 36       	cpi	r24, 0x69	; 105
    17b4:	61 f5       	brne	.+88     	; 0x180e <vfprintf+0x4fc>
    17b6:	56 01       	movw	r10, r12
    17b8:	97 fe       	sbrs	r9, 7
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <vfprintf+0x4bc>
    17bc:	24 e0       	ldi	r18, 0x04	; 4
    17be:	a2 0e       	add	r10, r18
    17c0:	b1 1c       	adc	r11, r1
    17c2:	f6 01       	movw	r30, r12
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0a c0       	rjmp	.+20     	; 0x17e2 <vfprintf+0x4d0>
    17ce:	f2 e0       	ldi	r31, 0x02	; 2
    17d0:	af 0e       	add	r10, r31
    17d2:	b1 1c       	adc	r11, r1
    17d4:	f6 01       	movw	r30, r12
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	07 2e       	mov	r0, r23
    17dc:	00 0c       	add	r0, r0
    17de:	88 0b       	sbc	r24, r24
    17e0:	99 0b       	sbc	r25, r25
    17e2:	f9 2d       	mov	r31, r9
    17e4:	ff 76       	andi	r31, 0x6F	; 111
    17e6:	9f 2e       	mov	r9, r31
    17e8:	97 ff       	sbrs	r25, 7
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <vfprintf+0x4ec>
    17ec:	90 95       	com	r25
    17ee:	80 95       	com	r24
    17f0:	70 95       	com	r23
    17f2:	61 95       	neg	r22
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	f0 68       	ori	r31, 0x80	; 128
    17fc:	9f 2e       	mov	r9, r31
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	a3 01       	movw	r20, r6
    1804:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__ultoa_invert>
    1808:	c8 2e       	mov	r12, r24
    180a:	c6 18       	sub	r12, r6
    180c:	3f c0       	rjmp	.+126    	; 0x188c <vfprintf+0x57a>
    180e:	09 2d       	mov	r16, r9
    1810:	85 37       	cpi	r24, 0x75	; 117
    1812:	21 f4       	brne	.+8      	; 0x181c <vfprintf+0x50a>
    1814:	0f 7e       	andi	r16, 0xEF	; 239
    1816:	2a e0       	ldi	r18, 0x0A	; 10
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	1d c0       	rjmp	.+58     	; 0x1856 <vfprintf+0x544>
    181c:	09 7f       	andi	r16, 0xF9	; 249
    181e:	8f 36       	cpi	r24, 0x6F	; 111
    1820:	91 f0       	breq	.+36     	; 0x1846 <vfprintf+0x534>
    1822:	18 f4       	brcc	.+6      	; 0x182a <vfprintf+0x518>
    1824:	88 35       	cpi	r24, 0x58	; 88
    1826:	59 f0       	breq	.+22     	; 0x183e <vfprintf+0x52c>
    1828:	c3 c0       	rjmp	.+390    	; 0x19b0 <vfprintf+0x69e>
    182a:	80 37       	cpi	r24, 0x70	; 112
    182c:	19 f0       	breq	.+6      	; 0x1834 <vfprintf+0x522>
    182e:	88 37       	cpi	r24, 0x78	; 120
    1830:	11 f0       	breq	.+4      	; 0x1836 <vfprintf+0x524>
    1832:	be c0       	rjmp	.+380    	; 0x19b0 <vfprintf+0x69e>
    1834:	00 61       	ori	r16, 0x10	; 16
    1836:	04 ff       	sbrs	r16, 4
    1838:	09 c0       	rjmp	.+18     	; 0x184c <vfprintf+0x53a>
    183a:	04 60       	ori	r16, 0x04	; 4
    183c:	07 c0       	rjmp	.+14     	; 0x184c <vfprintf+0x53a>
    183e:	94 fe       	sbrs	r9, 4
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <vfprintf+0x540>
    1842:	06 60       	ori	r16, 0x06	; 6
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0x540>
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <vfprintf+0x544>
    184c:	20 e1       	ldi	r18, 0x10	; 16
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <vfprintf+0x544>
    1852:	20 e1       	ldi	r18, 0x10	; 16
    1854:	32 e0       	ldi	r19, 0x02	; 2
    1856:	56 01       	movw	r10, r12
    1858:	07 ff       	sbrs	r16, 7
    185a:	09 c0       	rjmp	.+18     	; 0x186e <vfprintf+0x55c>
    185c:	84 e0       	ldi	r24, 0x04	; 4
    185e:	a8 0e       	add	r10, r24
    1860:	b1 1c       	adc	r11, r1
    1862:	f6 01       	movw	r30, r12
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	08 c0       	rjmp	.+16     	; 0x187e <vfprintf+0x56c>
    186e:	f2 e0       	ldi	r31, 0x02	; 2
    1870:	af 0e       	add	r10, r31
    1872:	b1 1c       	adc	r11, r1
    1874:	f6 01       	movw	r30, r12
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a3 01       	movw	r20, r6
    1880:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__ultoa_invert>
    1884:	c8 2e       	mov	r12, r24
    1886:	c6 18       	sub	r12, r6
    1888:	0f 77       	andi	r16, 0x7F	; 127
    188a:	90 2e       	mov	r9, r16
    188c:	96 fe       	sbrs	r9, 6
    188e:	0b c0       	rjmp	.+22     	; 0x18a6 <vfprintf+0x594>
    1890:	09 2d       	mov	r16, r9
    1892:	0e 7f       	andi	r16, 0xFE	; 254
    1894:	c1 16       	cp	r12, r17
    1896:	50 f4       	brcc	.+20     	; 0x18ac <vfprintf+0x59a>
    1898:	94 fe       	sbrs	r9, 4
    189a:	0a c0       	rjmp	.+20     	; 0x18b0 <vfprintf+0x59e>
    189c:	92 fc       	sbrc	r9, 2
    189e:	08 c0       	rjmp	.+16     	; 0x18b0 <vfprintf+0x59e>
    18a0:	09 2d       	mov	r16, r9
    18a2:	0e 7e       	andi	r16, 0xEE	; 238
    18a4:	05 c0       	rjmp	.+10     	; 0x18b0 <vfprintf+0x59e>
    18a6:	dc 2c       	mov	r13, r12
    18a8:	09 2d       	mov	r16, r9
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <vfprintf+0x5a0>
    18ac:	dc 2c       	mov	r13, r12
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <vfprintf+0x5a0>
    18b0:	d1 2e       	mov	r13, r17
    18b2:	04 ff       	sbrs	r16, 4
    18b4:	0d c0       	rjmp	.+26     	; 0x18d0 <vfprintf+0x5be>
    18b6:	fe 01       	movw	r30, r28
    18b8:	ec 0d       	add	r30, r12
    18ba:	f1 1d       	adc	r31, r1
    18bc:	80 81       	ld	r24, Z
    18be:	80 33       	cpi	r24, 0x30	; 48
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <vfprintf+0x5b4>
    18c2:	09 7e       	andi	r16, 0xE9	; 233
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <vfprintf+0x5c6>
    18c6:	02 ff       	sbrs	r16, 2
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <vfprintf+0x5c4>
    18ca:	d3 94       	inc	r13
    18cc:	d3 94       	inc	r13
    18ce:	04 c0       	rjmp	.+8      	; 0x18d8 <vfprintf+0x5c6>
    18d0:	80 2f       	mov	r24, r16
    18d2:	86 78       	andi	r24, 0x86	; 134
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <vfprintf+0x5c6>
    18d6:	d3 94       	inc	r13
    18d8:	03 fd       	sbrc	r16, 3
    18da:	11 c0       	rjmp	.+34     	; 0x18fe <vfprintf+0x5ec>
    18dc:	00 ff       	sbrs	r16, 0
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0x5da>
    18e0:	1c 2d       	mov	r17, r12
    18e2:	d5 14       	cp	r13, r5
    18e4:	80 f4       	brcc	.+32     	; 0x1906 <vfprintf+0x5f4>
    18e6:	15 0d       	add	r17, r5
    18e8:	1d 19       	sub	r17, r13
    18ea:	0d c0       	rjmp	.+26     	; 0x1906 <vfprintf+0x5f4>
    18ec:	d5 14       	cp	r13, r5
    18ee:	58 f4       	brcc	.+22     	; 0x1906 <vfprintf+0x5f4>
    18f0:	b7 01       	movw	r22, r14
    18f2:	80 e2       	ldi	r24, 0x20	; 32
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    18fa:	d3 94       	inc	r13
    18fc:	f7 cf       	rjmp	.-18     	; 0x18ec <vfprintf+0x5da>
    18fe:	d5 14       	cp	r13, r5
    1900:	10 f4       	brcc	.+4      	; 0x1906 <vfprintf+0x5f4>
    1902:	5d 18       	sub	r5, r13
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <vfprintf+0x5f6>
    1906:	51 2c       	mov	r5, r1
    1908:	04 ff       	sbrs	r16, 4
    190a:	10 c0       	rjmp	.+32     	; 0x192c <vfprintf+0x61a>
    190c:	b7 01       	movw	r22, r14
    190e:	80 e3       	ldi	r24, 0x30	; 48
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1916:	02 ff       	sbrs	r16, 2
    1918:	17 c0       	rjmp	.+46     	; 0x1948 <vfprintf+0x636>
    191a:	01 fd       	sbrc	r16, 1
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <vfprintf+0x612>
    191e:	88 e7       	ldi	r24, 0x78	; 120
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x616>
    1924:	88 e5       	ldi	r24, 0x58	; 88
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	b7 01       	movw	r22, r14
    192a:	0c c0       	rjmp	.+24     	; 0x1944 <vfprintf+0x632>
    192c:	80 2f       	mov	r24, r16
    192e:	86 78       	andi	r24, 0x86	; 134
    1930:	59 f0       	breq	.+22     	; 0x1948 <vfprintf+0x636>
    1932:	01 ff       	sbrs	r16, 1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <vfprintf+0x628>
    1936:	8b e2       	ldi	r24, 0x2B	; 43
    1938:	01 c0       	rjmp	.+2      	; 0x193c <vfprintf+0x62a>
    193a:	80 e2       	ldi	r24, 0x20	; 32
    193c:	07 fd       	sbrc	r16, 7
    193e:	8d e2       	ldi	r24, 0x2D	; 45
    1940:	b7 01       	movw	r22, r14
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1948:	c1 16       	cp	r12, r17
    194a:	38 f4       	brcc	.+14     	; 0x195a <vfprintf+0x648>
    194c:	b7 01       	movw	r22, r14
    194e:	80 e3       	ldi	r24, 0x30	; 48
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    1956:	11 50       	subi	r17, 0x01	; 1
    1958:	f7 cf       	rjmp	.-18     	; 0x1948 <vfprintf+0x636>
    195a:	ca 94       	dec	r12
    195c:	f3 01       	movw	r30, r6
    195e:	ec 0d       	add	r30, r12
    1960:	f1 1d       	adc	r31, r1
    1962:	80 81       	ld	r24, Z
    1964:	b7 01       	movw	r22, r14
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    196c:	c1 10       	cpse	r12, r1
    196e:	f5 cf       	rjmp	.-22     	; 0x195a <vfprintf+0x648>
    1970:	15 c0       	rjmp	.+42     	; 0x199c <vfprintf+0x68a>
    1972:	f4 e0       	ldi	r31, 0x04	; 4
    1974:	f5 15       	cp	r31, r5
    1976:	60 f5       	brcc	.+88     	; 0x19d0 <vfprintf+0x6be>
    1978:	84 e0       	ldi	r24, 0x04	; 4
    197a:	58 1a       	sub	r5, r24
    197c:	93 fe       	sbrs	r9, 3
    197e:	1f c0       	rjmp	.+62     	; 0x19be <vfprintf+0x6ac>
    1980:	01 11       	cpse	r16, r1
    1982:	27 c0       	rjmp	.+78     	; 0x19d2 <vfprintf+0x6c0>
    1984:	2c 85       	ldd	r18, Y+12	; 0x0c
    1986:	23 ff       	sbrs	r18, 3
    1988:	2a c0       	rjmp	.+84     	; 0x19de <vfprintf+0x6cc>
    198a:	04 e5       	ldi	r16, 0x54	; 84
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	39 2d       	mov	r19, r9
    1990:	30 71       	andi	r19, 0x10	; 16
    1992:	93 2e       	mov	r9, r19
    1994:	f8 01       	movw	r30, r16
    1996:	84 91       	lpm	r24, Z
    1998:	81 11       	cpse	r24, r1
    199a:	24 c0       	rjmp	.+72     	; 0x19e4 <vfprintf+0x6d2>
    199c:	55 20       	and	r5, r5
    199e:	09 f4       	brne	.+2      	; 0x19a2 <vfprintf+0x690>
    19a0:	e4 cc       	rjmp	.-1592   	; 0x136a <vfprintf+0x58>
    19a2:	b7 01       	movw	r22, r14
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    19ac:	5a 94       	dec	r5
    19ae:	f6 cf       	rjmp	.-20     	; 0x199c <vfprintf+0x68a>
    19b0:	f7 01       	movw	r30, r14
    19b2:	86 81       	ldd	r24, Z+6	; 0x06
    19b4:	97 81       	ldd	r25, Z+7	; 0x07
    19b6:	26 c0       	rjmp	.+76     	; 0x1a04 <vfprintf+0x6f2>
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	9f ef       	ldi	r25, 0xFF	; 255
    19bc:	23 c0       	rjmp	.+70     	; 0x1a04 <vfprintf+0x6f2>
    19be:	b7 01       	movw	r22, r14
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    19c8:	5a 94       	dec	r5
    19ca:	51 10       	cpse	r5, r1
    19cc:	f8 cf       	rjmp	.-16     	; 0x19be <vfprintf+0x6ac>
    19ce:	d8 cf       	rjmp	.-80     	; 0x1980 <vfprintf+0x66e>
    19d0:	51 2c       	mov	r5, r1
    19d2:	b7 01       	movw	r22, r14
    19d4:	80 2f       	mov	r24, r16
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    19dc:	d3 cf       	rjmp	.-90     	; 0x1984 <vfprintf+0x672>
    19de:	08 e5       	ldi	r16, 0x58	; 88
    19e0:	10 e0       	ldi	r17, 0x00	; 0
    19e2:	d5 cf       	rjmp	.-86     	; 0x198e <vfprintf+0x67c>
    19e4:	91 10       	cpse	r9, r1
    19e6:	80 52       	subi	r24, 0x20	; 32
    19e8:	b7 01       	movw	r22, r14
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <fputc>
    19f0:	0f 5f       	subi	r16, 0xFF	; 255
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	cf cf       	rjmp	.-98     	; 0x1994 <vfprintf+0x682>
    19f6:	23 e0       	ldi	r18, 0x03	; 3
    19f8:	25 15       	cp	r18, r5
    19fa:	10 f4       	brcc	.+4      	; 0x1a00 <vfprintf+0x6ee>
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	bd cf       	rjmp	.-134    	; 0x197a <vfprintf+0x668>
    1a00:	51 2c       	mov	r5, r1
    1a02:	c0 cf       	rjmp	.-128    	; 0x1984 <vfprintf+0x672>
    1a04:	60 96       	adiw	r28, 0x10	; 16
    1a06:	e2 e1       	ldi	r30, 0x12	; 18
    1a08:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__epilogue_restores__>

00001a0c <__prologue_saves__>:
    1a0c:	2f 92       	push	r2
    1a0e:	3f 92       	push	r3
    1a10:	4f 92       	push	r4
    1a12:	5f 92       	push	r5
    1a14:	6f 92       	push	r6
    1a16:	7f 92       	push	r7
    1a18:	8f 92       	push	r8
    1a1a:	9f 92       	push	r9
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	ca 1b       	sub	r28, r26
    1a36:	db 0b       	sbc	r29, r27
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	09 94       	ijmp

00001a44 <__epilogue_restores__>:
    1a44:	2a 88       	ldd	r2, Y+18	; 0x12
    1a46:	39 88       	ldd	r3, Y+17	; 0x11
    1a48:	48 88       	ldd	r4, Y+16	; 0x10
    1a4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a50:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a52:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a54:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a56:	b9 84       	ldd	r11, Y+9	; 0x09
    1a58:	c8 84       	ldd	r12, Y+8	; 0x08
    1a5a:	df 80       	ldd	r13, Y+7	; 0x07
    1a5c:	ee 80       	ldd	r14, Y+6	; 0x06
    1a5e:	fd 80       	ldd	r15, Y+5	; 0x05
    1a60:	0c 81       	ldd	r16, Y+4	; 0x04
    1a62:	1b 81       	ldd	r17, Y+3	; 0x03
    1a64:	aa 81       	ldd	r26, Y+2	; 0x02
    1a66:	b9 81       	ldd	r27, Y+1	; 0x01
    1a68:	ce 0f       	add	r28, r30
    1a6a:	d1 1d       	adc	r29, r1
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	ed 01       	movw	r28, r26
    1a78:	08 95       	ret

00001a7a <__ftoa_engine>:
    1a7a:	28 30       	cpi	r18, 0x08	; 8
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <__ftoa_engine+0x6>
    1a7e:	27 e0       	ldi	r18, 0x07	; 7
    1a80:	33 27       	eor	r19, r19
    1a82:	da 01       	movw	r26, r20
    1a84:	99 0f       	add	r25, r25
    1a86:	31 1d       	adc	r19, r1
    1a88:	87 fd       	sbrc	r24, 7
    1a8a:	91 60       	ori	r25, 0x01	; 1
    1a8c:	00 96       	adiw	r24, 0x00	; 0
    1a8e:	61 05       	cpc	r22, r1
    1a90:	71 05       	cpc	r23, r1
    1a92:	39 f4       	brne	.+14     	; 0x1aa2 <__ftoa_engine+0x28>
    1a94:	32 60       	ori	r19, 0x02	; 2
    1a96:	2e 5f       	subi	r18, 0xFE	; 254
    1a98:	3d 93       	st	X+, r19
    1a9a:	30 e3       	ldi	r19, 0x30	; 48
    1a9c:	2a 95       	dec	r18
    1a9e:	e1 f7       	brne	.-8      	; 0x1a98 <__ftoa_engine+0x1e>
    1aa0:	08 95       	ret
    1aa2:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa4:	30 f0       	brcs	.+12     	; 0x1ab2 <__ftoa_engine+0x38>
    1aa6:	80 38       	cpi	r24, 0x80	; 128
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	61 05       	cpc	r22, r1
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <__ftoa_engine+0x36>
    1aae:	3c 5f       	subi	r19, 0xFC	; 252
    1ab0:	3c 5f       	subi	r19, 0xFC	; 252
    1ab2:	3d 93       	st	X+, r19
    1ab4:	91 30       	cpi	r25, 0x01	; 1
    1ab6:	08 f0       	brcs	.+2      	; 0x1aba <__ftoa_engine+0x40>
    1ab8:	80 68       	ori	r24, 0x80	; 128
    1aba:	91 1d       	adc	r25, r1
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	1f 93       	push	r17
    1ac2:	0f 93       	push	r16
    1ac4:	ff 92       	push	r15
    1ac6:	ef 92       	push	r14
    1ac8:	19 2f       	mov	r17, r25
    1aca:	98 7f       	andi	r25, 0xF8	; 248
    1acc:	96 95       	lsr	r25
    1ace:	e9 2f       	mov	r30, r25
    1ad0:	96 95       	lsr	r25
    1ad2:	96 95       	lsr	r25
    1ad4:	e9 0f       	add	r30, r25
    1ad6:	ff 27       	eor	r31, r31
    1ad8:	ea 54       	subi	r30, 0x4A	; 74
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	99 27       	eor	r25, r25
    1ade:	33 27       	eor	r19, r19
    1ae0:	ee 24       	eor	r14, r14
    1ae2:	ff 24       	eor	r15, r15
    1ae4:	a7 01       	movw	r20, r14
    1ae6:	e7 01       	movw	r28, r14
    1ae8:	05 90       	lpm	r0, Z+
    1aea:	08 94       	sec
    1aec:	07 94       	ror	r0
    1aee:	28 f4       	brcc	.+10     	; 0x1afa <__ftoa_engine+0x80>
    1af0:	36 0f       	add	r19, r22
    1af2:	e7 1e       	adc	r14, r23
    1af4:	f8 1e       	adc	r15, r24
    1af6:	49 1f       	adc	r20, r25
    1af8:	51 1d       	adc	r21, r1
    1afa:	66 0f       	add	r22, r22
    1afc:	77 1f       	adc	r23, r23
    1afe:	88 1f       	adc	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	06 94       	lsr	r0
    1b04:	a1 f7       	brne	.-24     	; 0x1aee <__ftoa_engine+0x74>
    1b06:	05 90       	lpm	r0, Z+
    1b08:	07 94       	ror	r0
    1b0a:	28 f4       	brcc	.+10     	; 0x1b16 <__ftoa_engine+0x9c>
    1b0c:	e7 0e       	add	r14, r23
    1b0e:	f8 1e       	adc	r15, r24
    1b10:	49 1f       	adc	r20, r25
    1b12:	56 1f       	adc	r21, r22
    1b14:	c1 1d       	adc	r28, r1
    1b16:	77 0f       	add	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	66 1f       	adc	r22, r22
    1b1e:	06 94       	lsr	r0
    1b20:	a1 f7       	brne	.-24     	; 0x1b0a <__ftoa_engine+0x90>
    1b22:	05 90       	lpm	r0, Z+
    1b24:	07 94       	ror	r0
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__ftoa_engine+0xb8>
    1b28:	f8 0e       	add	r15, r24
    1b2a:	49 1f       	adc	r20, r25
    1b2c:	56 1f       	adc	r21, r22
    1b2e:	c7 1f       	adc	r28, r23
    1b30:	d1 1d       	adc	r29, r1
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	66 1f       	adc	r22, r22
    1b38:	77 1f       	adc	r23, r23
    1b3a:	06 94       	lsr	r0
    1b3c:	a1 f7       	brne	.-24     	; 0x1b26 <__ftoa_engine+0xac>
    1b3e:	05 90       	lpm	r0, Z+
    1b40:	07 94       	ror	r0
    1b42:	20 f4       	brcc	.+8      	; 0x1b4c <__ftoa_engine+0xd2>
    1b44:	49 0f       	add	r20, r25
    1b46:	56 1f       	adc	r21, r22
    1b48:	c7 1f       	adc	r28, r23
    1b4a:	d8 1f       	adc	r29, r24
    1b4c:	99 0f       	add	r25, r25
    1b4e:	66 1f       	adc	r22, r22
    1b50:	77 1f       	adc	r23, r23
    1b52:	88 1f       	adc	r24, r24
    1b54:	06 94       	lsr	r0
    1b56:	a9 f7       	brne	.-22     	; 0x1b42 <__ftoa_engine+0xc8>
    1b58:	84 91       	lpm	r24, Z
    1b5a:	10 95       	com	r17
    1b5c:	17 70       	andi	r17, 0x07	; 7
    1b5e:	41 f0       	breq	.+16     	; 0x1b70 <__ftoa_engine+0xf6>
    1b60:	d6 95       	lsr	r29
    1b62:	c7 95       	ror	r28
    1b64:	57 95       	ror	r21
    1b66:	47 95       	ror	r20
    1b68:	f7 94       	ror	r15
    1b6a:	e7 94       	ror	r14
    1b6c:	1a 95       	dec	r17
    1b6e:	c1 f7       	brne	.-16     	; 0x1b60 <__ftoa_engine+0xe6>
    1b70:	ec e5       	ldi	r30, 0x5C	; 92
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	68 94       	set
    1b76:	15 90       	lpm	r1, Z+
    1b78:	15 91       	lpm	r17, Z+
    1b7a:	35 91       	lpm	r19, Z+
    1b7c:	65 91       	lpm	r22, Z+
    1b7e:	95 91       	lpm	r25, Z+
    1b80:	05 90       	lpm	r0, Z+
    1b82:	7f e2       	ldi	r23, 0x2F	; 47
    1b84:	73 95       	inc	r23
    1b86:	e1 18       	sub	r14, r1
    1b88:	f1 0a       	sbc	r15, r17
    1b8a:	43 0b       	sbc	r20, r19
    1b8c:	56 0b       	sbc	r21, r22
    1b8e:	c9 0b       	sbc	r28, r25
    1b90:	d0 09       	sbc	r29, r0
    1b92:	c0 f7       	brcc	.-16     	; 0x1b84 <__ftoa_engine+0x10a>
    1b94:	e1 0c       	add	r14, r1
    1b96:	f1 1e       	adc	r15, r17
    1b98:	43 1f       	adc	r20, r19
    1b9a:	56 1f       	adc	r21, r22
    1b9c:	c9 1f       	adc	r28, r25
    1b9e:	d0 1d       	adc	r29, r0
    1ba0:	7e f4       	brtc	.+30     	; 0x1bc0 <__ftoa_engine+0x146>
    1ba2:	70 33       	cpi	r23, 0x30	; 48
    1ba4:	11 f4       	brne	.+4      	; 0x1baa <__ftoa_engine+0x130>
    1ba6:	8a 95       	dec	r24
    1ba8:	e6 cf       	rjmp	.-52     	; 0x1b76 <__ftoa_engine+0xfc>
    1baa:	e8 94       	clt
    1bac:	01 50       	subi	r16, 0x01	; 1
    1bae:	30 f0       	brcs	.+12     	; 0x1bbc <__ftoa_engine+0x142>
    1bb0:	08 0f       	add	r16, r24
    1bb2:	0a f4       	brpl	.+2      	; 0x1bb6 <__ftoa_engine+0x13c>
    1bb4:	00 27       	eor	r16, r16
    1bb6:	02 17       	cp	r16, r18
    1bb8:	08 f4       	brcc	.+2      	; 0x1bbc <__ftoa_engine+0x142>
    1bba:	20 2f       	mov	r18, r16
    1bbc:	23 95       	inc	r18
    1bbe:	02 2f       	mov	r16, r18
    1bc0:	7a 33       	cpi	r23, 0x3A	; 58
    1bc2:	28 f0       	brcs	.+10     	; 0x1bce <__ftoa_engine+0x154>
    1bc4:	79 e3       	ldi	r23, 0x39	; 57
    1bc6:	7d 93       	st	X+, r23
    1bc8:	2a 95       	dec	r18
    1bca:	e9 f7       	brne	.-6      	; 0x1bc6 <__ftoa_engine+0x14c>
    1bcc:	10 c0       	rjmp	.+32     	; 0x1bee <__ftoa_engine+0x174>
    1bce:	7d 93       	st	X+, r23
    1bd0:	2a 95       	dec	r18
    1bd2:	89 f6       	brne	.-94     	; 0x1b76 <__ftoa_engine+0xfc>
    1bd4:	06 94       	lsr	r0
    1bd6:	97 95       	ror	r25
    1bd8:	67 95       	ror	r22
    1bda:	37 95       	ror	r19
    1bdc:	17 95       	ror	r17
    1bde:	17 94       	ror	r1
    1be0:	e1 18       	sub	r14, r1
    1be2:	f1 0a       	sbc	r15, r17
    1be4:	43 0b       	sbc	r20, r19
    1be6:	56 0b       	sbc	r21, r22
    1be8:	c9 0b       	sbc	r28, r25
    1bea:	d0 09       	sbc	r29, r0
    1bec:	98 f0       	brcs	.+38     	; 0x1c14 <__ftoa_engine+0x19a>
    1bee:	23 95       	inc	r18
    1bf0:	7e 91       	ld	r23, -X
    1bf2:	73 95       	inc	r23
    1bf4:	7a 33       	cpi	r23, 0x3A	; 58
    1bf6:	08 f0       	brcs	.+2      	; 0x1bfa <__ftoa_engine+0x180>
    1bf8:	70 e3       	ldi	r23, 0x30	; 48
    1bfa:	7c 93       	st	X, r23
    1bfc:	20 13       	cpse	r18, r16
    1bfe:	b8 f7       	brcc	.-18     	; 0x1bee <__ftoa_engine+0x174>
    1c00:	7e 91       	ld	r23, -X
    1c02:	70 61       	ori	r23, 0x10	; 16
    1c04:	7d 93       	st	X+, r23
    1c06:	30 f0       	brcs	.+12     	; 0x1c14 <__ftoa_engine+0x19a>
    1c08:	83 95       	inc	r24
    1c0a:	71 e3       	ldi	r23, 0x31	; 49
    1c0c:	7d 93       	st	X+, r23
    1c0e:	70 e3       	ldi	r23, 0x30	; 48
    1c10:	2a 95       	dec	r18
    1c12:	e1 f7       	brne	.-8      	; 0x1c0c <__ftoa_engine+0x192>
    1c14:	11 24       	eor	r1, r1
    1c16:	ef 90       	pop	r14
    1c18:	ff 90       	pop	r15
    1c1a:	0f 91       	pop	r16
    1c1c:	1f 91       	pop	r17
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	99 27       	eor	r25, r25
    1c24:	87 fd       	sbrc	r24, 7
    1c26:	90 95       	com	r25
    1c28:	08 95       	ret

00001c2a <strnlen_P>:
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	05 90       	lpm	r0, Z+
    1c2e:	61 50       	subi	r22, 0x01	; 1
    1c30:	70 40       	sbci	r23, 0x00	; 0
    1c32:	01 10       	cpse	r0, r1
    1c34:	d8 f7       	brcc	.-10     	; 0x1c2c <strnlen_P+0x2>
    1c36:	80 95       	com	r24
    1c38:	90 95       	com	r25
    1c3a:	8e 0f       	add	r24, r30
    1c3c:	9f 1f       	adc	r25, r31
    1c3e:	08 95       	ret

00001c40 <strnlen>:
    1c40:	fc 01       	movw	r30, r24
    1c42:	61 50       	subi	r22, 0x01	; 1
    1c44:	70 40       	sbci	r23, 0x00	; 0
    1c46:	01 90       	ld	r0, Z+
    1c48:	01 10       	cpse	r0, r1
    1c4a:	d8 f7       	brcc	.-10     	; 0x1c42 <strnlen+0x2>
    1c4c:	80 95       	com	r24
    1c4e:	90 95       	com	r25
    1c50:	8e 0f       	add	r24, r30
    1c52:	9f 1f       	adc	r25, r31
    1c54:	08 95       	ret

00001c56 <fputc>:
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	fb 01       	movw	r30, r22
    1c60:	23 81       	ldd	r18, Z+3	; 0x03
    1c62:	21 fd       	sbrc	r18, 1
    1c64:	03 c0       	rjmp	.+6      	; 0x1c6c <fputc+0x16>
    1c66:	8f ef       	ldi	r24, 0xFF	; 255
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	2c c0       	rjmp	.+88     	; 0x1cc4 <fputc+0x6e>
    1c6c:	22 ff       	sbrs	r18, 2
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <fputc+0x46>
    1c70:	46 81       	ldd	r20, Z+6	; 0x06
    1c72:	57 81       	ldd	r21, Z+7	; 0x07
    1c74:	24 81       	ldd	r18, Z+4	; 0x04
    1c76:	35 81       	ldd	r19, Z+5	; 0x05
    1c78:	42 17       	cp	r20, r18
    1c7a:	53 07       	cpc	r21, r19
    1c7c:	44 f4       	brge	.+16     	; 0x1c8e <fputc+0x38>
    1c7e:	a0 81       	ld	r26, Z
    1c80:	b1 81       	ldd	r27, Z+1	; 0x01
    1c82:	9d 01       	movw	r18, r26
    1c84:	2f 5f       	subi	r18, 0xFF	; 255
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	31 83       	std	Z+1, r19	; 0x01
    1c8a:	20 83       	st	Z, r18
    1c8c:	8c 93       	st	X, r24
    1c8e:	26 81       	ldd	r18, Z+6	; 0x06
    1c90:	37 81       	ldd	r19, Z+7	; 0x07
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	37 83       	std	Z+7, r19	; 0x07
    1c98:	26 83       	std	Z+6, r18	; 0x06
    1c9a:	14 c0       	rjmp	.+40     	; 0x1cc4 <fputc+0x6e>
    1c9c:	8b 01       	movw	r16, r22
    1c9e:	ec 01       	movw	r28, r24
    1ca0:	fb 01       	movw	r30, r22
    1ca2:	00 84       	ldd	r0, Z+8	; 0x08
    1ca4:	f1 85       	ldd	r31, Z+9	; 0x09
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	09 95       	icall
    1caa:	89 2b       	or	r24, r25
    1cac:	e1 f6       	brne	.-72     	; 0x1c66 <fputc+0x10>
    1cae:	d8 01       	movw	r26, r16
    1cb0:	16 96       	adiw	r26, 0x06	; 6
    1cb2:	8d 91       	ld	r24, X+
    1cb4:	9c 91       	ld	r25, X
    1cb6:	17 97       	sbiw	r26, 0x07	; 7
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	17 96       	adiw	r26, 0x07	; 7
    1cbc:	9c 93       	st	X, r25
    1cbe:	8e 93       	st	-X, r24
    1cc0:	16 97       	sbiw	r26, 0x06	; 6
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	08 95       	ret

00001cce <snprintf>:
    1cce:	ae e0       	ldi	r26, 0x0E	; 14
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ed e6       	ldi	r30, 0x6D	; 109
    1cd4:	fe e0       	ldi	r31, 0x0E	; 14
    1cd6:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__prologue_saves__+0x1c>
    1cda:	0d 89       	ldd	r16, Y+21	; 0x15
    1cdc:	1e 89       	ldd	r17, Y+22	; 0x16
    1cde:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce2:	26 e0       	ldi	r18, 0x06	; 6
    1ce4:	2c 83       	std	Y+4, r18	; 0x04
    1ce6:	1a 83       	std	Y+2, r17	; 0x02
    1ce8:	09 83       	std	Y+1, r16	; 0x01
    1cea:	97 ff       	sbrs	r25, 7
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <snprintf+0x24>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e8       	ldi	r25, 0x80	; 128
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	ae 01       	movw	r20, r28
    1cfa:	45 5e       	subi	r20, 0xE5	; 229
    1cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cfe:	69 8d       	ldd	r22, Y+25	; 0x19
    1d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d02:	ce 01       	movw	r24, r28
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	0e 94 89 09 	call	0x1312	; 0x1312 <vfprintf>
    1d0a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d0c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d0e:	57 fd       	sbrc	r21, 7
    1d10:	0a c0       	rjmp	.+20     	; 0x1d26 <snprintf+0x58>
    1d12:	2f 81       	ldd	r18, Y+7	; 0x07
    1d14:	38 85       	ldd	r19, Y+8	; 0x08
    1d16:	42 17       	cp	r20, r18
    1d18:	53 07       	cpc	r21, r19
    1d1a:	0c f4       	brge	.+2      	; 0x1d1e <snprintf+0x50>
    1d1c:	9a 01       	movw	r18, r20
    1d1e:	f8 01       	movw	r30, r16
    1d20:	e2 0f       	add	r30, r18
    1d22:	f3 1f       	adc	r31, r19
    1d24:	10 82       	st	Z, r1
    1d26:	2e 96       	adiw	r28, 0x0e	; 14
    1d28:	e4 e0       	ldi	r30, 0x04	; 4
    1d2a:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__epilogue_restores__+0x1c>

00001d2e <sprintf>:
    1d2e:	ae e0       	ldi	r26, 0x0E	; 14
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ed e9       	ldi	r30, 0x9D	; 157
    1d34:	fe e0       	ldi	r31, 0x0E	; 14
    1d36:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__prologue_saves__+0x1c>
    1d3a:	0d 89       	ldd	r16, Y+21	; 0x15
    1d3c:	1e 89       	ldd	r17, Y+22	; 0x16
    1d3e:	86 e0       	ldi	r24, 0x06	; 6
    1d40:	8c 83       	std	Y+4, r24	; 0x04
    1d42:	1a 83       	std	Y+2, r17	; 0x02
    1d44:	09 83       	std	Y+1, r16	; 0x01
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	9f e7       	ldi	r25, 0x7F	; 127
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	ae 01       	movw	r20, r28
    1d50:	47 5e       	subi	r20, 0xE7	; 231
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	6f 89       	ldd	r22, Y+23	; 0x17
    1d56:	78 8d       	ldd	r23, Y+24	; 0x18
    1d58:	ce 01       	movw	r24, r28
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	0e 94 89 09 	call	0x1312	; 0x1312 <vfprintf>
    1d60:	ef 81       	ldd	r30, Y+7	; 0x07
    1d62:	f8 85       	ldd	r31, Y+8	; 0x08
    1d64:	e0 0f       	add	r30, r16
    1d66:	f1 1f       	adc	r31, r17
    1d68:	10 82       	st	Z, r1
    1d6a:	2e 96       	adiw	r28, 0x0e	; 14
    1d6c:	e4 e0       	ldi	r30, 0x04	; 4
    1d6e:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__epilogue_restores__+0x1c>

00001d72 <__ultoa_invert>:
    1d72:	fa 01       	movw	r30, r20
    1d74:	aa 27       	eor	r26, r26
    1d76:	28 30       	cpi	r18, 0x08	; 8
    1d78:	51 f1       	breq	.+84     	; 0x1dce <__ultoa_invert+0x5c>
    1d7a:	20 31       	cpi	r18, 0x10	; 16
    1d7c:	81 f1       	breq	.+96     	; 0x1dde <__ultoa_invert+0x6c>
    1d7e:	e8 94       	clt
    1d80:	6f 93       	push	r22
    1d82:	6e 7f       	andi	r22, 0xFE	; 254
    1d84:	6e 5f       	subi	r22, 0xFE	; 254
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	8f 4f       	sbci	r24, 0xFF	; 255
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	af 4f       	sbci	r26, 0xFF	; 255
    1d8e:	b1 e0       	ldi	r27, 0x01	; 1
    1d90:	3e d0       	rcall	.+124    	; 0x1e0e <__ultoa_invert+0x9c>
    1d92:	b4 e0       	ldi	r27, 0x04	; 4
    1d94:	3c d0       	rcall	.+120    	; 0x1e0e <__ultoa_invert+0x9c>
    1d96:	67 0f       	add	r22, r23
    1d98:	78 1f       	adc	r23, r24
    1d9a:	89 1f       	adc	r24, r25
    1d9c:	9a 1f       	adc	r25, r26
    1d9e:	a1 1d       	adc	r26, r1
    1da0:	68 0f       	add	r22, r24
    1da2:	79 1f       	adc	r23, r25
    1da4:	8a 1f       	adc	r24, r26
    1da6:	91 1d       	adc	r25, r1
    1da8:	a1 1d       	adc	r26, r1
    1daa:	6a 0f       	add	r22, r26
    1dac:	71 1d       	adc	r23, r1
    1dae:	81 1d       	adc	r24, r1
    1db0:	91 1d       	adc	r25, r1
    1db2:	a1 1d       	adc	r26, r1
    1db4:	20 d0       	rcall	.+64     	; 0x1df6 <__ultoa_invert+0x84>
    1db6:	09 f4       	brne	.+2      	; 0x1dba <__ultoa_invert+0x48>
    1db8:	68 94       	set
    1dba:	3f 91       	pop	r19
    1dbc:	2a e0       	ldi	r18, 0x0A	; 10
    1dbe:	26 9f       	mul	r18, r22
    1dc0:	11 24       	eor	r1, r1
    1dc2:	30 19       	sub	r19, r0
    1dc4:	30 5d       	subi	r19, 0xD0	; 208
    1dc6:	31 93       	st	Z+, r19
    1dc8:	de f6       	brtc	.-74     	; 0x1d80 <__ultoa_invert+0xe>
    1dca:	cf 01       	movw	r24, r30
    1dcc:	08 95       	ret
    1dce:	46 2f       	mov	r20, r22
    1dd0:	47 70       	andi	r20, 0x07	; 7
    1dd2:	40 5d       	subi	r20, 0xD0	; 208
    1dd4:	41 93       	st	Z+, r20
    1dd6:	b3 e0       	ldi	r27, 0x03	; 3
    1dd8:	0f d0       	rcall	.+30     	; 0x1df8 <__ultoa_invert+0x86>
    1dda:	c9 f7       	brne	.-14     	; 0x1dce <__ultoa_invert+0x5c>
    1ddc:	f6 cf       	rjmp	.-20     	; 0x1dca <__ultoa_invert+0x58>
    1dde:	46 2f       	mov	r20, r22
    1de0:	4f 70       	andi	r20, 0x0F	; 15
    1de2:	40 5d       	subi	r20, 0xD0	; 208
    1de4:	4a 33       	cpi	r20, 0x3A	; 58
    1de6:	18 f0       	brcs	.+6      	; 0x1dee <__ultoa_invert+0x7c>
    1de8:	49 5d       	subi	r20, 0xD9	; 217
    1dea:	31 fd       	sbrc	r19, 1
    1dec:	40 52       	subi	r20, 0x20	; 32
    1dee:	41 93       	st	Z+, r20
    1df0:	02 d0       	rcall	.+4      	; 0x1df6 <__ultoa_invert+0x84>
    1df2:	a9 f7       	brne	.-22     	; 0x1dde <__ultoa_invert+0x6c>
    1df4:	ea cf       	rjmp	.-44     	; 0x1dca <__ultoa_invert+0x58>
    1df6:	b4 e0       	ldi	r27, 0x04	; 4
    1df8:	a6 95       	lsr	r26
    1dfa:	97 95       	ror	r25
    1dfc:	87 95       	ror	r24
    1dfe:	77 95       	ror	r23
    1e00:	67 95       	ror	r22
    1e02:	ba 95       	dec	r27
    1e04:	c9 f7       	brne	.-14     	; 0x1df8 <__ultoa_invert+0x86>
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	61 05       	cpc	r22, r1
    1e0a:	71 05       	cpc	r23, r1
    1e0c:	08 95       	ret
    1e0e:	9b 01       	movw	r18, r22
    1e10:	ac 01       	movw	r20, r24
    1e12:	0a 2e       	mov	r0, r26
    1e14:	06 94       	lsr	r0
    1e16:	57 95       	ror	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	ba 95       	dec	r27
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <__ultoa_invert+0xa2>
    1e22:	62 0f       	add	r22, r18
    1e24:	73 1f       	adc	r23, r19
    1e26:	84 1f       	adc	r24, r20
    1e28:	95 1f       	adc	r25, r21
    1e2a:	a0 1d       	adc	r26, r0
    1e2c:	08 95       	ret

00001e2e <_exit>:
    1e2e:	f8 94       	cli

00001e30 <__stop_program>:
    1e30:	ff cf       	rjmp	.-2      	; 0x1e30 <__stop_program>
