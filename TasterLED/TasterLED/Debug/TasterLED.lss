
TasterLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000514  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001db  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d4  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	19 c0       	rjmp	.+50     	; 0x68 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

int main(void)
{
	//Pin zur ansteuerung der roten LED an AMpel A als ausgang konfigurieren
	
	DDRD |=(1<<PIND5);
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	80 62       	ori	r24, 0x20	; 32
  3c:	81 bb       	out	0x11, r24	; 17
	DDRC |=(1<<5);
  3e:	84 b3       	in	r24, 0x14	; 20
  40:	80 62       	ori	r24, 0x20	; 32
  42:	84 bb       	out	0x14, r24	; 20
		//Wird der Joysticktaster gedrückt, so wird der Pegel an PIN2 auf low gezogen
		
		 
		
		//Pegel an Pin2 abfragen
		if((PIND & 1<<PD2) && (PIND & 1<<PD3)){
  44:	82 9b       	sbis	0x10, 2	; 16
  46:	09 c0       	rjmp	.+18     	; 0x5a <__SREG__+0x1b>
  48:	83 9b       	sbis	0x10, 3	; 16
  4a:	07 c0       	rjmp	.+14     	; 0x5a <__SREG__+0x1b>
			PORTD &= ~(1<<PD5);
  4c:	82 b3       	in	r24, 0x12	; 18
  4e:	8f 7d       	andi	r24, 0xDF	; 223
  50:	82 bb       	out	0x12, r24	; 18
			PORTC &= ~(1<<5);
  52:	85 b3       	in	r24, 0x15	; 21
  54:	8f 7d       	andi	r24, 0xDF	; 223
  56:	85 bb       	out	0x15, r24	; 21
  58:	f5 cf       	rjmp	.-22     	; 0x44 <__SREG__+0x5>
		}
		else{
			PORTD |= (1<<PD5);
  5a:	82 b3       	in	r24, 0x12	; 18
  5c:	80 62       	ori	r24, 0x20	; 32
  5e:	82 bb       	out	0x12, r24	; 18
			PORTC |= (1<<5);
  60:	85 b3       	in	r24, 0x15	; 21
  62:	80 62       	ori	r24, 0x20	; 32
  64:	85 bb       	out	0x15, r24	; 21
  66:	ee cf       	rjmp	.-36     	; 0x44 <__SREG__+0x5>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>
