
Blinki_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000597  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000513  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000238  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031d  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	18 c0       	rjmp	.+48     	; 0x66 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
int main(void)
{
	
	// Pin zur ansteuerung der roten LED an Ampel A als AUsgang konfigurieren
	
	DDRD |= (1<<PIND5);
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	80 62       	ori	r24, 0x20	; 32
  3c:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<PINC5);
  3e:	81 b3       	in	r24, 0x11	; 17
  40:	80 62       	ori	r24, 0x20	; 32
  42:	81 bb       	out	0x11, r24	; 17
	 
    while (1) 
    {
		//Pegel des Pins für die rote LED an Ampel A toggeln
		PORTD ^= (1<<PIND5);
  44:	92 b3       	in	r25, 0x12	; 18
  46:	80 e2       	ldi	r24, 0x20	; 32
  48:	98 27       	eor	r25, r24
  4a:	92 bb       	out	0x12, r25	; 18
		PORTC ^= (1<<PINC5);
  4c:	95 b3       	in	r25, 0x15	; 21
  4e:	89 27       	eor	r24, r25
  50:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  52:	2f ef       	ldi	r18, 0xFF	; 255
  54:	89 e6       	ldi	r24, 0x69	; 105
  56:	98 e1       	ldi	r25, 0x18	; 24
  58:	21 50       	subi	r18, 0x01	; 1
  5a:	80 40       	sbci	r24, 0x00	; 0
  5c:	90 40       	sbci	r25, 0x00	; 0
  5e:	e1 f7       	brne	.-8      	; 0x58 <__SREG__+0x19>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
  64:	ef cf       	rjmp	.-34     	; 0x44 <__SREG__+0x5>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
