
timer_blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000063e  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000554  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000350  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000178  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	5b c0       	rjmp	.+182    	; 0xba <__vector_1>
   4:	7c c0       	rjmp	.+248    	; 0xfe <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	42 c0       	rjmp	.+132    	; 0x98 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	7e c0       	rjmp	.+252    	; 0x142 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:

int main(void)
{
    
    //Anfangswerte der variable setzen
    count = 0;
  48:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    speed = 8;
  4c:	88 e0       	ldi	r24, 0x08	; 8
  4e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <speed>

    // Pin der roten und gelben LED an Ampel A als Ausgang konfigurieren
    DDRD |= (1 << PD5)| (1<<PD6); // PD5 als Ausgang konfigurieren
  52:	81 b3       	in	r24, 0x11	; 17
  54:	80 66       	ori	r24, 0x60	; 96
  56:	81 bb       	out	0x11, r24	; 17


     // externen Interrupt INTO auf steigende flanke konfigurieren
    MCUCR |= (1<<ISC00) | (1<<ISC01);
  58:	85 b7       	in	r24, 0x35	; 53
  5a:	83 60       	ori	r24, 0x03	; 3
  5c:	85 bf       	out	0x35, r24	; 53
	
    // externen Interrupt lokal aktivieren
    GICR |= (1<<INT0) | (1<<INT1);
  5e:	8b b7       	in	r24, 0x3b	; 59
  60:	80 6c       	ori	r24, 0xC0	; 192
  62:	8b bf       	out	0x3b, r24	; 59
    

    // Timer 0 konfigurieren (prescaler 1024)
    TCCR0 = (1 << CS02) | (1 << CS00); // Prescaler 1024
  64:	85 e0       	ldi	r24, 0x05	; 5
  66:	83 bf       	out	0x33, r24	; 51

    // lokal aktivieren des timer 0 overflow interrupts
    TIMSK |= (1 << TOIE0);
  68:	89 b7       	in	r24, 0x39	; 57
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	89 bf       	out	0x39, r24	; 57

    // globale Interrupts aktivieren
    sei();
  6e:	78 94       	sei

    //rote LED an Ampel A einschalten
    PORTD |= (1 << PD5);
  70:	82 b3       	in	r24, 0x12	; 18
  72:	80 62       	ori	r24, 0x20	; 32
  74:	82 bb       	out	0x12, r24	; 18

    while (1) 
    {
        //warten bis der timer 0 overflow interrupt aufgerufen wird
        if(count>=speed){
  76:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  7a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <speed>
  7e:	98 17       	cp	r25, r24
  80:	d0 f3       	brcs	.-12     	; 0x76 <main+0x2e>
            //nach count overflow toggeln beider LEDs
            PORTD ^= (1 << PIND5);
  82:	92 b3       	in	r25, 0x12	; 18
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	89 27       	eor	r24, r25
  88:	82 bb       	out	0x12, r24	; 18
            PORTD ^= (1 << PIND6);
  8a:	92 b3       	in	r25, 0x12	; 18
  8c:	80 e4       	ldi	r24, 0x40	; 64
  8e:	89 27       	eor	r24, r25
  90:	82 bb       	out	0x12, r24	; 18
            count = 0;
  92:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	ef cf       	rjmp	.-34     	; 0x76 <main+0x2e>

00000098 <__vector_9>:
    }
}


//timer 0 overflow interrupt service routine
ISR(TIMER0_OVF_vect){
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
    //count erhöhen
    count++;
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_1>:

//interrupt service routine für joystick
ISR(INT0_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
    // togglen der roten LED an Ampel A
    if (speed < 64){
  ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <speed>
  ce:	80 34       	cpi	r24, 0x40	; 64
  d0:	28 f4       	brcc	.+10     	; 0xdc <__vector_1+0x22>
        speed <<= 1;
  d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <speed>
  d6:	88 0f       	add	r24, r24
  d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	89 e6       	ldi	r24, 0x69	; 105
  e0:	98 e1       	ldi	r25, 0x18	; 24
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <__vector_1+0x28>
  ea:	00 c0       	rjmp	.+0      	; 0xec <__vector_1+0x32>
  ec:	00 00       	nop
    }

    //taster entprellen mit 500ms warten
    _delay_ms(500);
}
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:

// interrupt service routine für taster 2
ISR(INT1_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
    // togglen der roten LED an Ampel A
    if (speed > 1){
 10e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <speed>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	28 f0       	brcs	.+10     	; 0x120 <__vector_2+0x22>
        speed >>= 1;
 116:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <speed>
 11a:	86 95       	lsr	r24
 11c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <speed>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 e6       	ldi	r24, 0x69	; 105
 124:	98 e1       	ldi	r25, 0x18	; 24
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <__vector_2+0x28>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <__vector_2+0x32>
 130:	00 00       	nop
    }

    //taster entprellen mit 500ms warten
    _delay_ms(500);
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
