
ADC_ampel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000268  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000203  0080006c  0080006c  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000890  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065b  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000560  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fe  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	03 c1       	rjmp	.+518    	; 0x21e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	de c0       	rjmp	.+444    	; 0x1d8 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e6       	ldi	r30, 0x68	; 104
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 36       	cpi	r26, 0x6F	; 111
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	04 c1       	rjmp	.+520    	; 0x264 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
{
    //variable für 8 bit ADC Wert
    uint8_t adc_result;

    // Pin der roten Ampel A als Ausgang konfigurieren
    DDRD |= (1 << PD5); // PD5 als Ausgang konfigurieren
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	80 62       	ori	r24, 0x20	; 32
  62:	81 bb       	out	0x11, r24	; 17
    DDRD |= (1 << PD6); // PD6 als Ausgang konfigurieren
  64:	81 b3       	in	r24, 0x11	; 17
  66:	80 64       	ori	r24, 0x40	; 64
  68:	81 bb       	out	0x11, r24	; 17
    DDRD |= (1 << PD7); // PD7 als Ausgang konfigurieren
  6a:	81 b3       	in	r24, 0x11	; 17
  6c:	80 68       	ori	r24, 0x80	; 128
  6e:	81 bb       	out	0x11, r24	; 17


    // ADC initialisieren
    // ADC Prescaler auf 128 setzen
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  70:	86 b1       	in	r24, 0x06	; 6
  72:	87 60       	ori	r24, 0x07	; 7
  74:	86 b9       	out	0x06, r24	; 6
    // ADC aktivieren
    ADCSRA |= (1 << ADEN);
  76:	86 b1       	in	r24, 0x06	; 6
  78:	80 68       	ori	r24, 0x80	; 128
  7a:	86 b9       	out	0x06, r24	; 6
    // Referenzspannung auf AVCC setzen
    ADMUX |= (1 << REFS0) | (1 << ADLAR);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 66       	ori	r24, 0x60	; 96
  80:	87 b9       	out	0x07, r24	; 7
	
	//Auswahl von Kanal 7 (Fotodiode
	//ADMUX |= (1<<MUX0)|(1<<MUX1)|(1<<MUX2);
    ADMUX |= (1<<MUX2)|(1<<MUX1);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	86 60       	ori	r24, 0x06	; 6
  86:	87 b9       	out	0x07, r24	; 7
	
	//init uart
    uart_init();
  88:	5c d0       	rcall	.+184    	; 0x142 <uart_init>

    // globale Interrupts aktivieren
    sei();
  8a:	78 94       	sei

    // erste Wandlung durchführen, damit ADC startklar ist (Warmup)
    ADCSRA |= (1 << ADSC);
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	86 b9       	out	0x06, r24	; 6
    while(ADCSRA & (1 << ADSC));
  92:	36 99       	sbic	0x06, 6	; 6
  94:	fe cf       	rjmp	.-4      	; 0x92 <main+0x34>

    //wandlungsergebnis abfragen
    adc_result = ADCH;
  96:	85 b1       	in	r24, 0x05	; 5

    while (1) 
    {

        // ADC starten
        ADCSRA |= (1 << ADSC);
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	86 b9       	out	0x06, r24	; 6
        // Warte bis ADC fertig ist
        while(ADCSRA & (1 << ADSC));
  9e:	36 99       	sbic	0x06, 6	; 6
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x40>

        // ADC Wert in Variable speichern
        adc_result = ADCH;
  a2:	85 b1       	in	r24, 0x05	; 5
		
		//uart_putch((uint8_t *) adc_result);

        // Ampel schalten
		
        if(adc_result > 150){ //sehr hell
  a4:	87 39       	cpi	r24, 0x97	; 151
  a6:	50 f0       	brcs	.+20     	; 0xbc <main+0x5e>
            PORTD |= (1 << PD7);
  a8:	92 b3       	in	r25, 0x12	; 18
  aa:	90 68       	ori	r25, 0x80	; 128
  ac:	92 bb       	out	0x12, r25	; 18
            PORTD &= ~(1 << PD6);
  ae:	92 b3       	in	r25, 0x12	; 18
  b0:	9f 7b       	andi	r25, 0xBF	; 191
  b2:	92 bb       	out	0x12, r25	; 18
            PORTD &= ~(1 << PD5);
  b4:	92 b3       	in	r25, 0x12	; 18
  b6:	9f 7d       	andi	r25, 0xDF	; 223
  b8:	92 bb       	out	0x12, r25	; 18
  ba:	15 c0       	rjmp	.+42     	; 0xe6 <main+0x88>
        }else if(adc_result > 110 ){ //mittel hell
  bc:	8f 36       	cpi	r24, 0x6F	; 111
  be:	50 f0       	brcs	.+20     	; 0xd4 <main+0x76>
            PORTD &= ~(1 << PD5);
  c0:	92 b3       	in	r25, 0x12	; 18
  c2:	9f 7d       	andi	r25, 0xDF	; 223
  c4:	92 bb       	out	0x12, r25	; 18
            PORTD |= (1 << PD6);
  c6:	92 b3       	in	r25, 0x12	; 18
  c8:	90 64       	ori	r25, 0x40	; 64
  ca:	92 bb       	out	0x12, r25	; 18
            PORTD &= ~(1 << PD7);
  cc:	92 b3       	in	r25, 0x12	; 18
  ce:	9f 77       	andi	r25, 0x7F	; 127
  d0:	92 bb       	out	0x12, r25	; 18
  d2:	09 c0       	rjmp	.+18     	; 0xe6 <main+0x88>
        }else{ //dunkel
            PORTD &= ~(1 << PD7);
  d4:	92 b3       	in	r25, 0x12	; 18
  d6:	9f 77       	andi	r25, 0x7F	; 127
  d8:	92 bb       	out	0x12, r25	; 18
            PORTD &= ~(1 << PD6);
  da:	92 b3       	in	r25, 0x12	; 18
  dc:	9f 7b       	andi	r25, 0xBF	; 191
  de:	92 bb       	out	0x12, r25	; 18
            PORTD |= (1 << PD5);
  e0:	92 b3       	in	r25, 0x12	; 18
  e2:	90 62       	ori	r25, 0x20	; 32
  e4:	92 bb       	out	0x12, r25	; 18
        }
		
		uart_putch(adc_result);
  e6:	1b d0       	rcall	.+54     	; 0x11e <uart_putch>

        // Warte 1 Sekunde
        //_delay_ms(1000);
    }
  e8:	d7 cf       	rjmp	.-82     	; 0x98 <main+0x3a>

000000ea <uart_send>:
}

void uart_flush()
{
	uart_inbufpos=0;
	uart_inbufeval=0;
  ea:	5d 9b       	sbis	0x0b, 5	; 11
  ec:	17 c0       	rjmp	.+46     	; 0x11c <uart_send+0x32>
  ee:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end>
  f2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <uart_outbufeval>
  f6:	98 17       	cp	r25, r24
  f8:	89 f0       	breq	.+34     	; 0x11c <uart_send+0x32>
  fa:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <uart_outbufeval>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	8e 0f       	add	r24, r30
 102:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <uart_outbufeval>
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	e1 59       	subi	r30, 0x91	; 145
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	80 81       	ld	r24, Z
 10e:	8c b9       	out	0x0c, r24	; 12
 110:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <uart_outbufeval>
 114:	8f 3f       	cpi	r24, 0xFF	; 255
 116:	11 f4       	brne	.+4      	; 0x11c <uart_send+0x32>
 118:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <uart_outbufeval>
 11c:	08 95       	ret

0000011e <uart_putch>:
 11e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__data_end>
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	9e 0f       	add	r25, r30
 126:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__data_end>
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e1 59       	subi	r30, 0x91	; 145
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	80 83       	st	Z, r24
 132:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 136:	8f 3f       	cpi	r24, 0xFF	; 255
 138:	11 f4       	brne	.+4      	; 0x13e <uart_putch+0x20>
 13a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 13e:	d5 df       	rcall	.-86     	; 0xea <uart_send>
 140:	08 95       	ret

00000142 <uart_init>:
 142:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 146:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <uart_outbufeval>
 14a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <uart_inbufpos>
 14e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <uart_inbufeval>
 152:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <reset_pos>
 156:	80 b5       	in	r24, 0x20	; 32
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	80 bd       	out	0x20, r24	; 32
 15c:	10 bc       	out	0x20, r1	; 32
 15e:	82 e2       	ldi	r24, 0x22	; 34
 160:	89 b9       	out	0x09, r24	; 9
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	82 60       	ori	r24, 0x02	; 2
 166:	8b b9       	out	0x0b, r24	; 11
 168:	80 b5       	in	r24, 0x20	; 32
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	80 bd       	out	0x20, r24	; 32
 16e:	86 e8       	ldi	r24, 0x86	; 134
 170:	80 bd       	out	0x20, r24	; 32
 172:	88 ed       	ldi	r24, 0xD8	; 216
 174:	8a b9       	out	0x0a, r24	; 10
 176:	8e e3       	ldi	r24, 0x3E	; 62
 178:	d2 df       	rcall	.-92     	; 0x11e <uart_putch>
 17a:	b7 df       	rcall	.-146    	; 0xea <uart_send>
 17c:	08 95       	ret

0000017e <uart_receive>:
 17e:	9c b1       	in	r25, 0x0c	; 12
 180:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <uart_inbufpos>
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	8e 0f       	add	r24, r30
 188:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <uart_inbufpos>
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	e1 59       	subi	r30, 0x91	; 145
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	90 83       	st	Z, r25
 194:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <uart_inbufpos>
 198:	8f 3f       	cpi	r24, 0xFF	; 255
 19a:	11 f4       	brne	.+4      	; 0x1a0 <uart_receive+0x22>
 19c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <uart_inbufpos>
 1a0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <reset_pos>
 1a4:	e8 2f       	mov	r30, r24
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e0 5a       	subi	r30, 0xA0	; 160
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	20 81       	ld	r18, Z
 1ae:	92 13       	cpse	r25, r18
 1b0:	10 c0       	rjmp	.+32     	; 0x1d2 <uart_receive+0x54>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <reset_pos>
 1b8:	8a 30       	cpi	r24, 0x0A	; 10
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <uart_receive+0x58>
 1bc:	83 e6       	ldi	r24, 0x63	; 99
 1be:	af df       	rcall	.-162    	; 0x11e <uart_putch>
 1c0:	99 e0       	ldi	r25, 0x09	; 9
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	a8 95       	wdr
 1ca:	81 bd       	out	0x21, r24	; 33
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	91 bd       	out	0x21, r25	; 33
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <uart_receive+0x52>
 1d2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <reset_pos>
 1d6:	08 95       	ret

000001d8 <__vector_13>:
}


ISR(USART_TXC_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	// character has been sent. see if there is more data in buffer
	uart_send();
 1fa:	77 df       	rcall	.-274    	; 0xea <uart_send>
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_11>:

ISR(USART_RXC_vect)
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 93       	push	r18
 22a:	3f 93       	push	r19
 22c:	4f 93       	push	r20
 22e:	5f 93       	push	r21
 230:	6f 93       	push	r22
 232:	7f 93       	push	r23
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	// character received by uart. load it to buffer
	uart_receive();
 240:	9e df       	rcall	.-196    	; 0x17e <uart_receive>
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
