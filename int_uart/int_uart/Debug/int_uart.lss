
int_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000203  0080006e  0080006e  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000967  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e3  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000555  00000000  00000000  0000146e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	11 c1       	rjmp	.+546    	; 0x23a <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	ec c0       	rjmp	.+472    	; 0x1f4 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e8       	ldi	r30, 0x84	; 132
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	ae e6       	ldi	r26, 0x6E	; 110
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 37       	cpi	r26, 0x71	; 113
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	12 c1       	rjmp	.+548    	; 0x280 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
int main(void)
{
    // Pin der roten Ampel A als Ausgang konfigurieren

    //DDRD |= (1 << PD6); // PD6 als Ausgang konfigurieren
    DDRD |= (1 << PD5); // PD5 als Ausgang konfigurieren
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	80 62       	ori	r24, 0x20	; 32
  62:	81 bb       	out	0x11, r24	; 17

    // variable fÃ¼r UART empfangenes Zeichen
    uint8_t rec;

    // UART initialisieren und interrupts lokal aktivieren
    uart_init();
  64:	7c d0       	rcall	.+248    	; 0x15e <uart_init>

    // globale Interrupts aktivieren
    sei();
  66:	78 94       	sei

    while (1) 
    {

        //toggle rote LED an Ampel A
        PORTD ^= (1 << PD5);
  68:	92 b3       	in	r25, 0x12	; 18
  6a:	80 e2       	ldi	r24, 0x20	; 32
  6c:	89 27       	eor	r24, r25
  6e:	82 bb       	out	0x12, r24	; 18

        //Lese empfangenes Zeichen und verschicke es wieder
        while(uart_chinbuf()){
  70:	02 c0       	rjmp	.+4      	; 0x76 <main+0x18>
            //empfangenes Zeichen lesen und in Variable rec speichern
            rec = uart_getch();
  72:	24 d0       	rcall	.+72     	; 0xbc <uart_getch>
            //empfangenes Zeichen wieder verschicken
            uart_putch(rec);
  74:	56 d0       	rcall	.+172    	; 0x122 <uart_putch>

        //toggle rote LED an Ampel A
        PORTD ^= (1 << PD5);

        //Lese empfangenes Zeichen und verschicke es wieder
        while(uart_chinbuf()){
  76:	0f d0       	rcall	.+30     	; 0x96 <uart_chinbuf>
  78:	81 11       	cpse	r24, r1
  7a:	fb cf       	rjmp	.-10     	; 0x72 <main+0x14>
            //empfangenes Zeichen wieder verschicken
            uart_putch(rec);
        }
		
		 // sende einen Zeilenvorschub und neue Zeile
		 uart_puts((uint8_t *)"\n"); //Zwei zeichen --> String
  7c:	80 e6       	ldi	r24, 0x60	; 96
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	62 d0       	rcall	.+196    	; 0x146 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	84 e3       	ldi	r24, 0x34	; 52
  86:	9c e0       	ldi	r25, 0x0C	; 12
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x2a>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x34>
  92:	00 00       	nop
  94:	e9 cf       	rjmp	.-46     	; 0x68 <main+0xa>

00000096 <uart_chinbuf>:
}

void uart_flush()
{
	uart_inbufpos=0;
	uart_inbufeval=0;
  96:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <uart_inbufeval>
  9a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uart_inbufpos>
  9e:	89 17       	cp	r24, r25
  a0:	38 f4       	brcc	.+14     	; 0xb0 <uart_chinbuf+0x1a>
  a2:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uart_inbufpos>
  a6:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <uart_inbufeval>
  aa:	89 1b       	sub	r24, r25
  ac:	81 50       	subi	r24, 0x01	; 1
  ae:	08 95       	ret
  b0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uart_inbufpos>
  b4:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <uart_inbufeval>
  b8:	89 1b       	sub	r24, r25
  ba:	08 95       	ret

000000bc <uart_getch>:
  bc:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <uart_inbufpos>
  c0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <uart_inbufeval>
  c4:	98 17       	cp	r25, r24
  c6:	89 f0       	breq	.+34     	; 0xea <uart_getch+0x2e>
  c8:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <uart_inbufeval>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8e 0f       	add	r24, r30
  d0:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <uart_inbufeval>
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ef 58       	subi	r30, 0x8F	; 143
  d8:	fe 4f       	sbci	r31, 0xFE	; 254
  da:	80 81       	ld	r24, Z
  dc:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <uart_inbufeval>
  e0:	9f 3f       	cpi	r25, 0xFF	; 255
  e2:	21 f4       	brne	.+8      	; 0xec <uart_getch+0x30>
  e4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <uart_inbufeval>
  e8:	08 95       	ret
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret

000000ee <uart_send>:
  ee:	5d 9b       	sbis	0x0b, 5	; 11
  f0:	17 c0       	rjmp	.+46     	; 0x120 <uart_send+0x32>
  f2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__data_end>
  f6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <uart_outbufeval>
  fa:	98 17       	cp	r25, r24
  fc:	89 f0       	breq	.+34     	; 0x120 <uart_send+0x32>
  fe:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <uart_outbufeval>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	8e 0f       	add	r24, r30
 106:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <uart_outbufeval>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ef 58       	subi	r30, 0x8F	; 143
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	8c b9       	out	0x0c, r24	; 12
 114:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <uart_outbufeval>
 118:	8f 3f       	cpi	r24, 0xFF	; 255
 11a:	11 f4       	brne	.+4      	; 0x120 <uart_send+0x32>
 11c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <uart_outbufeval>
 120:	08 95       	ret

00000122 <uart_putch>:
 122:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	9e 0f       	add	r25, r30
 12a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__data_end>
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ef 58       	subi	r30, 0x8F	; 143
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	80 83       	st	Z, r24
 136:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 13a:	8f 3f       	cpi	r24, 0xFF	; 255
 13c:	11 f4       	brne	.+4      	; 0x142 <uart_putch+0x20>
 13e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 142:	d5 df       	rcall	.-86     	; 0xee <uart_send>
 144:	08 95       	ret

00000146 <uart_puts>:
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <uart_puts+0xc>
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	e8 df       	rcall	.-48     	; 0x122 <uart_putch>
 152:	88 81       	ld	r24, Y
 154:	81 11       	cpse	r24, r1
 156:	fb cf       	rjmp	.-10     	; 0x14e <uart_puts+0x8>
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <uart_init>:
 15e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 162:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <uart_outbufeval>
 166:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <uart_inbufpos>
 16a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <uart_inbufeval>
 16e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <reset_pos>
 172:	80 b5       	in	r24, 0x20	; 32
 174:	8f 77       	andi	r24, 0x7F	; 127
 176:	80 bd       	out	0x20, r24	; 32
 178:	10 bc       	out	0x20, r1	; 32
 17a:	82 e2       	ldi	r24, 0x22	; 34
 17c:	89 b9       	out	0x09, r24	; 9
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	82 60       	ori	r24, 0x02	; 2
 182:	8b b9       	out	0x0b, r24	; 11
 184:	80 b5       	in	r24, 0x20	; 32
 186:	80 68       	ori	r24, 0x80	; 128
 188:	80 bd       	out	0x20, r24	; 32
 18a:	86 e8       	ldi	r24, 0x86	; 134
 18c:	80 bd       	out	0x20, r24	; 32
 18e:	88 ed       	ldi	r24, 0xD8	; 216
 190:	8a b9       	out	0x0a, r24	; 10
 192:	8e e3       	ldi	r24, 0x3E	; 62
 194:	c6 df       	rcall	.-116    	; 0x122 <uart_putch>
 196:	ab df       	rcall	.-170    	; 0xee <uart_send>
 198:	08 95       	ret

0000019a <uart_receive>:
 19a:	9c b1       	in	r25, 0x0c	; 12
 19c:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <uart_inbufpos>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	8e 0f       	add	r24, r30
 1a4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <uart_inbufpos>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ef 58       	subi	r30, 0x8F	; 143
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	90 83       	st	Z, r25
 1b0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <uart_inbufpos>
 1b4:	8f 3f       	cpi	r24, 0xFF	; 255
 1b6:	11 f4       	brne	.+4      	; 0x1bc <uart_receive+0x22>
 1b8:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <uart_inbufpos>
 1bc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <reset_pos>
 1c0:	e8 2f       	mov	r30, r24
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ee 59       	subi	r30, 0x9E	; 158
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	20 81       	ld	r18, Z
 1ca:	92 13       	cpse	r25, r18
 1cc:	10 c0       	rjmp	.+32     	; 0x1ee <uart_receive+0x54>
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
 1d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <reset_pos>
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	69 f4       	brne	.+26     	; 0x1f2 <uart_receive+0x58>
 1d8:	83 e6       	ldi	r24, 0x63	; 99
 1da:	a3 df       	rcall	.-186    	; 0x122 <uart_putch>
 1dc:	99 e0       	ldi	r25, 0x09	; 9
 1de:	88 e1       	ldi	r24, 0x18	; 24
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	a8 95       	wdr
 1e6:	81 bd       	out	0x21, r24	; 33
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	91 bd       	out	0x21, r25	; 33
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <uart_receive+0x52>
 1ee:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <reset_pos>
 1f2:	08 95       	ret

000001f4 <__vector_13>:
}


ISR(USART_TXC_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	// character has been sent. see if there is more data in buffer
	uart_send();
 216:	6b df       	rcall	.-298    	; 0xee <uart_send>
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_11>:

ISR(USART_RXC_vect)
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	// character received by uart. load it to buffer
	uart_receive();
 25c:	9e df       	rcall	.-196    	; 0x19a <uart_receive>
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
