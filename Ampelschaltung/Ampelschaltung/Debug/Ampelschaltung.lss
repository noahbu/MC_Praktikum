
Ampelschaltung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ff  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ad  00000000  00000000  000009a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000339  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000355  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fc  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	32 d0       	rcall	.+100    	; 0xa8 <main>
  44:	a9 c0       	rjmp	.+338    	; 0x198 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <mydelay_ms>:
// If the button is pressed, the mode changes and the function returns 1, otherwise returns 0
void mydelay_ms(uint16_t delay_ms, uint8_t *tag) {
	uint16_t i;
	static uint8_t buttonPreviouslyPressed = 0; // Keep track of the button's previous state

	for (i = 0; i < delay_ms; i += 50) { // Check every 50 ms
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	29 c0       	rjmp	.+82     	; 0xa0 <mydelay_ms+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	4f ef       	ldi	r20, 0xFF	; 255
  50:	50 e7       	ldi	r21, 0x70	; 112
  52:	e2 e0       	ldi	r30, 0x02	; 2
  54:	41 50       	subi	r20, 0x01	; 1
  56:	50 40       	sbci	r21, 0x00	; 0
  58:	e0 40       	sbci	r30, 0x00	; 0
  5a:	e1 f7       	brne	.-8      	; 0x54 <mydelay_ms+0xc>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <mydelay_ms+0x16>
  5e:	00 00       	nop
		_delay_ms(50); // Wait for 50 ms

		if (PIND & (1<<PD2)) { // Check if the button is currently pressed
  60:	82 9b       	sbis	0x10, 2	; 16
  62:	1a c0       	rjmp	.+52     	; 0x98 <mydelay_ms+0x50>
			if (!buttonPreviouslyPressed) { // If button was not pressed before (edge detection)
  64:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <_edata>
  68:	41 11       	cpse	r20, r1
  6a:	18 c0       	rjmp	.+48     	; 0x9c <mydelay_ms+0x54>
  6c:	ff ef       	ldi	r31, 0xFF	; 255
  6e:	40 e7       	ldi	r20, 0x70	; 112
  70:	52 e0       	ldi	r21, 0x02	; 2
  72:	f1 50       	subi	r31, 0x01	; 1
  74:	40 40       	sbci	r20, 0x00	; 0
  76:	50 40       	sbci	r21, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <mydelay_ms+0x2a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <mydelay_ms+0x34>
  7c:	00 00       	nop
				_delay_ms(50); // Debounce delay
				if (PIND & (1<<PD2)) { // Confirm the button is still pressed
  7e:	82 9b       	sbis	0x10, 2	; 16
  80:	0d c0       	rjmp	.+26     	; 0x9c <mydelay_ms+0x54>
					*tag = !*tag; // Toggle 'tag'
  82:	fb 01       	movw	r30, r22
  84:	50 81       	ld	r21, Z
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	51 11       	cpse	r21, r1
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	fb 01       	movw	r30, r22
  8e:	40 83       	st	Z, r20
					buttonPreviouslyPressed = 1; // Update the state to indicate the button is now pressed
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
  96:	02 c0       	rjmp	.+4      	; 0x9c <mydelay_ms+0x54>
				}
			}
			} else {
			buttonPreviouslyPressed = 0; // Button is not pressed, reset the state
  98:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
// If the button is pressed, the mode changes and the function returns 1, otherwise returns 0
void mydelay_ms(uint16_t delay_ms, uint8_t *tag) {
	uint16_t i;
	static uint8_t buttonPreviouslyPressed = 0; // Keep track of the button's previous state

	for (i = 0; i < delay_ms; i += 50) { // Check every 50 ms
  9c:	2e 5c       	subi	r18, 0xCE	; 206
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
  a0:	28 17       	cp	r18, r24
  a2:	39 07       	cpc	r19, r25
  a4:	a0 f2       	brcs	.-88     	; 0x4e <mydelay_ms+0x6>
			}
			} else {
			buttonPreviouslyPressed = 0; // Button is not pressed, reset the state
		}
	}
}
  a6:	08 95       	ret

000000a8 <main>:



int main(void) {
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	1f 92       	push	r1
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	// Set DDR (Data Direction Register) for all traffic lights
	DDRD |= (1<<Arot) | (1<<Agelb) | (1<<Agrun);
  b2:	81 b3       	in	r24, 0x11	; 17
  b4:	80 6e       	ori	r24, 0xE0	; 224
  b6:	81 bb       	out	0x11, r24	; 17
	DDRB |= (1<<Brot) | (1<<Bgelb) | (1<<Bgrun);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	87 60       	ori	r24, 0x07	; 7
  bc:	87 bb       	out	0x17, r24	; 23
	DDRC |= (1<<Crot) | (1<<Cgelb) | (1<<Cgrun) | (1<<Drot) | (1<<Dgelb) | (1<<Dgrun);
  be:	84 b3       	in	r24, 0x14	; 20
  c0:	8f 63       	ori	r24, 0x3F	; 63
  c2:	84 bb       	out	0x14, r24	; 20

	uint8_t tag = 1; // Start in day mode
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	89 83       	std	Y+1, r24	; 0x01

	while (1) {
		if(tag == 1) { // Day mode logic
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	09 f0       	breq	.+2      	; 0xd0 <main+0x28>
  ce:	4f c0       	rjmp	.+158    	; 0x16e <main+0xc6>
			// A, C is green; B, D is red
			PORTD |= (1<<Agrun);
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	82 bb       	out	0x12, r24	; 18
			PORTC |= (1<<Cgrun) | (1<<Drot);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	89 60       	ori	r24, 0x09	; 9
  da:	85 bb       	out	0x15, r24	; 21
			PORTB |= (1<<Brot);
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	88 bb       	out	0x18, r24	; 24

			mydelay_ms(800, &tag);
  e2:	be 01       	movw	r22, r28
  e4:	6f 5f       	subi	r22, 0xFF	; 255
  e6:	7f 4f       	sbci	r23, 0xFF	; 255
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	ad df       	rcall	.-166    	; 0x48 <mydelay_ms>

			// Transition from green to yellow for A and C
			PORTD |= (1<<Agelb);
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	82 bb       	out	0x12, r24	; 18
			PORTC |= (1<<Cgelb) | (1<<Dgelb);
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	82 61       	ori	r24, 0x12	; 18
  f8:	85 bb       	out	0x15, r24	; 21
			PORTB |= (1<<Bgelb);
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	88 bb       	out	0x18, r24	; 24

			mydelay_ms(300, &tag);
 100:	be 01       	movw	r22, r28
 102:	6f 5f       	subi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	8c e2       	ldi	r24, 0x2C	; 44
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	9e df       	rcall	.-196    	; 0x48 <mydelay_ms>

			// Turn off green and yellow lights for A and C
			PORTD &= ~((1<<Agrun) | (1<<Agelb));
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	8f 73       	andi	r24, 0x3F	; 63
 110:	82 bb       	out	0x12, r24	; 18
			PORTC &= ~((1<<Cgrun) | (1<<Cgelb) | (1<<Drot) | (1<<Dgelb));
 112:	85 b3       	in	r24, 0x15	; 21
 114:	84 7e       	andi	r24, 0xE4	; 228
 116:	85 bb       	out	0x15, r24	; 21
			PORTB &= ~((1<<Brot) | (1<<Bgelb));
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	89 7f       	andi	r24, 0xF9	; 249
 11c:	88 bb       	out	0x18, r24	; 24

			// A, C is red; B, D is green
			PORTD |= (1<<Arot);
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	80 62       	ori	r24, 0x20	; 32
 122:	82 bb       	out	0x12, r24	; 18
			PORTC |= (1<<Crot) | (1<<Dgrun);
 124:	85 b3       	in	r24, 0x15	; 21
 126:	84 62       	ori	r24, 0x24	; 36
 128:	85 bb       	out	0x15, r24	; 21
			PORTB |= (1<<Bgrun);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	88 bb       	out	0x18, r24	; 24

			mydelay_ms(800, &tag);
 130:	be 01       	movw	r22, r28
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	93 e0       	ldi	r25, 0x03	; 3
 13a:	86 df       	rcall	.-244    	; 0x48 <mydelay_ms>
			// Transition from green to yellow for B and D
			PORTD |= (1<<Agelb);
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	82 bb       	out	0x12, r24	; 18
			PORTC |= (1<<Cgelb) | (1<<Dgelb);
 142:	85 b3       	in	r24, 0x15	; 21
 144:	82 61       	ori	r24, 0x12	; 18
 146:	85 bb       	out	0x15, r24	; 21
			PORTB |= (1<<Bgelb);
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	88 bb       	out	0x18, r24	; 24

			mydelay_ms(300, &tag);
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	8c e2       	ldi	r24, 0x2C	; 44
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	77 df       	rcall	.-274    	; 0x48 <mydelay_ms>

			// Turn off all lights before the next cycle
			PORTD &= ~((1<<Arot) | (1<<Agelb));
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	8f 79       	andi	r24, 0x9F	; 159
 15e:	82 bb       	out	0x12, r24	; 18
			PORTC &= ~((1<<Crot) | (1<<Cgelb) | (1<<Dgrun) | (1<<Dgelb));
 160:	85 b3       	in	r24, 0x15	; 21
 162:	89 7c       	andi	r24, 0xC9	; 201
 164:	85 bb       	out	0x15, r24	; 21
			PORTB &= ~((1<<Bgrun) | (1<<Bgelb));
 166:	88 b3       	in	r24, 0x18	; 24
 168:	8c 7f       	andi	r24, 0xFC	; 252
 16a:	88 bb       	out	0x18, r24	; 24
 16c:	ad cf       	rjmp	.-166    	; 0xc8 <main+0x20>

			} 
			else if( tag == 0)
 16e:	81 11       	cpse	r24, r1
 170:	ab cf       	rjmp	.-170    	; 0xc8 <main+0x20>
			{ // Night mode logic
			// Toggle yellow lights
			PORTB ^= (1<<Bgelb);
 172:	98 b3       	in	r25, 0x18	; 24
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	89 27       	eor	r24, r25
 178:	88 bb       	out	0x18, r24	; 24
			PORTC ^= (1<<Dgelb) | (1<<Cgelb);
 17a:	95 b3       	in	r25, 0x15	; 21
 17c:	82 e1       	ldi	r24, 0x12	; 18
 17e:	89 27       	eor	r24, r25
 180:	85 bb       	out	0x15, r24	; 21
			PORTD ^= (1<<Agelb);
 182:	92 b3       	in	r25, 0x12	; 18
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	89 27       	eor	r24, r25
 188:	82 bb       	out	0x12, r24	; 18

			mydelay_ms(800, &tag); // Check for mode change
 18a:	be 01       	movw	r22, r28
 18c:	6f 5f       	subi	r22, 0xFF	; 255
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	59 df       	rcall	.-334    	; 0x48 <mydelay_ms>
 196:	98 cf       	rjmp	.-208    	; 0xc8 <main+0x20>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
